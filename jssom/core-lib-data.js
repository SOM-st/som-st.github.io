export function loadCoreLib() { return {"core-lib": {"TestSuite": {"IntegerTest.som": "\"\n\n$Id: IntegerTest.som 30 2009-07-31 12:20:25Z michael.haupt $\n\nCopyright (c) 2007-2013 see AUTHORS file\nSoftware Architecture Group, Hasso Plattner Institute, Potsdam, Germany\nhttp://www.hpi.uni-potsdam.de/swa/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nIntegerTest = TestCase (\n\n  testEqualityAndIdentity = (\n    | a b |\n    a := 42.\n    b := 42.\n\n    self assert: a = b   description: 'Integers are equal based on their value'.\n    self assert: a == b  description: 'Integers do not have pointer/reference equality. It is also supposed to be value equality'.\n\n    \"Sometimes it can be hard to implement efficiently, but it SHOULD really\n     be true for all values of integers.\"\n    a := 1 << 30.  b := 1 << 30.\n    self optional: #integerIdentity assert: a is: b.\n\n    a := 1 << 32.  b := 1 << 32.\n    self optional: #integerIdentity assert: a is: b.\n\n    a := 1 << 60.  b := 1 << 60.\n    self optional: #integerIdentity assert: a is: b.\n\n    a := 1 << 70.  b := 1 << 70.\n    self optional: #integerIdentity assert: a is: b.\n\n    a := 1 << 100.  b := 1 << 100.\n    self optional: #integerIdentity assert: a is: b.\n  )\n\n  testClassAndValueRanges = (\n    | i |\n    self assert: Integer equals: -42 class.\n    self assert: Integer equals:   0 class.\n    self assert: Integer equals:  23 class.\n    self assert: Integer equals:  1073741823 class.\n    self assert: Integer equals:  1073741824 class.\n\n    \"Let's test for size behavior and corresponding class\"\n    i := 1 << 30.\n    self assert: Integer equals: i class.\n    self assert: i > 0 description: 'should not overflow'.\n    self assert: '1073741824' equals: i asString.\n\n    i := 1 << 32.\n    self assert: Integer equals: i class.\n    self assert: i > 0 description: 'should not overflow'.\n    self assert: '4294967296' equals: i asString.\n\n    i := 1 << 60.\n    self assert: Integer equals: i class.\n    self assert: i > 0 description: 'should not overflow'.\n    self assert: '1152921504606846976' equals: i asString.\n\n    i := 1 << 70.\n    self assert: Integer equals: i class.\n    self assert: i > 0 description: 'should not overflow'.\n    self optional: #bigIntShifts assert: '1180591620717411303424' equals: i asString.\n\n    i := -1 << 30.\n    self assert: Integer equals: i class.\n    self assert: i < 0 description: 'should not underflow'.\n    self assert: '-1073741824' equals: i asString.\n\n    i := -1 << 32.\n    self assert: Integer equals: i class.\n    self assert: i < 0 description: 'should not underflow'.\n    self assert: '-4294967296' equals: i asString.\n\n    i := -1 << 60.\n    self assert: Integer equals: i class.\n    self assert: i < 0 description: 'should not underflow'.\n    self assert: '-1152921504606846976' equals: i asString.\n\n    i := -1 << 70.\n    self assert: Integer equals: i class.\n    self assert: i < 0 description: 'should not underflow'.\n    self optional: #bigIntShifts assert: '-1180591620717411303424' equals: i asString.\n  )\n\n  testStringConversion = (\n    self assert:  '0' equals: ( 0 asString).\n    self assert:  '1' equals: ( 1 asString).\n    self assert:  '2' equals: ( 2 asString).\n    self assert: '-1' equals: (-1 asString).\n    self assert: '-2' equals: (-2 asString).\n\n    self assert:  1 equals: (Integer fromString:  '1').\n    self assert: -1 equals: (Integer fromString: '-1').\n    self assert: 42 equals: (Integer fromString: '42').\n\n    self assert: 42 equals: '42' asInteger.\n    self assert: -2 equals: '-2' asInteger.\n  )\n\n  testRangeBorders = (\n    self assert:   '536870911' equals:   536870911 asString.\n    self assert:   '536870912' equals:   536870912 asString.\n    self assert:   '536870913' equals:   536870913 asString.\n    self assert:  '1073741823' equals:  1073741823 asString.\n    self assert:  '1073741824' equals:  1073741824 asString.\n    self assert:  '1073741825' equals:  1073741825 asString.\n    self assert:  '2147483647' equals:  2147483647 asString.\n    self assert:  '-536870911' equals:  -536870911 asString.\n    self assert:  '-536870912' equals:  -536870912 asString.\n    self assert:  '-536870913' equals:  -536870913 asString.\n    self assert: '-1073741823' equals: -1073741823 asString.\n    self assert: '-1073741824' equals: -1073741824 asString.\n    self assert: '-1073741825' equals: -1073741825 asString.\n    self assert: '-2147483647' equals: -2147483647 asString.\n    self assert: '-2147483648' equals: -2147483648 asString.\n  )\n\n  testComparisons = (\n    self assert: ( 9 =  9).\n    self deny:   ( 1 =  2).\n    self deny:   ( 0 <  0).\n    self assert: ( 1 <  2).\n    self deny:   ( 2 <  1).\n    self assert: (-3 <  2).\n    self deny:   ( 3 < -2).\n    self deny:   ( 0 >  0).\n    self deny:   ( 1 >  2).\n    self assert: ( 2 >  1).\n    self deny:   (-3 >  2).\n    self assert: ( 3 > -2).\n    self assert: ( 4 >= 3).\n    self assert: ( 3 >= 3).\n    self deny:   ( 2 >= 3).\n    self assert: ( 2 <= 4).\n    self assert: ( 3 <= 3).\n    self deny:   ( 4 <= 3).\n  )\n\n  testAddition = (\n    self assert: 0 equals: ( 0+0).\n    self assert: 1 equals: ( 1+0).\n    self assert: 1 equals: ( 0+1).\n    self assert: 2 equals: ( 1+1).\n    self assert: 0 equals: (-1+1).\n    self assert: 1 equals: (-1+2).\n  )\n\n  testSubtraction = (\n    self assert:  1 equals: (1-0).\n    self assert: -1 equals: (0-1).\n    self assert:  1 equals: (2-1).\n  )\n\n  testMultiplication = (\n    self assert:   0 equals: ( 1*  0).\n    self assert:  -1 equals: (-1*  1).\n    self assert: -25 equals: ( 5* -5).\n    self assert:  12 equals: (-3* -4).\n  )\n\n  testDivision = (\n    self assert:  1 equals: (  1/  1).\n    self assert:  1 equals: (  3/  2).\n    self assert: -2 equals: (  4/ -2).\n    self assert: -2 equals: ( -6/  3).\n    self assert:  3 equals: (-12/ -4).\n  )\n\n  testDouble = (\n    self assert:  6 equals: ( 36//  6).\n    self assert: -5 equals: (-10//  2).\n    self assert: -4 equals: ( 20// -5).\n    self assert:  1 equals: ( -5// -5).\n  )\n\n  testModulo = (\n    self assert:  1 equals: ( 10 %  3).\n    self assert: -2 equals: ( 10 % -3).\n    self assert:  2 equals: (-10 %  3).\n    self assert: -1 equals: (-10 % -3).\n    self assert:  0 equals: ( 10 %  5).\n\n    self assert:  1 equals: ( 10 rem:  3).\n    self assert:  1 equals: ( 10 rem: -3).\n    self assert: -1 equals: (-10 rem:  3).\n    self assert: -1 equals: (-10 rem: -3).\n    self assert:  0 equals: ( 10 rem:  5).\n  )\n\n  testAbsoluteValue = (\n    self assert: 4 equals: -4 abs.\n    self assert: 4 equals:  4 abs.\n    \n    self assert: 9223372036854775296 equals: -9223372036854775296 abs.\n    self assert: 9223372036854775296 equals:  9223372036854775296 abs.\n  )\n\n  testNegated = (\n    self assert: -23 equals: ( 23 negated).\n    self assert:  23 equals: (-23 negated).\n  )\n\n  testSquareRoot = (\n    self assert:       5 equals: (25 sqrt).\n    self assert: Integer equals: (25 sqrt class).\n  )\n\n  testAnd = (\n    self assert: 0 equals: (2 & 1).\n    self assert: 2 equals: (2 & 2).\n  )\n\n  testBitXor = (\n    self assert: 0 equals: (1 bitXor: 1).\n    self assert: 3 equals: (2 bitXor: 1).\n  )\n\n  testAs32BitUnsignedValue = (\n    self assert: 1 <<  1 equals: (1 <<  1) as32BitUnsignedValue.\n    self assert: 1 << 10 equals: (1 << 10) as32BitUnsignedValue.\n    self assert: 1 << 31 equals: (1 << 31) as32BitUnsignedValue.\n    self assert:       0 equals: (1 << 32) as32BitUnsignedValue.\n    self assert: 4294967295 equals:     -1 as32BitUnsignedValue.\n    self assert: 512        equals: -9223372036854775296 as32BitUnsignedValue.\n    self assert: 4294966784 equals:  9223372036854775296 as32BitUnsignedValue.\n  )\n\n  testAs32BitSignedValue = (\n    self assert:     1 <<  1 equals: (1 <<  1) as32BitSignedValue.\n    self assert:     1 << 10 equals: (1 << 10) as32BitSignedValue.\n    self assert: -2147483648 equals: (1 << 31) as32BitSignedValue.\n    self assert:           0 equals: (1 << 32) as32BitSignedValue.\n    \n    self assert:  512 equals:  -9223372036854775296 as32BitSignedValue.\n    self assert: -512 equals:   9223372036854775296 as32BitSignedValue.\n  )\n\n  testUnsignedRightShift = (\n    self assert: 0   equals:    1 >>> 1.\n    self assert: 512 equals: 1024 >>> 1.\n    self assert: 127 equals: 1023 >>> 3.\n\n    \"not sure whether we should really insist on this\"\n    self optional: #toBeSpecified assert: 9223372036854775807 equals:    -1 >>> 1.\n    self optional: #toBeSpecified assert: 9223372036854775296 equals: -1024 >>> 1.\n  )\n\n  testMin = (\n    \"We need to test numbers that are 64bit or less, larger than 64bit,\n     positive, and negative\"\n    | big small |\n    big   := #(1 100 9223372036854775807 922337203685477580700\n               -50 -2147483648 922337203685477580700 -922337203685477580700\n               922337203685477580700).\n    small := #(0  52 9223372036854775296 922337203685477529600\n               -51 -2147483650                     1 -922337203685477580701\n               -922337203685477580701).\n  \n    big doIndexes: [:i |\n      self assert: (small at: i)  equals: ((big   at: i) min: (small at: i)).\n      self assert: (small at: i)  equals: ((small at: i) min: (big   at: i)) ]\n  )\n  \n  testMax = (\n    \"We need to test numbers that are 64bit or less, larger than 64bit,\n     positive, and negative\"\n    | big small |\n    big   := #(1 100 9223372036854775807 922337203685477580700\n               -50 -2147483648 922337203685477580700 -922337203685477580700\n               922337203685477580700).\n    small := #(0  52 9223372036854775296 922337203685477529600\n               -51 -2147483650                     1 -922337203685477580701\n               -922337203685477580701).\n    big doIndexes: [:i |\n      self assert: (big at: i)  equals: ((big   at: i) max: (small at: i)).\n      self assert: (big at: i)  equals: ((small at: i) max: (big   at: i)) ]\n  )\n)\n", "SymbolTest.som": "\"\n\n$Id: SymbolTest.som 30 2009-07-31 12:20:25Z michael.haupt $\n\nCopyright (c) 2007-2013 see AUTHORS file\nSoftware Architecture Group, Hasso Plattner Institute, Potsdam, Germany\nhttp://www.hpi.uni-potsdam.de/swa/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nSymbolTest = TestCase (\n\n  testConversion = (\n    self assert: 'gunk' equals: 'gunk' asSymbol asString.\n    self assert: 'oink' equals: #oink asString.\n  )\n  \n  testEquality = (\n    self assert: #oink is: 'oink' asSymbol.\n  )\n  \n  testSymbolIsString = (\n    self assert: (#oink beginsWith: 'oink').\n    self assert: 100 equals: #'100' asInteger.\n    self assert: String equals: #foo class superclass\n  )\n)\n", "TestHarness.som": "\"\n\n$Id: TestHarness.som 30 2009-07-31 12:20:25Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nTestHarness = (\n    | failOnUnsupportedOptionals |\n\n\n    tests = ( \"Now ordered by alphabetical order to improve maintainability\"\n        ^ EmptyTest,\n          SpecialSelectorsTest,\n          ArrayTest,\n          BlockTest,\n          ClassLoadingTest,\n          ClassStructureTest,\n          ClosureTest,\n          CoercionTest,\n          CompilerReturnTest,\n          DoesNotUnderstandTest,\n          DoubleTest,\n          GlobalTest,\n          HashTest,\n          IntegerTest,\n          PreliminaryTest,\n          ReflectionTest,\n          SelfBlockTest,\n          SetTest,\n          StringTest,\n          SuperTest,\n          SymbolTest,\n          SystemTest,\n          VectorTest\n    )\n\n\n    runAllSuites = (\n      | totalTestNum successfulTestNum unsupportedTestNum totalAssertionNum |\n      totalTestNum := 0.\n      unsupportedTestNum := 0.\n      successfulTestNum := 0.\n      totalAssertionNum := 0.\n\n      self tests do: [ :test |\n        | runner |\n        runner := TestRunner new.\n        runner initializeOn: test.\n        runner runAllTests.\n        (runner hasUnsupported or: [runner hasFailures])\n          ifTrue: [\n            'Test Suite: ' print.\n            test name println.\n            runner overviewReport.\n            '' println ].\n\n        totalTestNum       := totalTestNum + runner expectedPasses.\n        unsupportedTestNum := unsupportedTestNum + runner actualUnsupported.\n        successfulTestNum  := successfulTestNum + runner actualPasses.\n        totalAssertionNum  := totalAssertionNum + runner numAsserts.\n      ].\n\n      'Total number of tests:           ' print.\n      totalTestNum println.\n      'Number of unsupported optionals: ' print.\n      unsupportedTestNum println.\n      'Number of successful tests:      ' print.\n      successfulTestNum println.\n      'Number of assertions tested:     ' print.\n      totalAssertionNum println.\n\n      (failOnUnsupportedOptionals and: [unsupportedTestNum > 0])\n        ifTrue: [system exit: 1].\n      totalTestNum = successfulTestNum\n        ifFalse: [system exit: 1].\n    )\n\n    runOneSuite: name = (\n      | testName runner |\n      testName := name.\n      (testName endsWith: 'Test') ifFalse: [\n        testName := testName + 'Test'].\n\n      runner := TestRunner new.\n      runner initializeOn: (system resolve: testName asSymbol).\n      runner run.\n      runner hasFailures ifTrue: [system exit: 1]\n    )\n\n    run: args = (\n        failOnUnsupportedOptionals := false.\n\n        args length = 1 ifTrue:  [ self runAllSuites. ].\n        args length = 2 ifTrue:  [\n          ((args at: 2) beginsWith: '--') ifTrue: [\n            (args at: 2) = '--help' ifTrue: [\n              'TestHarness.som [--help] [--fail-on-optionals] [TestSuiteName]' println.\n              system exit: 0 ].\n\n            (args at: 2) = '--fail-on-optionals' ifTrue: [\n              failOnUnsupportedOptionals := true ].\n\n            self runAllSuites\n          ] ifFalse: [\n            self runOneSuite: (args at: 2) ]].\n    )\n)\n", "SuperTest.som": "\"\n\nCopyright (c) 2007-2018 see AUTHORS file\nSoftware Architecture Group, Hasso Plattner Institute, Potsdam, Germany\nhttp://www.hpi.uni-potsdam.de/swa/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nSuperTest = SuperTestSuperClass (\n\n  testSuper = (\n    self assert: 42 equals: self give42.\n    self assert: 42 equals: self blockGive42.\n  )\n\n  yourself = (\n    record := record + 1000.\n    ^ self\n  )\n\n  give42 = (\n    ^super give42\n  )\n\n  blockGive42 = (\n    ^[ super give42 ] value\n  )\n\n  something = (\n    ^ #sub\n  )\n\n  number = (\n    ^ 10\n  )\n\n  testWithBinaryUnaryMessage = (\n    | val |\n    record := 0.\n    val := super number * super number.\n    self assert: 1 equals: val.\n  )\n\n  testWithBinaryUnaryUnaryMessage = (\n    | val |\n    record := 0.\n    super yourself yourself @ super yourself yourself.\n    self assert: 2002 equals: record.\n  )\n\n  testWithKeywordUnaryUnaryMessage = (\n    | val |\n    record := 0.\n    super key: super yourself yourself key: super yourself yourself.\n    self assert: 2002 equals: record.\n\n    record := 0.\n    self key: super yourself yourself key: super yourself yourself.\n    self assert: 2002 equals: record.\n  )\n\n  \"Note: testing assigning self was moved to basic interpreter tests\"\n\n  testGlobalSelfDoesNotShadowKeyword = (\n    | that |\n    that := self.\n    system global: #self put: 42.\n    that optional: #selfSuperBug assert: that is: self.\n\n    self assert: 42 equals: (system global: #self)\n  )\n\n  testGlobalSuperDoesNotShadowKeyword = (\n    | that |\n    that := super.\n    system global: #super put: 42.\n    that optional: #selfSuperBug assert: that is: super.\n\n    self assert: 42 equals: (system global: #super)\n  )\n)\n", "ReflectionTest.som": "\"\n\n$Id: ReflectionTest.som 30 2009-07-31 12:20:25Z michael.haupt $\n\nCopyright (c) 2007-2013 see AUTHORS file\nSoftware Architecture Group, Hasso Plattner Institute, Potsdam, Germany\nhttp://www.hpi.uni-potsdam.de/swa/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nReflectionTest = TestCase (\n  testResondsTo = (\n    self assert: (Object new respondsTo: #isNil).\n    self assert: (23 respondsTo: #isNil).\n    self assert: (23 respondsTo: #+).\n  )\n  \n  testMethods = (\n    \"First method in Object should be #class.\"\n    self assert: #class equals: (Object methods at: 1) signature.\n    self assert: (Object hasMethod: #==).\n  )\n\n  testPerform = (\n    | o |\n    self assert: Integer equals: (23 perform: #class).\n    self assert: (23 perform: #between:and: withArguments: (Array with: 22 with: 24)).\n    \n    o := SuperTest new.\n    self assert: #super equals: (o perform: #something inSuperclass: SuperTestSuperClass).\n    \n    \"Trying to see whether the stack in bytecode-based SOMs works properly\"\n    self assert: #a equals: ((23 perform: #class) = Integer ifTrue: [#a] ifFalse: [#b]).\n\n    self assert: 28 equals: 5 + (23 perform: #value).\n  )\n  \n  testInstVarAtAndPut = (\n    | tmp |\n    \"Testing #at: and #at:put:\"\n    tmp := Pair withKey: 3 andValue: 42.\n    \n    self assert: tmp key equals: (tmp instVarAt: 1).\n    \n    tmp instVarAt: 1 put: #foo.\n    self assert: #foo    equals: tmp key.\n  )\n)\n", "ClassStructureTest.som": "ClassStructureTest = TestCase (\n\n  testClassIdentity = (\n    self assert: Array   equals: Array new class.\n    self assert: Integer equals: 1 class.\n    self assert: Integer equals: 10000000000 class.\n    self assert: Double  equals: (1 // 2) class.\n    self assert: Double  equals: 0.5 class.\n    self assert: Block1  equals: [42] class.\n    self assert: Object  equals: Object new class.\n    self assert: Set     equals: Set new class.\n    self assert: String  equals: 'foo' class.\n    self assert: Symbol  equals: #foo class.\n    self assert: True    equals: true class.\n    self assert: False   equals: false class.\n    self assert: Nil     equals: nil class.\n\n    self assert: True superclass equals: False superclass.\n    self assert: True superclass equals: Boolean.\n    self assert: True superclass equals: Boolean.\n  )\n\n  testThatCertainMethodsArePrimitives = (\n    | m |\n    \"This is a little fragile.\n     Index needs to be adapted with changing Class definition.\"\n    m := Object methods at: 1.\n    \"self expect: #class equals: m signature.\"\n\n    self optional: #invokableTypes assert: Primitive equals: m class. \"Class>>#name should be a primitive.\"\n\n    m := Object methods at: 7.\n    \"self expect: #asString equals: m signature.\"\n\n    self optional: #invokableTypes assert: Method equals: m class. \"Class>>#asString should be a normal method.\"\n  )\n\n  testAccessToInstanceFields = (\n    | o |\n    o := ClassC new.\n    o a: 333.\n    self assert: 333 equals: o a.\n\n    o f: 333.\n    self assert: 333 equals: o f.\n  )\n\n  testAccessToClassFields = (\n    | arr |\n    ClassC setAllAndInc: 4.\n    arr := ClassC getAll.\n    1 to: 9 do: [:i |\n      self assert: i + (4 - 1) equals: (arr at: i).\n    ].\n\n    \"We do that here to make sure that class fields do not interfere with\n     other class properties.\"\n    self assert: ClassB    is: ClassC superclass.\n    self assert: Metaclass is: ClassC class class.\n    self assert: #ClassC   equals: ClassC name.\n  )\n\n  testMetaclasses = (\n    self assert: nil              is: Object superclass.\n    self assert: Integer          is: 1 class.\n    self assert: #'Integer class' is: 1 class class name.\n    self assert: Metaclass        is: 1 class class class.\n\n    self assert: #'Metaclass class' is: Metaclass class name.\n    self assert: Metaclass          is: Metaclass class class.\n\n    self assert: Object          is: 1 class superclass.\n    self assert: #'Object class' is: 1 class class superclass name.\n    self assert: Class           is: Object class superclass.\n    self assert: Metaclass       is: Class class class.\n  )\n\n  testInstanceFields = (\n    self assert: 2 equals: ClassA fields length.\n    self assert: 4 equals: ClassB fields length.\n    self assert: 6 equals: ClassC fields length.\n  )\n)\n", "BlockTest.som": "BlockTest = TestCase (\n    |escape_count escaped_block|\n\n    simpleBlock = (\n      ^[42]\n    )\n\n    incBlock = (\n      ^[ :val | val + 1]\n    )\n\n    \"This requires a closure\"\n    adderBlock: amount = (\n      ^[ :val | amount + val]\n    )\n\n    \"Closure with mutable state in block\"\n    counterBlock = (\n      |count|\n      count := 0.\n      ^[count := count + 1. count]\n    )\n\n    selfKeeper = (\n      ^[self]\n    )\n\n    escapingBlock = (\n      ^[^42]\n    )\n    \n    testSimpleBlocks = (\n      self assert: 42 equals: self simpleBlock value.\n      self assert: 4  equals: (self incBlock value: 3).\n      self assert: 43 equals: ((self adderBlock: 13) value: 30).\n    )\n    \n    testClosure = (\n      | counter |\n      counter := self counterBlock.\n      self assert: 1 equals: counter value.\n      self assert: 2 equals: counter value.\n      self assert: 1 equals: self counterBlock value. \"make sure each copy is independent\"\n      self assert: 3 equals: counter value.\n    )\n    \n    testSelfInBlock = (\n      | test_inst |\n      test_inst := BlockTest new.\n      self assert: test_inst equals: test_inst selfKeeper value.\n      self assert: self      equals: self selfKeeper value.\n    )\n    \n    testEscapedBlock = (\n      | escaping_block |\n\n      escape_count := 0.\n\n      escaping_block := self escapingBlock.\n      \n      self assert: 0 equals: escape_count.\n      self assert: 666 equals: escaping_block value.\n      self assert: 1 equals: escape_count.\n      \n      self assert: escaping_block is: escaped_block.\n    )\n\n    escapedBlock: block = (\n      escape_count := escape_count + 1.\n      escaped_block := block.\n\n      \"return some dummy value to the object that sent 'value' to block\"\n      ^666\n    )\n)\n", "SuperTestSuperClass.som": "\"\n\n$Id: SuperTestSuperClass.som 30 2009-07-31 12:20:25Z michael.haupt $\n\nCopyright (c) 2007-2013 see AUTHORS file\nSoftware Architecture Group, Hasso Plattner Institute, Potsdam, Germany\nhttp://www.hpi.uni-potsdam.de/swa/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nSuperTestSuperClass = TestCase (\n    | record |\n\n    yourself = (\n        record := record + 1.\n        ^ self\n    )\n\n    give42 = (\n        ^ 42\n    )\n\n    something = (\n        ^ #super\n    )\n\n    number = (\n        ^ 1\n    )\n\n    key: a key: b = (\n        ^ self\n    )\n\n    @ o = ( ^ self )\n)\n\n", "EmptyTest.som": "\"\n\n$Id: EmptyTest.som 30 2009-07-31 12:20:25Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nEmptyTest = TestCase (\n\n    \"This is just an empty TestCase.\n     It only tests the basic infrastructure\"\n    \n)\n", "StringTest.som": "\"\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nStringTest = TestCase (\n\n  testEquality = (\n    | str1 str2 |\n    str1 := 'foo'.\n    str2 := 'bar'.\n\n    self assert: str1 = str1.\n    self assert: str1 = 'foo'.\n    self assert: str1 = ('f' + 'oo').\n    self deny:   str1 = str2.\n    self assert: str2 = str2.\n  )\n\n  testLength = (\n    self assert: 1 equals: 't' length.\n    self assert: 6 equals: ('foo' + 'bar') length.\n  )\n\n  testCharAt = (\n    | str |\n    str := 'foobar'.\n    self assert: 'f' equals: (str charAt: 1).\n    self assert: 'o' equals: (str charAt: 2).\n    self assert: 'o' equals: (str charAt: 3).\n    self assert: 'b' equals: (str charAt: 4).\n    self assert: 'a' equals: (str charAt: 5).\n    self assert: 'r' equals: (str charAt: 6).\n  )\n\n  testStringLiteralLineBreak = (\n    | str |\n    \"Some parsers get the literals and line bounderies wrong\"\n    str := '\n'.\n    self assert: '\\n' equals: (str charAt: 1).\n    self assert: 1 equals: str length.\n  )\n\n  testPrimSubstringFrom = (\n    | str |\n    str := 'foobar'.\n    self assert: 'foo'    equals: (str primSubstringFrom: 1 to: 3).\n    self assert: 'bar'    equals: (str primSubstringFrom: 4 to: 6).\n    self assert: 'foobar' equals: (str primSubstringFrom: 1 to: 6).\n    self assert: 'oob' equals: ('foobar' substringFrom: 2 to: 4).\n  )\n\n  testBeginsWith = (\n    self deny:   ('foo' beginsWith: 'oo').\n    self assert: ('foo' beginsWith: 'foo').\n  )\n\n  testEndsWith = (\n    self assert: ('foo' endsWith: 'foo').\n    self assert: ('foo' endsWith: 'oo').\n    self deny: ('f' endsWith: 'bar').\n    self deny: ('f' endsWith: 'foo').\n  )\n\n  testMultiLineString = (\n    \"Test whether the parser will parse multi-line strings correctly.\"\n    self assert: '\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890' equals: '\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890'\n  )\n\n  testEscapeSequences = (\n    \"Tests for escape sequences, not all of them are reliable represented as\n     proper strings. So, we do a simple equality test, and check substring or\n     length.\n\n     \\t\t  a tab character\n     \\b\t  a backspace character\n     \\n\t  a newline character\n     \\r\t  a carriage return character\n     \\f\t  a formfeed character\n     \\'\t  a single quote character\n     \\\\\t  backslash character\n     \\0   zero byte character\n    \"\n\n    self assert: '\\t' equals: '\\t'.\n    self assert: 1 equals: '\\t' length.\n\n    self assert: '\\b' equals: '\\b'.\n    self assert: 1 equals: '\\b' length.\n\n    self assert: '\\n' equals: '\\n'.\n    self assert: 1 equals: '\\n' length.\n    self deny: ('\\n' endsWith: 'n').\n\n    self assert: '\\r' equals: '\\r'.\n    self assert: 1 equals: '\\n' length.\n    self deny: ('\\r' endsWith: 'r').\n\n    self assert: '\\f' equals: '\\f'.\n    self assert: 1 equals: '\\f' length.\n    self deny: ('\\f' endsWith: 'f').\n\n    self assert: '\\'' equals: '\\''.\n    self assert: 1 equals: '\\'' length.\n\n    self assert: '\\\\' equals: '\\\\'.\n    self assert: 1 equals: '\\\\' length.\n\n    self assert: '\\0' equals: '\\0'.\n    self assert: 1 equals: '\\0' length.\n    self assert: 5 equals: '\\0rest' length.\n  )\n\n  testHash = (\n    | str |\n    \"Hash should be identical for strings that are identical,\n     whether given literal or composed at runtime\"\n    self assert: 'foobar' hashcode equals: 'foobar' hashcode.\n    self assert: 'ssdf aksdf; kasd;fk a;dfk a;dfk a;d' hashcode\n         equals: 'ssdf aksdf; kasd;fk a;dfk a;dfk a;d' hashcode.\n\n    str := 'foo' + 'bar'.\n    str := str + str.\n    self assert: 'foobarfoobar' hashcode equals: str hashcode.\n\n    str := 'dfadf fgsfg sfg sdfg sfg sfg' + '345243n 24n5 kwertlw erltnwrtln'.\n    self assert: 'dfadf fgsfg sfg sdfg sfg sfg345243n 24n5 kwertlw erltnwrtln' hashcode\n         equals: str hashcode.\n  )\n\n  testWhiteSpace = (\n    self assert: ' ' isWhiteSpace.\n    self assert: '\\t' isWhiteSpace.\n    self assert: '\\t\\n   \\n \\n' isWhiteSpace.\n\n    self deny: '' isWhiteSpace.\n    self deny: '\\t\\n N  \\n \\n' isWhiteSpace.\n    self deny: 'N' isWhiteSpace.\n    self deny: '3' isWhiteSpace.\n  )\n\n  testLetters = (\n    self assert: 'a' isLetters.\n    self assert: 'all' isLetters.\n    self optional: #unicode assert: 'aOo\u00f6\u00e9\u00c9\u00ed\u00e4' isLetters description: 'Does not support Unicode'.\n\n    self deny: '' isLetters description: 6.\n    self deny: ' ' isLetters description: 5.\n    self deny: '3' isLetters description: 4.\n    self deny: '3333' isLetters description: 3.\n    self deny: 'aOo \u00f6\u00e9\u00c9\u00ed\u00e4' isLetters description: 2.\n    self deny: 'aOo1\u00f6\u00e9\u00c9\u00ed\u00e4' isLetters description: 1.\n  )\n\n  testDigits = (\n    self assert: '0' isDigits.\n    self assert: '0123' isDigits.\n    self assert: '0123456789' isDigits.\n\n    self deny: '' isDigits.\n    self deny: ' ' isDigits.\n    self deny: 'S' isDigits.\n    self deny: '333 3' isDigits.\n    self deny: '66i77' isDigits.\n    self deny: '66e7' isDigits.\n    self deny: 'aOo1\u00f6\u00e9\u00c9\u00ed\u00e4' isDigits.\n  )\n)\n", "ClassLoadingTest.som": "ClassLoadingTest = TestCase (\n  testEqualityOfClasses = (\n    | a b c |\n    b := ClassB new.\n    a := ClassA new.\n    c := ClassC new.\n    \n    self assert: 42 equals: b result.\n    self assert: 42 equals: c result.\n    \n    self assert: a class equals: b class superclass.\n    self assert: b class equals: c class superclass.\n  )\n)\n", "CompilerReturnTest.som": "\"\n\n$Id: CompilerReturnTest.som 30 2009-07-31 12:20:25Z michael.haupt $\n\nCopyright (c) 2009-2013 see AUTHORS file\nSoftware Architecture Group, Hasso Plattner Institute, Potsdam, Germany\nhttp://www.hpi.uni-potsdam.de/swa/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nCompilerReturnTest = TestCase (\n\n    return1 = ( ^self )\n    return2 = (       )\n    \n    return3: arg = ( ^self )\n    return4: arg = (       )\n    \n    testExplicitAndImplicitReturns = (\n      self assert: self is: self return1.\n      self assert: self is: self return2.\n      self assert: self is: (self return3: 23).\n      self assert: self is: (self return4: 23).\n    )\n    \n    \n    \"In SOM++, code after the #ifTrue: does not seem to be executed, if the\n     block expression ends with a dot.\"\n    testIfTrueWithDot = (\n      | arr |\n      arr := Array new: 3.\n      self usesIfTrueWithDot: arr.\n      self assertArrayCorrectness: arr.\n    )\n    \n    assertArrayCorrectness: arr = (\n      self assert: 1 equals: (arr at: 1). \"method was not executed\"\n      self assert: 2 equals: (arr at: 2). \"ifTrue was not executed\"\n      self assert: 3 equals: (arr at: 3). \"remainder was not executed\"      \n    )\n\n    testIfTrueWithoutDot = (\n      | arr |\n      arr := Array new: 3.\n      self usesIfTrueWithoutDot: arr.\n      self assertArrayCorrectness: arr.\n    )\n    \n    testIfFalseWithDot = (\n      | arr |\n      arr := Array new: 3.\n      self usesIfFalseWithDot: arr.\n      self assertArrayCorrectness: arr.\n    )\n    \n    testIfFalseWithoutDot = (\n      | arr |\n      arr := Array new: 3.\n      self usesIfFalseWithoutDot: arr.\n      self assertArrayCorrectness: arr.\n    )\n    \n    usesIfTrueWithDot: arr = (\n        arr at: 1 put: 1.\n        (3 >= 1) ifTrue: [arr at: 2 put: 2. \"WITH DOT\"].\n        arr at: 3 put: 3.\n    )\n    \n    usesIfTrueWithoutDot: arr = (\n        arr at: 1 put: 1.\n        (3 >= 1) ifTrue: [arr at: 2 put: 2 \"WITHOUT DOT\"].\n        arr at: 3 put: 3.\n    )\n    \n    usesIfFalseWithDot: arr = (\n        arr at: 1 put: 1.\n        (3 >= 1) ifTrue: [arr at: 2 put: 2. \"WITH DOT\"].\n        arr at: 3 put: 3.\n    )\n    \n    usesIfFalseWithoutDot: arr = (\n        arr at: 1 put: 1.\n        (3 >= 1) ifTrue: [arr at: 2 put: 2 \"WITHOUT DOT\"].\n        arr at: 3 put: 3.\n    )\n\n    testWriteArgument = (\n        self assert: 42 equals: (self dec: 43).\n    )\n  \n    dec: anInt = (\n        anInt := anInt - 1.\n        ^ anInt\n    )\n)\n", "ClassC.som": "ClassC = ClassB (\n  | e f |\n  a      = ( ^ a )\n  a: val = ( a := val )\n  \n  f      = ( ^ f )\n  f: val = ( f := val )\n  \n  ----\n  \n  | c7 c8 c9 |\n  \n  setAllAndInc: anInt = (\n      c1 := anInt.\n      c2 := c1 + 1.\n      c3 := c2 + 1.\n      c4 := c3 + 1.\n      c5 := c4 + 1.\n      c6 := c5 + 1.\n      c7 := c6 + 1.\n      c8 := c7 + 1.\n      c9 := c8 + 1.\n  )\n  \n  getAll = (\n      | arr |\n      arr := Array new: 9.\n      arr at: 1 put: c1.\n      arr at: 2 put: c2.\n      arr at: 3 put: c3.\n      arr at: 4 put: c4.\n      arr at: 5 put: c5.\n      arr at: 6 put: c6.\n      arr at: 7 put: c7.\n      arr at: 8 put: c8.\n      arr at: 9 put: c9.\n      ^ arr\n  )\n)\n", "ClassB.som": "ClassB = ClassA (\n  | c d |\n  ----\n  | c4 c5 c6 |\n)\n", "SelfBlockTest.som": "\"\n\n$Id: SelfBlockTest.som 30 2009-07-31 12:20:25Z michael.haupt $\n\nCopyright (c) 2007-2013 see AUTHORS file\nSoftware Architecture Group, Hasso Plattner Institute, Potsdam, Germany\nhttp://www.hpi.uni-potsdam.de/swa/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nSelfBlockTest = TestCase (\n\n  testEscapedBlock = (\n    self assert: 42 equals: self give42 value\n  )\n\n  give42 = (\n    ^[ self giveBlock value ]\n  )\n\n  giveBlock = (\n    ^self returnBlock value\n  )\n\n  returnBlock = (\n    ^[ self returnBlock2 value ]\n  )\n\n  returnBlock2 = (\n    ^[ 42 ]\n  )\n)\n", "HashTest.som": "\"\n\n$Id: HashTest.som 30 2009-07-31 12:20:25Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nHashTest = TestCase (\n\n  testHashtable = (\n    | ht string array t | \n    \n    ht := Hashtable new.\n    self assert: ht isEmpty description: 'new ht needs to be empty'.\n    \n    ht at: 'a' put: 'b'.\n    self assert: (ht containsValue: 'b') description: 'needs to contain \"b\"'.\n    self deny: ht isEmpty.\n    \n    self assert: 1 equals: ht size.\n    \n    ht at: 'c' put: 'd'.\n    self assert: 2 equals: ht size.\n    \n    ht at: 1 put: 2.\n    t := Hashtable new.\n    ht at: Hashtable put: t.\n    system fullGC.\n    \n    self assert: (ht containsValue: 'b') description: 'needs to contain \"b\"'.\n    self assert: (ht containsValue: 'd') description: 'needs to contain \"d\"'.\n    self assert: (ht containsValue: 2)   description: 'needs to contain \"2\"'.\n    self assert: (ht containsValue: t)   description: 'needs to contain t'.\n    self assert: (ht containsKey: Hashtable) description: 'needs to contain Hashtable'.\n    \n    ht clear.\n    self assert: ht isEmpty.\n    self assert: 0 equals: ht size.\n    \n    self assert: nil equals: (ht get: 'a').\n  )\n)\n\n", "ClassA.som": "ClassA = (\n   | a b |\n   result = (\n      ^42     \n   )\n   ----\n   | c1 c2 c3 |\n)\n", "SetTest.som": "SetTest = TestCase (\n  testBasics = (\n    | a b t |\n    a := Set new.\n    b := Set new.\n    \n    a add: #a.\n    b add: #b.\n    \n    self deny: a = b.\n    \n    t := Set new.\n    t add: #a.\n    \n    self deny: a == t. \"different objects\"\n    self assert: a equals: t. \"but with equal value\"\n  )\n)\n", "GlobalTest.som": "GlobalTest = TestCase (\n    | doesntKnow |\n    unknownGlobal: name = ( doesntKnow := name. ^ name )\n\n    testUnknownGlobalHandler = (\n      self assert: #foobar equals: foobar.     \"should return the unknown globals name\"\n      self assert: #foobar equals: doesntKnow. \"and should have set it in the field\"\n    )\n    \n    testKnownGlobals = (\n      self assert: True   equals: true  class.\n      self assert: False  equals: false class.\n      self assert: Nil    equals: nil   class.\n      self assert: System equals: system class.\n    )\n)\n", "ClosureTest.som": "\"\n\n$Id: ClosureTest.som 30 2009-07-31 12:20:25Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\n\"This test verifies that SOM blocks are indeed closures. The test was found on\nEliot Miranda's Cog Blog.\"\n\nClosureTest = TestCase (\n  testClosureProperty = (\n    | factorial result facs |\n    \n    facs := Array new: 10.\n    facs at: 1 put: 1.\n    facs at: 2 put: 2.\n    facs at: 3 put: 6.\n    facs at: 4 put: 24.\n    facs at: 5 put: 120.\n    facs at: 6 put: 720.\n    facs at: 7 put: 5040.\n    facs at: 8 put: 40320.\n    facs at: 9 put: 362880.\n    facs at: 10 put: 3628800.\n\n    factorial := [ :n |\n        n = 1\n            ifTrue: [ 1 ]\n            ifFalse: [ (factorial value: n - 1) * n ] ].\n\n    result := (1 to: 10) collect: factorial.\n    result doIndexes: [ :i |\n      self assert: (facs at: i) equals: (result at: i) ]\n  )\n) \n", "DoesNotUnderstandMessage.som": "DoesNotUnderstandMessage = (\n    | target selector arguments |\n\n    initializeWith: targetObj selector: aSelector arguments: argArray = (\n        target    := targetObj.\n        selector  := aSelector.\n        arguments := argArray.\n    )\n\n    target    = ( ^ target )\n    selector  = ( ^ selector )\n    arguments = ( ^ arguments )\n\n    ----\n\n    to: target selector: selector arguments: args = (\n        | m |\n        m := self new.\n        m initializeWith: target selector: selector arguments: args.\n        ^ m\n    )\n)", "SpecialSelectorsTest.som": "SpecialSelectorsTest = TestCase (\n  testMinusMinsPrefix = (\n    self assert: self --> 1 equals: 1.\n    self assert: self -- 1 equals: 1.\n  )\n  \n  --> aValue = (\n    ^1\n  )\n  \n  -- aValue = (\n  \t^1\n  )\n)\n", "PreliminaryTest.som": "\"\n\n$Id: PreliminaryTest.som 30 2009-07-31 12:20:25Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\n\"... something just a bit complicated that tests iteration with\nblocks, so that we might fail here rather than when the other tests\nstart, in case things are broken.\"\n\nPreliminaryTest = TestCase (\n\n    testBasicSanity = (\n        | sum |\n        sum := 0.\n        1, 2, 3 do: [ :i |\n            sum := sum + i.\n            i<2 ifTrue: [ sum := sum*2 ].\n            i>2 ifFalse: [ sum := sum*2 ] ].\n        self assert: 15 equals: sum\n    )\n    \n)\n", "TestRunner.som": "TestRunner = (\n  | suite passes unsupported failures numAsserts |\n\n  initializeOn: aSuite = (\n    suite := aSuite.\n\n    passes       := Vector new.\n    unsupported  := Vector new.\n    failures     := Vector new.\n\n    numAsserts := 0.\n  )\n\n  hasUnsupported  = ( ^ unsupported size > 0 )\n  hasFailures     = ( ^ failures size > 0 )\n\n  actualUnsupported = ( ^ unsupported size )\n  expectedPasses = ( ^ suite tests size )\n  actualPasses   = ( ^ passes size )\n\n  run = (\n    self reportPreRun.\n    self runAllTests.\n    self reportPostRun.\n    self overviewReport.\n  )\n\n  countAssert = (\n    numAsserts := numAsserts + 1.\n  )\n\n  numAsserts = (\n    ^ numAsserts\n  )\n\n  reportPreRun = (\n    ('TestSuite ' + suite name + ':') println.\n    ('Tests: ' + suite tests size asString) println.\n  )\n\n  reportPostRun = (\n    self hasUnsupported ifTrue: [\n      ('Unsupported optional: ' + unsupported size asString) println\n    ].\n    self hasFailures ifTrue: [\n      ('Failures: ' + failures size asString) println\n    ].\n  )\n\n  runAllTests = (\n    suite tests do: [ :each |\n        each run: self ].\n  )\n\n  overviewReport = (\n    ('Tests passed: ' + passes size asString) println.\n\n    (self hasFailures or: [self hasUnsupported]) ifTrue: [\n        '------------------------------' println ].\n\n    self hasUnsupported ifTrue: [\n      | lastCategory |\n      ('Unsupported optional features: ' + unsupported size asString) println.\n      unsupported do: [:each |\n        | cat |\n        cat := each at: 1.\n        cat == lastCategory ifFalse: [\n          lastCategory := cat.\n          ('\\t' + cat) println ].\n        ('\\t\\t' + (each at: 2) asString) println.\n        ('\\t\\t\\t' + (each at: 3) value asString) println ].\n    ].\n\n    self hasFailures ifTrue: [\n      ('Failures: ' + failures size asString) println.\n      failures do: [:each |\n        ('    ' + each key asString) println.\n        ('        ' + each value asString) println ].\n    ].\n  )\n\n  fail: aSignature because: aReason = (\n    | pair |\n    pair := Pair withKey: aSignature andValue: aReason.\n    failures append: pair.\n  )\n\n  unsupported: aSymbol test: aSignature because: aReason = (\n    | array |\n    array := Array with: aSymbol with: aSignature with: aReason.\n    unsupported append: array.\n  )\n\n  passed: aSignature = (\n    passes append: aSignature\n  )\n)\n", "VectorTest.som": "\"\n\n$Id: ArrayTest.som 30 2009-07-31 12:20:25Z michael.haupt $\n\nCopyright (c) 2007-2013 see AUTHORS file\nSoftware Architecture Group, Hasso Plattner Institute, Potsdam, Germany\nhttp://www.hpi.uni-potsdam.de/swa/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nVectorTest = TestCase (\n  | a |\n  \n  setUp = (\n    a := Vector new.\n    a append: 'hello'.\n    a append: #world.\n    a append: 23.\n  )\n  \n  testSize = (\n    self assert: 3 equals: a size.\n  )\n  \n  testAt = (\n    self assert: #world equals: (a at: 2).\n    self assert:     23 equals: (a at: 3).\n  )\n  \n  testContains = (\n    self assert: (a contains: 23).\n  )\n  \n  testDo = (\n    | j |\n    j := 1.\n    a do: [:i |\n      self assert: i equals: (a at: j).\n      j := j + 1.\n    ].\n  )\n)\n", "TestCase.som": "TestCase = (\n    | testSelector runner failed |\n\n    selector       = ( ^ testSelector )\n    selector: aSym = ( testSelector := aSym )\n\n    \"asserting\"\n    assert: aBoolean = (\n        runner countAssert.\n        aBoolean ifFalse: [\n            self signalFailure: 'Assertion failed' ] )\n\n    assert: aBoolean description: aStringOrBlock = (\n        runner countAssert.\n        aBoolean ifFalse: [\n            self signalFailure: aStringOrBlock value ] )\n\n    assert: expected equals: actual = (\n        \"test value equality\"\n        self assert: (expected = actual)\n             description: [self comparingStringBetween: expected and: actual]\n    )\n\n    assert: expected is: actual = (\n        \"test reference equality\"\n        self assert: (expected == actual)\n             description: [self comparingStringBetween: expected and: actual]\n    )\n\n    optional: aSymbol assert: aBoolean = (\n        runner countAssert.\n        aBoolean ifFalse: [\n            self signalUnsupported: aSymbol description: nil ] )\n\n    optional: aSymbol assert: expected equals: actual = (\n        self optional: aSymbol\n             assert: (expected = actual)\n             description: [self comparingStringBetween: expected and: actual]\n    )\n\n    optional: aSymbol assert: expected is: actual = (\n        self optional: aSymbol\n             assert: (expected == actual)\n             description: [self comparingStringBetween: expected and: actual]\n    )\n\n    optional: aSymbol assert: aBoolean description: aStringOrBlock = (\n        runner countAssert.\n        aBoolean ifFalse: [\n            self signalUnsupported: aSymbol description: aStringOrBlock value ] )\n\n    deny: aBoolean = (\n        self assert: aBoolean not\n    )\n\n    deny: aBooleanOrBlock description: aString = (\n        self assert: aBooleanOrBlock value not description: aString\n    )\n\n    optional: aSymbol deny: aBoolean = (\n        self optional: aSymbol assert: aBoolean not\n    )\n\n    optional: aSymbol deny: aBooleanOrBlock description: aString = (\n        self optional: aSymbol assert: aBooleanOrBlock value not description: aString\n    )\n\n    signalFailure: aString = (\n        failed := true.\n        runner fail: self class name + '>>#' + testSelector\n            because: aString.\n    )\n\n    signalUnsupported: aSymbol description: aDescription = (\n        runner unsupported: aSymbol\n                      test: self class name + '>>#' + testSelector\n                   because: aDescription.\n    )\n\n    comparingStringBetween: expected and: actual = (\n        ^ 'Expected ' + expected asString +\n          ' but was ' + actual asString + '.'\n    )\n\n    \"running\"\n    run: aRunner = (\n        runner := aRunner.\n        failed := false.\n\n        self setUp.\n        self performTest.\n        self tearDown.\n\n        failed ifFalse: [\n            runner passed: self class name + '>>#' + testSelector\n        ].\n    )\n\n    setUp    = ()\n    tearDown = ()\n\n    performTest = ( self perform: testSelector )\n\n    ----\n\n    for: aSelector = (\n        | case |\n        case := self new.\n        case selector: aSelector.\n        ^ case\n    )\n\n    tests = (\n        | tests |\n        tests := Vector new: self methods length.\n        self methods do: [:m |\n            (m signature beginsWith: #test) ifTrue: [\n                tests append: (self for: m signature).\n            ].\n        ].\n\n        ^ tests\n    )\n)\n", "DoesNotUnderstandTest.som": "DoesNotUnderstandTest = TestCase (\n\n  testSimpleUnknownFoo = (\n    | result |\n    result := self foo.\n    self assert: DoesNotUnderstandMessage is: result class.\n    self assert: self is: result target.\n    self assert: #foo is: result selector.\n  )\n  \n  testArguments = (\n    | result |\n    result := self foo.\n    self assert: Array is: result arguments class.\n    self assert: 0 equals: result arguments length.\n\n    result := self foo: 1.\n    self assert: 1 equals: result arguments length.\n    self assert: 1 equals: (result arguments at: 1).\n    \n    result := self foo: 1 bar: 2 baz: 3.\n    self assert: 3 equals: result arguments length.\n    self assert: 1 equals: (result arguments at: 1).\n    self assert: 2 equals: (result arguments at: 2).\n    self assert: 3 equals: (result arguments at: 3).\n  )\n  \n  testRepeat = (\n    | result |\n    result := Array new: 5.\n    1 to: result length do: [:i |\n      result at: i put: self foo.\n      \n      i > 1 ifTrue: [\n        self assert: (result at: i - 1) ~= (result at: i).\n      ]\n    ].\n  )\n  \n  doesNotUnderstand: selector arguments: arguments = (\n      ^ DoesNotUnderstandMessage to: self selector: selector arguments: arguments.\n  )\n)\n", "CoercionTest.som": "\"\n\n$Id: CoercionTest.som 30 2009-07-31 12:20:25Z michael.haupt $\n\nCopyright (c) 2007-2013 see AUTHORS file\nSoftware Architecture Group, Hasso Plattner Institute, Potsdam, Germany\nhttp://www.hpi.uni-potsdam.de/swa/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nCoercionTest = TestCase (\n\n  testBasicNumberCoercion = (\n    self assert: 5 equals: 25 sqrt.\n    self assert: 1 equals: (2 // 4) * 2.\n    self assert: 1 equals: 2 * (2 // 4).\n  )\n)\n", "ArrayTest.som": "\"\n\n$Id: ArrayTest.som 30 2009-07-31 12:20:25Z michael.haupt $\n\nCopyright (c) 2007-2013 see AUTHORS file\nSoftware Architecture Group, Hasso Plattner Institute, Potsdam, Germany\nhttp://www.hpi.uni-potsdam.de/swa/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nArrayTest = TestCase (\n  | a |\n  \n  setUp = (\n    a := Array new: 3.\n    a at: 1 put: 'hello'.\n    a at: 2 put: #world.\n    a at: 3 put: 23.\n  )\n  \n  testLength = (\n    self assert: 3 equals: a length\n  )\n  \n  testAt = (\n    self assert: #world equals: (a at: 2).\n    self assert: 23 equals:     (a at: 3).\n  )\n  \n  testContains = (\n    self assert: (a contains: 23).\n    self deny:   (a contains: #notInThere).\n  )\n  \n  testDo = (\n    | j |\n    j := 1.\n    \n    a do: [:i |\n      self assert: (a at: j) is: i.\n      j := j + 1.\n    ]\n  )\n  \n  testSumAndAverage = (\n    | arr |\n    arr := Array new: 3.\n    1 to: 3 do: [ :i | arr at: i put: i ].\n    \n    self assert: 6 equals: arr sum.\n    self assert: 2 equals: arr average.\n  )\n  \n  testCopyFrom = (\n    | arr b |\n    arr := Array new: 5.\n    1 to: 5 do: [ :i | arr at: i put: i ].\n\n    b := arr copyFrom: 2 to: 4.\n    self assert: 2 equals: (b at: 1).\n    self assert: 3 equals: (b at: 2).\n    self assert: 4 equals: (b at: 3).\n    \n    b := arr copyFrom: 3.\n    self assert: 3 equals: (b at: 1).\n    self assert: 4 equals: (b at: 2).\n    self assert: 5 equals: (b at: 3).\n  )\n  \n  testIndexOf = (\n    | arr |\n    arr := Array new: 6.\n    arr at: 1 put: #one.\n    arr at: 2 put: #two.\n    arr at: 3 put: #three.\n    arr at: 4 put: #four.\n    arr at: 5 put: #five.\n    arr at: 6 put: #one. \n    \n    self assert: 2 equals: (arr indexOf: #two).\n    self assert: 4 equals: (arr indexOf: #four).\n    self assert: 5 equals: (arr indexOf: #five).\n    \n    self assert: nil equals: (arr indexOf: #notIncluded).\n    \n    self assert: 1 equals: (arr indexOf: #one).\n  )\n  \n  testLastIndexOf = (\n    | arr |\n    arr := Array new: 6.\n    arr at: 1 put: #one.\n    arr at: 2 put: #two.\n    arr at: 3 put: #three.\n    arr at: 4 put: #four.\n    arr at: 5 put: #five.\n    arr at: 6 put: #one. \n    \n    self assert: 2 equals: (arr lastIndexOf: #two).\n    self assert: 4 equals: (arr lastIndexOf: #four).\n    self assert: 5 equals: (arr lastIndexOf: #five).\n    \n    self assert: nil equals: (arr indexOf: #notIncluded).\n    \n    self assert: 6 equals: (arr lastIndexOf: #one).\n  )\n  \n  testNewWithAll = (\n    | arr |\n    arr := Array new: 5 withAll: [1].\n    1 to: 5 do: [:i | self assert: 1 equals: (arr at: i)].\n    \n    arr := Array new: 5 withAll: 1.\n    1 to: 5 do: [:i | self assert: 1 equals: (arr at: i)].\n  )\n  \n  testPutAllIntAndObjects = (\n    | arr o |\n    arr := Array new: 5 withAll: 5.\n    self assert: 5 equals: (arr at: 3).\n    arr at: 3 put: nil.\n    self assert: nil equals: (arr at: 3).\n    \n    o := Object new.\n    arr at: 2 put: o.\n    self assert: o equals: (arr at: 2).\n  )\n  \n  testLiteralArrays = (\n  \tself assert: (#(1 2) at: 1) equals: 1.\n  \tself assert: (#(1 2) at: 2) equals: 2.\n    \n  \tself assert: (#(-1 -200.0) at: 1) equals: -1.\n  \tself assert: (#(-1 -200.0) at: 2) equals: -200.0.\n  )\n)\n\n", "SystemTest.som": "SystemTest = TestCase (\n\n  testFullGCSupport = (\n    \"Test whether #fullGC is support. We expect the VM now to return true,\n     to indicate the a GC was done.\"\n    self optional: #fullGCWithEffect assert: system fullGC description: '#fullGC is not supported or has not immediate effect.'\n  )\n\n  testTicks = (\n    | ticks |\n    ticks := system ticks.\n    self assert: ticks class equals: Integer.\n    self assert: ticks > 0 description: 'Should return the microseconds since the start'\n  )\n)\n", "DoubleTest.som": "\"\n\n$Id: DoubleTest.som 48 2009-08-12 12:57:20Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nDoubleTest = TestCase (\n\n  testIntegerDivision = (\n    self assert: 1 equals: (4/3) + (4/5)\n  )\n  \n  testDoubleDivision = (\n    self assert: 32 // 15 equals: (4//3) + (4//5)\n  )\n  \n  testAsString = (\n    self assert: '0.5' equals: (1//2) asString.\n    self assert: '0.5' equals: 0.5 asString.\n  )\n  \n  testEquals = (\n    self assert: (1.0 = 1).\n  )\n  \n  testRound = (\n    self assert:   1 equals:     (5//10) round.\n    self assert:   1 equals:    (14//10) round.\n    self assert: 445 equals: (44534//100) round.\n  )\n\n  testAsInteger = (\n    self assert: 1 equals: 1.0 asInteger.\n    self assert: 1 equals: 1.1 asInteger.\n    self assert: 1 equals: 1.999 asInteger.\n    \n    self assert: -1 equals: -1.0 asInteger.\n    self assert: -1 equals: -1.999 asInteger.\n  )\n\n  testSin = (\n    | pi |\n    pi := 3.141592653589.\n    self assert: 0.0 equals: 0.0 sin.\n    self assert: pi sin abs < 0.00000000001.\n    self assert: (pi // 2.0) sin > 0.9999999999.\n  )\n\n  testCos = (\n    | pi |\n    pi := 3.141592653589.\n    self assert: 1.0 equals: 0.0 cos.\n    self assert: (pi // 2.0) cos abs < 0.00000000001.\n    self assert: pi cos < -0.9999999999.\n  )\n\n  testInfinity = (\n    self assert: Double PositiveInfinity > 1.\n    self assert: Double PositiveInfinity equals: Double PositiveInfinity + 1.\n    self assert: Double PositiveInfinity equals: Double PositiveInfinity - 1.\n  )\n)\n", "BasicInterpreterTests": {"Self.som": "\"\nCopyright (c) 2001-2018 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nSelf = (\n    \n    ----\n    \n    testAssignSuper = (\n      super := 42.\n      ^ super\n    )\n\n    testAssignSelf = (\n      self := 42.\n      ^ self\n    )\n)\n", "Return.som": "\"\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nReturn = (\n    \n    ----\n    \n    testReturnSelf = ( ^ self )\n\n    testReturnSelfImplicitly = ( )\n  \n    testNoReturnReturnsSelf = ( 1 )\n    \n    testBlockReturnsImplicitlyLastValue = ( ^ ([4] value) )\n)\n", "NonLocalVars.som": "\"\nCopyright (c) 2016 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nNonLocalVars = (\n     ----\n     \n     testWriteDifferentTypes = (\n        | value |\n        1 to: 10 do: [:index |\n            value := 0.\n            self collection do: [:index | value := value + index].\n            value := value // 4.\n        ].\n        ^value.\n    )\n    \n    collection = (^#(7 8))\n)\n", "Blocks.som": "\"\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nBlocks = (\n    \n    ----\n    \n    testArg1 = ( ^ [:a | a - 1] value: 43 )\n\n    testArg2 = ( ^ [:a :b | a * b ] value: 11 with: 7 )\n  \n    testArgAndLocal = (\n      ^ ([:a |\n        | blockLocal | \n        blockLocal := 3.\n        a + blockLocal] value: 5)\n    )\n    \n    testArgAndContext = ( | methodLocal |\n      ^ ([:a |\n        methodLocal := 3.\n        a + methodLocal] value: 5)\n    )\n    \n    testEmptyZeroArg = (\n      [] value == nil ifTrue: [ ^ 1 ].\n      ^ 2\n    )\n    \n    testEmptyOneArg = (\n      ([:x | ] value: 4) == nil ifTrue: [ ^ 1 ].\n      ^ 2\n    )\n    \n    testEmptyTwoArg = (\n      ([:x :y | ] value: 4 with: 5) == nil ifTrue: [ ^ 1 ].\n      ^ 2\n    )\n)\n", "BinaryOperation.som": "\"\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nBinaryOperation = (\n\n    ----\n\n    test = (\n        ^ (self foo: 1) + (self foo2: 2)\n    )\n\n    foo: aNumber = (\n        ^ 3\n    )\n\n    foo2: aNumber = (\n        ^ 8\n    )\n\n\n)\n", "Regressions.som": "\"\nCopyright (c) 2019 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nRegressions = (\n    \n    ----\n    \n    testSymbolEquality = (\n      'foo:' asSymbol = #foo: ifTrue: [ ^ 1 ].\n      ^ 2\n    )\n    \n    testSymbolReferenceEquality = (\n      'foo:' asSymbol == #foo: ifTrue: [ ^ 1 ].\n      ^ 2\n    )\n    \n    testUninitializedLocal = (\n      | local |\n      local == nil ifTrue: [ ^ 1 ].\n      ^ 2\n    )\n    \n    testUninitializedLocalInBlock = (\n      [ | local |\n        local == nil ifTrue: [ ^ 1 ] ] value.\n      ^ 2\n    )\n)\n", "Hash.som": "\"\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nHash = (\n    \n    ----\n    \n    testHash = (\n        | ht string array t | \n    \n        ht := Hashtable new.\n        ht isEmpty\n            ifFalse: [ 'New Hashtable not empty!'. ^ #notEmpty ].\n    \n        ht at: 'a' put: 'b'.\n        (ht containsValue: 'b')\n            ifFalse: [ '1 not in Hashtable'. ^ 1 ].\n        ht isEmpty\n            ifTrue: [ 'Nonempty Hashtable empty!'. ^ #notEmpty ].\n        ((ht size) = 1)\n            ifFalse: [ 'Hashtable has wrong size!'. ^ #wrongSize ].\n    \n        ht at: 'c' put: 'd'.\n        ((ht size) = 2)\n            ifFalse: [ 'Hashtable has wrong size!'. ^ #wrongSize ].\n    \n        ht at: 1 put: 2.\n        t := Hashtable new.\n        ht at: Hashtable put: t.\n        (ht containsValue: 'b')\n            ifFalse: [ '1 not in Hashtable'. ^ 1 ].\n        (ht containsValue: 'd')\n            ifFalse: [ '2 not in Hashtable'. ^ 2 ].\n\n        (ht containsValue: 2)\n            ifFalse: [ '3 not in Hashtable'. ^ 3 ].\n        (ht containsValue: t)\n            ifFalse: [ '4 not in Hashtable'. ^ 4 ].\n        (ht containsKey: Hashtable)\n            ifFalse: [ 'key not found'. ^ #keyNotFound ].\n    \n        ht clear.\n        ht isEmpty ifFalse: [ 'cleared hashtable is not empty!'. ^ #notEmpty ].\n        ht size = 0 ifFalse: ['cleared hashtable has elements!'. ^ #hasElementsAfterCleaning ].\n    \n        string := (ht get: 'a').\n        (string = 'b') ifTrue: [ 'get from Hashtable'. ^ 5 ].\n        \n        ^ 444\n    )\n)\n", "NumberOfTests.som": "\"\nCopyright (c) 2019 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nNumberOfTests = (\n    \n    ----\n    \n    \"Return the known number of tests,\n     should be used in basic interpreter test harness to confirm completeness\"\n    numberOfTests = ( ^ 57 )\n)\n", "BlockInlining.som": "\"\nCopyright (c) 2015 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nBlockInlining = (\n    ----\n    \n    testNoInlining = (\n      | a block |\n      a := 1.\n      block := [ a ].\n      ^ block value\n    )\n    \n    testOneLevelInlining = (\n      | a |\n      a := 1.\n      ^ true ifTrue: [ a ] ifFalse: [ 42 ]\n    )\n    \n    oneLevelInliningWithLocalShadow: bool = (\n      | a |\n      a := 1.\n      ^ bool\n          ifTrue: [ | a |\n            a := 2.\n            a \n          ] ifFalse: [ a \"that's outer a\" ]\n    )\n    \n    testOneLevelInliningWithLocalShadowTrue = (\n      ^ self oneLevelInliningWithLocalShadow: true\n    )\n    \n    testOneLevelInliningWithLocalShadowFalse = (\n      ^ self oneLevelInliningWithLocalShadow: false\n    )\n    \n    deepNestedInlinedIf: bool = (\n      | block  a block2 |\n      a := 1.\n      block := [ \"not inlined\"\n        a := a + 1.\n        block2 := [ \"not inlined\"\n          bool ifTrue: [ ^ a := a + 1.]\n               ifFalse:[ |a| a := 42. a ]\n        ].\n        block2 value\n      ].\n      ^ block value\n    )\n    \n    testDeepNestedInlinedIfTrue  = ( ^ self deepNestedInlinedIf: true  )\n    testDeepNestedInlinedIfFalse = ( ^ self deepNestedInlinedIf: false )\n    \n    blockNestedInIf: bool = (\n      | a |\n      a := 1.\n      bool ifTrue: [\n        | block |\n        block := [ a := a + 1 ].\n        block value\n      ] ifFalse: [\n        a := 42.\n      ].\n      ^ a\n    )\n    \n    testBlockNestedInIfTrue  = ( ^ self blockNestedInIf: true  )\n    testBlockNestedInIfFalse = ( ^ self blockNestedInIf: false )\n    \n    deepNestedBlocksInInlinedIf: bool = (\n      | block a block2 block3 |\n      a := 1.\n      block := [ \"not inlined\"\n        a := a + 1.\n        block2 := [ \"not inlined\"\n          bool ifTrue: [ a := a + 1. \"inlined\"\n            block3 := [ |block4|\n              a := a + 1.\n              block4 := [ \"not inlined\"\n                a := a + 1.\n                a\n              ].\n              block4 value\n            ].\n            block3 value\n          ] ifFalse:[ |a block4| \"inlined\"\n            a := 42.\n            block4 := [ ^ a := a + 1 ]. \"not inlined\"\n            block4 value\n          ]\n        ].\n        block2 value\n      ].\n      ^ block value\n    )\n    \n    testDeepNestedBlocksInInlinedIfTrue  = ( ^ self deepNestedBlocksInInlinedIf: true  )\n    testDeepNestedBlocksInInlinedIfFalse = ( ^ self deepNestedBlocksInInlinedIf: false )\n    \n    deepDeepNested: bool = (\n      | block a block2 block3 |\n      a := 1.\n      block := [ \"not inlined\"\n        a := a + 1.\n        block2 := [ \"not inlined\"\n          bool ifTrue: [ a := a + 1. \"inlined\"\n            block3 := [ |block4|\n              a := a + 1.\n              block4 := [ \"not inlined\"\n                a := a + 1.\n                \n                \n                  block := [ \"not inlined\"\n                    a := a + 1.\n                    block2 := [ \"not inlined\"\n                      bool ifTrue: [ a := a + 1. \"inlined\"\n                        block3 := [ |block4|\n                          a := a + 1.\n                          block4 := [ \"not inlined\"\n                            a := a + 1.\n                            a\n                          ].\n                          block4 value\n                        ].\n                        block3 value\n                      ] ifFalse:[ |a block4| a := 42. \"inlined\"\n                        block4 := [^ a := a + 1]. \"not inlined\"\n                        block4 value\n                      ]\n                    ].\n                    block2 value\n                  ].\n                  block value\n                \n                \n              ].\n              block4 value\n            ].\n            block3 value\n          ] ifFalse:[ |a block4| a := 42. \"inlined\"\n            block4 := [^ a := a + 1]. \"not inlined\"\n            block4 value\n          ]\n        ].\n        block2 value\n      ].\n      ^ block value\n    )\n    \n    testDeepDeepNestedTrue  = ( ^ self deepDeepNested: true )\n    testDeepDeepNestedFalse = ( ^ self deepDeepNested: false )\n    \n    testToDoNestDoNestIfTrue = (\n      \"from the bounce benchmark\"\n      | balls bounces |\n      balls := Array new: 1 withAll: true.\n      bounces := 0.\n      \n      1 to: 2 do: [ :i |\n          balls do: [ :ball |\n              ball ifTrue: [ bounces := bounces + 1 ] ] ].\n\n      ^ bounces\n    )\n)\n", "MethodCall.som": "\"\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nMethodCall = (\n    ----\n    \n    test = (\n        ^ self test2\n    )\n    \n    test2 = ( ^ 42 )\n)\n", "ObjectCreation.som": "\"\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nObjectCreation = (\n    \n    ----\n    \n    test = (\n        | i |\n        i := 0.\n        \n        [i < 1000000] whileTrue: [\n            self new.\n            i := i + 1.\n        ].\n        ^ i\n    )\n)\n", "Arrays.som": "Arrays = (\n  ----\n  \n  testEmptyToInts = (\n    | arr |\n    arr := Array new: 5.\n    (arr at: 1) ifNotNil: [self error: 'should be initialized to nil'].\n    \n    1 to: 5 do: [:i |\n      arr at: i put: i.\n      (arr at: i) = i ifFalse: [self error: 'should be i'].\n    ].\n    \n    (arr at: 1) = 1 ifFalse: [self error: 'should be 1'].\n    (arr at: 5) = 5 ifFalse: [self error: 'should be 1'].\n    ^ arr at: 3\n  )\n  \n  testPutAllInt = (\n    | arr |\n    arr := Array new: 5.\n    arr putAll: 5.\n    ^ arr at: 3\n  )\n\n  testPutAllNil = (\n    | arr |\n    arr := Array new: 5.\n    (arr at: 4) ifNotNil: [self error: 'should be initialized to nil'].\n    \n    arr putAll: 5.\n    (arr at: 4) = 5 ifFalse: [self error: 'should be set to 5'].\n    \n    arr putAll: nil.\n    \n    ^ (arr at: 3) class\n  )\n  \n  testPutAllBlock = (\n    | arr b cnt |\n    cnt := 0.\n    b := [cnt := cnt + 1. cnt].\n    arr := Array new: 5.\n    arr putAll: b.\n    \n    1 to: 5 do: [:i|\n      (arr at: i) = i ifFalse: [self error: 'block not properly evaluated?']\n    ].\n    \n    ^ arr at: 3\n  )\n  \n  testNewWithAll = (\n    | arr |\n    arr := Array new: 5 withAll: [1].\n    1 to: 5 do: [:i | (arr at: i) = 1 ifFalse: [self error: 'wrong result']].\n    ^ arr at: 3\n  )\n  \n)", "IfTrueIfFalse.som": "\"\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nIfTrueIfFalse = (\n    \n    ----\n    \n    test = (\n        ^ self resolve: 42.\n    )\n    \n    test2 = (\n        self resolve: 42.\n        self resolve: 42.\n        ^ self resolve: 33\n    )\n    \n    test3 = (\n        | i a |\n        i := 4.\n        [ i > 0 ] whileTrue: [\n            a := self resolve: 4.\n            i := i - 1.\n        ].\n        ^ 4\n    )\n    \n    resolve: a = (\n        (a == nil) ifFalse: [ ^ a ].\n    )\n    \n    value: aBlock = (\n        ^ aBlock value\n    )\n)\n", "NonLocalReturn.som": "\"\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nNonLocalReturn = (\n    \n    ----\n    \n    test1 = ( | t1Frame |\n      [ | nlrFrame |\n        ^ 42 ] value\n    )\n    test2 = ( ^ self test1 + 1 )\n    test3 = ( [ self test1. ^ 3 ] value )\n    \n    test4 = ( ^ self at: 11 )\n    test5 = ( ^ self at: 10000 )\n    \n    \"Test case borrowed from Vector\"\n    at: index = ( self checkIndex: index ifValid: [ ^ 42 ].\n      \"else\" ^ 22 )\n    checkIndex: index ifValid: block = (\n        (10 <= index) && (index <= 100)\n            ifTrue:  [ ^ block value ]\n            ifFalse: [ #dontcare ]\n    )\n)\n", "CompilerSimplification.som": "\"\nCopyright (c) 2014 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nCompilerSimplification = (\n    ----\n    | aField |\n    \n    testReturnConstantSymbol = ( ^ #constant )\n    testReturnConstantInt    = ( ^ 42 )\n    \n    testReturnSelf           = (^ self)\n    testReturnSelfImplicitly = ()\n    \n    testReturnArgument: n      = ( ^ n )\n    testReturnArgument: n a: a = ( ^ a )\n    \n    testReturnArgumentN = ( ^ self testReturnArgument: 55 )\n    testReturnArgumentA = ( ^ self testReturnArgument: 55 a: 44 )\n    \n    \n    setField: val = ( aField := val )\n    testSetField  = (\n        aField := #bar.\n        self setField: #foo.\n        ^ aField\n    )\n    \n    getField = (^ aField)\n    testGetField = (\n        aField := 40.\n        ^ self getField\n    )\n)\n"}}, "Smalltalk": {"Double.som": "\"\n\n$Id: Double.som 27 2009-07-31 11:17:53Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nDouble = (\n\n    \"Arithmetic\"\n    + argument  = primitive\n    - argument  = primitive\n    * argument  = primitive\n    // argument  = primitive\n    % argument  = primitive\n    abs         = ( ^(self < 0.0) ifTrue: (0.0 - self) ifFalse: self )\n    sqrt        = primitive\n    negated     = ( ^0.0 - self )\n    round       = primitive\n    asInteger   = primitive\n    cos         = primitive\n    sin         = primitive\n    \n    \"Comparing\"\n    =  argument = primitive\n    <  argument = primitive\n    >  argument = ( ^(self >= argument) and: [ self <> argument ] )\n    >= argument = ( ^(self < argument) not )\n    <= argument = ( ^(self < argument) or: [ self = argument ] )\n    negative    = ( ^self < 0.0 )\n    between: a and: b = ( ^(self > a) and: [ self < b ] )\n    \n    \"Converting\"\n    asString    = primitive\n    \n    \"Iterating\"\n    to: limit do: block = (\n        | i |\n        i := self.\n        [ i <= limit ] whileTrue: [ block value: i. i := i + 1.0 ]\n    )\n    \n    downTo: limit do: block = (\n        | i | \n        i := self.\n        [ i >= limit ] whileTrue: [ block value: i. i := i - 1.0 ]\n    )\n\n    ----\n    \n    PositiveInfinity = primitive\n)\n", "Dictionary.som": "\"\n\n$Id: Dictionary.som 29 2009-07-31 11:28:44Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nDictionary = (\n\n    | pairs |\n    \n    at: aKey put: aValue = (\n        (self containsKey: aKey)\n            ifTrue:  [ (self pairAt: aKey) value: aValue ]\n            ifFalse: [ pairs add: (Pair withKey: aKey andValue: aValue) ]\n    )\n    \n    at: aKey = (\n        pairs do: [ :p | p key = aKey ifTrue: [ ^p value ] ].\n        ^nil\n    )\n    \n    containsKey: aKey = (\n        pairs do: [ :p | p key = aKey ifTrue: [ ^true ] ].\n        ^false\n    )\n    \n    keys   = ( ^pairs collect: [ :p | p key ] )\n    values = ( ^pairs collect: [ :p | p value ] )\n    \n    \"Iteration\"\n    do: block = ( pairs do: block )\n    \n    \"Private\"\n    pairs: aSet = ( pairs := aSet )\n    pairAt: aKey = (\n        pairs do: [ :p | p key = aKey ifTrue: [ ^p ] ].\n        ^nil\n    )\n    \n    \"Printing\"\n    print = ( '{' print. pairs do: [ :p | p print ]. '}' print )\n    println = ( self print. '' println )\n    \n    ----\n    \n    new = (\n        | newDictionary |\n        newDictionary := super new.\n        newDictionary pairs: Set new.\n        ^newDictionary\n    )\n    \n)\n", "Integer.som": "\"\n\n$Id: Integer.som 29 2009-07-31 11:28:44Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nInteger = (\n\n    \"Arithmetic\"\n    + argument  = primitive\n    - argument  = primitive\n    * argument  = primitive\n    / argument  = primitive\n    // argument = primitive\n    % argument  = primitive \"modulo with sign of divisor\"\n    rem: argument=primitive \"modulo with sign of dividend\"\n    & argument  = primitive\n    << argument = primitive\n    >>> argument= primitive\n    bitXor: argument = primitive\n    abs         = ( ^(self < 0) ifTrue: (0 - self) ifFalse: self )\n    sqrt        = primitive\n    negated     = ( ^0 - self )\n    \n    \"Random numbers\"\n    atRandom = primitive\n    \n    \"Comparing\"\n    =  argument = primitive\n    ~= argument = (^ (self = argument) not )\n    <  argument = primitive\n    >  argument = ( ^(self >= argument) and: [ self <> argument ] )\n    >= argument = ( ^(self < argument) not )\n    <= argument = ( ^(self < argument) or: [ self = argument ] )\n    negative    = ( ^self < 0 )\n    between: a and: b = ( ^(self > a) and: [ self < b ] )\n    \n    \"Converting\"\n    asString    = primitive\n    as32BitSignedValue   = primitive \" returns an int, with the value that a signed 32-bit integer would have\"\n    as32BitUnsignedValue = primitive \" returns an int, with the value that a unsigned 32-bit integer would have\"\n    hashcode    = ( ^self )\n    \n    \"Iterating\"\n    to: limit do: block = (\n        self to: limit by: 1 do: block\n    )\n    \n    to: limit by: step do: block = (\n        | i |\n        i := self.\n        [ i <= limit ] whileTrue: [ block value: i. i := i + step ]\n    )\n    \n    downTo: limit do: block = (\n        self downTo: limit by: 1 do: block\n    )\n    \n    downTo: limit by: step do: block = (\n        | i |\n        i := self.\n        [ i >= limit ] whileTrue: [ block value: i. i := i - step ]\n    )\n    \n    \"More Iterations\"\n    timesRepeat: block = (\n        1 to: self do: [ :i | block value ]\n    )\n    \n    \"Range Creation\"\n    to: upper = (\n        | range |\n        range := Array new: upper - self + 1.\n        self to: upper do: [ :i | range at: i put: i ].\n        ^range\n    )\n\n    max: otherInt = (\n        (self < otherInt) ifTrue: [^otherInt] ifFalse: [^self].\n    )\n\n    min: otherInt = (\n        (self < otherInt) ifTrue: [^self] ifFalse: [^otherInt].\n    )\n\n    ----\n    \n    fromString: aString = primitive\n    \n)\n", "Block1.som": "\"\n\n$Id: Block1.som 27 2009-07-31 11:17:53Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nBlock1 = Block (\n\n    \"For the creation of Block instances, see Universe_new_block().\"\n\n    \"Evaluating\"\n    value = primitive\n    \n)\n", "Pair.som": "\"\n\n$Id: Pair.som 27 2009-07-31 11:17:53Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nPair = (\n\n    | key value |\n    \n    key = ( ^key )\n    value = ( ^value )\n    \n    \"Private\"\n    key: aKey = ( key := aKey )\n    value: aValue = ( value := aValue )\n    \n    \"Printing\"\n    print = ( '[' print. key print. '=>' print. value print. ']' print )\n    println = ( self print. '' println )\n    \n    ----\n    \n    withKey: aKey andValue: aValue = (\n        | newPair |\n        newPair := super new.\n        newPair key: aKey.\n        newPair value: aValue.\n        ^newPair\n    )\n    \n)\n", "Class.som": "\"\n\n$Id: Class.som 27 2009-07-31 11:17:53Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nClass = (\n\n    \"Accessing\"\n    name     = primitive\n    \n    \"Converting\"\n    asString = ( ^self name asString )\n    \n    \"Allocation\"\n    new = primitive\n    \n    \"Meta Information\"\n    superclass = primitive\n    fields     = primitive\n    methods    = primitive\n    selectors  = ( ^self methods collect: [:inv | inv signature ] )\n    \n    hasMethod: aSymbol = (\n        self methods do: [ :m |\n            m signature = aSymbol ifTrue: [ ^true ] ].\n        ^false\n    )\n    \n)\n", "Primitive.som": "\"\n\n$Id: Primitive.som 27 2009-07-31 11:17:53Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nPrimitive = (\n\n    signature = primitive\n    holder    = primitive\n\n    invokeOn: obj with: args = primitive\n\n)\n", "True.som": "\"\n\n$Id: True.som 27 2009-07-31 11:17:53Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nTrue = Boolean (\n\n    \"Converting\"\n    asString       = ( ^'true' )\n    \n    \"Conditional evaluation\"\n    ifTrue:  block = ( ^block value )\n    ifFalse: block = ( ^nil )\n    \n    \"Logical operations\"\n    not        = ( ^false )\n    or: block  = ( ^true )\n    and: block = ( ^block value )\n    \n)\n", "Block2.som": "\"\n\n$Id: Block2.som 27 2009-07-31 11:17:53Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nBlock2 = Block (\n\n    \"For the creation of Block instances, see Universe_new_block().\"\n\n    \"Evaluating\"\n    value           = ( self value: nil )\n    value: argument = primitive\n    \n)\n", "Block3.som": "\"\n\n$Id: Block3.som 27 2009-07-31 11:17:53Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nBlock3 = Block (\n\n    \"For the creation of Block instances, see Universe_new_block().\"\n\n    \"Evaluating\"\n    value                  = ( self value: nil with: nil )\n    value: arg             = ( self value: arg with: nil )\n    value: arg1 with: arg2 = primitive\n    \n)\n", "Boolean.som": "\"\n\n$Id: Boolean.som 27 2009-07-31 11:17:53Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nBoolean = (\n\n    \"Conditional evaluation\"\n    ifTrue: trueBlock ifFalse: falseBlock = (\n        self ifTrue:  [ ^trueBlock value  ].\n        self ifFalse: [ ^falseBlock value ].\n    )\n    \n    \"Logical operations\"\n    || boolean = ( ^self or: boolean  )\n    && boolean = ( ^self and: boolean )\n    \n)\n\n", "HashEntry.som": "\"\n\n$Id: HashEntry.som 27 2009-07-31 11:17:53Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\n\"\nThis class is not meant for direct use - it's an internal datastructure\nfor Hashtable\n\"\n\nHashEntry = (\n\n    | key value next hash |\n    \n    key       = ( ^key )\n    value     = ( ^value )\n    next      = ( ^next )\n    hash      = ( ^hash )\n    \n    key: k    = ( key := k )\n    value: v  = ( value := v )\n    next: n   = ( next := n )\n    hash: h   = ( hash := h )\n    \n    setKey: key value: value = ( \n        key = self key\n            ifTrue: [ self value: value. ^false. ]\n            ifFalse: [ \n            next isNil \n                ifTrue: [ \n                    self next: (HashEntry newKey: key value: value next: nil).\n                    ^true. ]\n                ifFalse: [ \n                    ^(self next setKey: key value: value) ] ].\n    )\n    \n    getValue: key = (\n        key = self key ifTrue: [ ^value ].\n        next isNil ifTrue: [ ^nil ].\n        ^next getValue: key.\n    )\n    \n    containsKey: key = (\n        key = self key ifTrue: [ ^true ].\n        next isNil ifTrue: [ ^false ].\n        ^next containsKey: key.\n    )\n    \n    containsValue: value = (\n        value = self value ifTrue: [ ^true ].\n        next isNil ifTrue: [ ^false ].\n        ^next containsValue: value.\n    )\n    \n    keys = (\n        next isNil\n            ifTrue: [ ^Vector new append: key ]\n            ifFalse: [ ^(next keys), key ]\n    )\n    \n    values = ( \n        next isNil\n            ifTrue: [ ^Vector new append: value ]\n            ifFalse: [ ^(next values), value ]\n    )\n    \n    ----\n    \n    newKey: k value: v next: n = (\n        | newEntry |\n        newEntry := super new.\n        newEntry key: k.\n        newEntry value: v.\n        newEntry next: n.\n        newEntry hash: (k hashcode).\n        ^newEntry\n    )\n    \n)\n", "System.som": "\"\n\n$Id: System.som 29 2009-07-31 11:28:44Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nSystem = (\n\n    \"Accessing\"\n    global: name            = primitive\n    global: name put: value = primitive\n    hasGlobal: name         = primitive\n    \n    \"Initializing\"\n    initialize: arguments = (\n        | application |\n        \n        \"Make sure we have got at least one argument\"\n        (arguments length < 1) ifTrue: [ 'No class specified' println. ^nil ].\n        \n        \"Load the class with the specified name, create an instance of it, and\n         run it. If there is more than only the class given on the command line,\n         and the class has a method #run:, the arguments array is passed to it,\n         otherwise, #run is sent.\"\n        application := (self resolve: (arguments at: 1) asSymbol) new.\n        \n        (application respondsTo: #run:)\n            ifTrue:  [ application run: arguments ]\n            ifFalse: [ application run ]\n    )\n    \n    \"Loading and resolving\"\n    load:    symbol = primitive\n    resolve: symbol = (\n        | class current_class |\n        \n        \"Check if we've already got the global\"\n        (self global: symbol) == nil ifFalse: [ ^self global: symbol ].\n        \n        \"Try loading the class\"\n        class := self load: symbol.\n        (class == nil) ifFalse: [\n            \"Put class and its super-classes into global dictionary. We can stop\n             as soon as we find a super-class in the globals dictionary because\n             in this case, all its super-classes must have been added to the\n             dictionary earlier\"\n             current_class := class.\n             [ (self global: (current_class name)) == nil ] whileTrue: [\n                self global: (current_class name) put: current_class.\n                current_class := current_class superclass. ].\n            ^class ].\n        self error: 'Unable to resolve ' + symbol\n    )\n    \n    \"Exiting\"\n    exit: error  = primitive  \n    exit         = ( self exit: 0 )\n    \n    \"Printing\"\n    printString: string = primitive\n    printNewline        = primitive\n    \n    \"Time\"\n    time  = primitive\n    ticks = primitive      \"returns the microseconds since start\"\n    \n    \"Force Garbage Collection\"\n    fullGC = primitive\n    \n    ----------------------------------\n    \n    \"Allocation\"\n    new = ( self error: 'The system object is singular' )\n    \n)\n", "Method.som": "\"\n\n$Id: Method.som 30 2009-07-31 12:20:25Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nMethod = (\n\n    \"Meta Information\"\n    signature = primitive\n    holder    = primitive\n    \n    \"Printing\"\n    asString = ( ^self holder asString + '>>' + self signature asString )\n\n    invokeOn: obj with: args = primitive\n    \n)\n", "Hashtable.som": "\"\n\n$Id: Hashtable.som 29 2009-07-31 11:28:44Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nHashtable = (\n\n    | table count |\n    \n    \"Testing\"\n    containsKey: key = ( | idx e |\n        idx := self indexForKey: key.\n        e := table at: idx.\n        e isNil ifFalse: [ e keys do: [ :k | k = key ifTrue: [ ^true ] ] ].\n        ^false.\n    )\n    \n    containsValue: val = ( \n        table do: [ :ent | \n            ent isNil ifFalse: [ \n                ent values do: [ :v | v = val ifTrue: [ ^true ] ] ] ].\n        ^false.\n    )\n    \n    isEmpty = ( ^count = 0 )\n    size = ( ^count )\n    \n    \"Accessing\"\n    get: key = ( | idx e |\n        idx := self indexForKey: key.\n        e := table at: idx.\n        e isNil ifTrue: [ ^nil ].\n        ^e getValue: key.\n    )\n    \n    at: key put: value = ( | idx |\n        idx := self indexForKey: key.\n        (table at: idx) isNil\n            ifTrue: [\n                table at: idx put:\n                    (HashEntry newKey: key value: value next: nil).\n                count := count + 1 ]\n            ifFalse: [\n                ((table at: idx) setKey: key value: value)\n                    ifTrue: [ count := count + 1 ] ].\n        \"TODO: enlarge table, rehash if too large\"\n    )\n    \n    \"TODO: some way to delete keys'd be nice...\"\n    \n    \"Enumerate\"\n    keys = ( | vec |\n        vec := Vector new.\n        table do: [ :ent | \n            ent isNil ifFalse: [ ent keys do: [ :k | vec append: k ] ] ].\n        ^vec.\n    )\n    \n    values = ( | vec |\n        vec := Vector new.\n        table do: [ :ent | \n            ent isNil ifFalse: [ ent values do: [ :v | vec append: v ] ] ].\n        ^vec.\n    )\n    \n    \"Clearing\"\n    clear = ( table := Array new: 11. \n              count := 0 )\n    \n    \"Private\"\n    indexForKey: aKey = ( ^(aKey hashcode % table length) abs + 1 )\n    \n    ----------------\n    \n    \"Allocation\"\n    new = ( | ht |\n        ht := super new.\n        ht clear.\n        ^ht.\n    )\n    \n)\n", "Nil.som": "\"\n\n$Id: Nil.som 27 2009-07-31 11:17:53Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nNil = (\n\n    \"Converting\"\n    asString = ( ^'nil' )\n    \n    \"Comparing\"\n    isNil    = ( ^true )\n    notNil   = ( ^false )\n\n    \"Convenience\"\n    ifNil: aBlock = (^aBlock value)\n    ifNotNil: aBlock = (^self)\n    ifNil: goBlock ifNotNil: noGoBlock = (^goBlock value)\n\n)\n", "Array.som": "\"\n\n$Id: Array.som 29 2009-07-31 11:28:44Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nArray = (\n\n    \"Accessing\"\n    at: index            = primitive\n    at: index put: value = primitive\n    length               = primitive\n    putAll: block        = ( self doIndexes: [ :i |\n                                self at: i put: block value ] )\n    first = ( ^ self at: 1 )\n    last  = ( ^ self at: self length )\n    \n    \n    \"Iterating\"\n    do: block            = ( self doIndexes: [ :i |\n                                block value: (self at: i) ] )\n    doIndexes: block     = ( 1 to: self length do: [:i |\n                                block value: i. ] )\n    \n    from: start to: end do: block = (\n        start to: end do: [:i | block value: (self at: i) ] )\n    \n    \"Copying (inclusively)\"\n    copyFrom: start to: end = (\n        | result i |\n\n        result := Array new: end - start + 1.\n        i := 1.\n        self from: start to: end do: [ :e |\n          result at: i put: e.\n          i := i + 1 ].\n\n        ^result\n    )\n    \n    copyFrom: start = ( ^self copyFrom: start to: self length )\n    \n    replaceFrom: start to: stop with: replacement startingAt: repStart = (\n        \"This destructively replaces elements from start to stop in the\n        receiver starting at index, repStart, in the sequenceable collection,\n        replacementCollection. Answer the receiver. No range checks are \n        performed.\"\n        | index repOff |\n        repOff := repStart - start.\n        index := start - 1.\n        [(index := index + 1) <= stop]\n            whileTrue: [self at: index put: (replacement at: repOff + index)]\n    )\n\n    copy = (^self copyFrom: 1)\n    \n    \"Numerical\"\n    sum     = ( ^self inject: 0 into: [ :sub :elem | sub + elem ] )\n    average = ( ^self sum / self length )\n                                \n    \"Containment check\"\n    contains: element = ( self do: [ :e | e = element ifTrue: [ ^true ] ].\n                          ^false )\n    indexOf: element = (\n      self doIndexes: [ :i | (self at: i) = element ifTrue: [ ^ i ]].\n      ^ nil\n    )\n  \n    lastIndexOf: element = (\n      self length downTo: 1 do: [: i | (self at: i) = element ifTrue: [ ^ i ]].\n      ^ nil\n    )\n    \n    \"Collection\"\n    collect: aBlock = (\n        | result |\n        result := Array new: self length.\n        self doIndexes: [ :i | result at: i put: (aBlock value: (self at: i)) ].\n        ^result\n    )\n\n    inject: sub into: aBlock = ( | next |\n        next := sub.\n        self do: [ :e | next := aBlock value: next with: e ].\n        ^next\n    )\n    \n    reject: aBlock = (\n        ^ self select: [:element | (aBlock value: element) == false ]\n    )\n    \n    select: aBlock = (\n        \"TODO: fix the hard reference to Vector...\"\n        | newCollection |\n        newCollection := Vector new: self length.\n        self do: [:each | (aBlock value: each)  \n                            ifTrue: [newCollection append: each]].\n        ^ newCollection\n    )\n    \n    union: aCollection = (\n        | new |\n        new := Set new.\n        new addAll: self.\n        new addAll: aCollection.\n        ^ new\n    )\n    \n    ----------------------------\n    \n    \"Allocation\"\n    new                        = ( ^self new: 0 )\n    new: length                = primitive\n    new: length withAll: block = ( ^((self new: length) putAll: block) )\n\n    \"Convenience\"\n    with: a = (\n        | arr |\n        arr := self new: 1.\n        arr at: 1 put: a.\n        ^ arr\n    )\n    \n    with: a with: b            = (\n        | arr |\n        arr := self new: 2.\n        arr at: 1 put: a.\n        arr at: 2 put: b.\n        ^ arr\n    )\n\n    with: a with: b with: c    = (\n        | arr |\n        arr := self new: 3.\n        arr at: 1 put: a.\n        arr at: 2 put: b.\n        arr at: 3 put: c.\n        ^ arr\n    )\n)\n", "Vector.som": "\"\n\n$Id: Vector.som 29 2009-07-31 11:28:44Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\n\"FIXME: Implement pushFront and popFront...\"\n\nVector = (\n\n    | first last storage |\n    \n    \"Accessing\"\n    at: index = ( ^ self checkIndex: index ifValid: [ storage at: index ] )\n    \n    at: index put: value = (\n        ^ self checkIndex: index ifValid: [ storage at: index put: value ]\n    )\n    \n    first = ( ^ (self size > 0) ifTrue: [storage at: 1] ifFalse: [nil] )\n    \n    \"Iterating\"\n    do: block = (\n        first to: last - 1 do: [ :i | block value: (storage at: i) ]\n    )\n    \n    doIndexes: block = (\n        first to: last - 1 do: block\n    )\n    \n    \"Adding\"\n    , element = ( ^self append: element )\n    \n    append: element = (\n        (last >= storage length) ifTrue: [\n            \"Need to expand capacity first\"\n            | newStorage |\n            newStorage := Array new: (2 * storage length).\n            storage doIndexes: [ :i | newStorage at: i put: (storage at: i) ].\n            storage := newStorage. ].\n        \n        storage at: last put: element.\n        last := last + 1.\n        ^self\n    )\n    \n    \"Removing\"\n    remove = (\n        (last > first)\n            ifTrue:  [ last := last - 1. ^storage at: last ]\n            ifFalse: [\n                self error:\n                    'Vector: Attempting to pop element from empty Vector' ]\n    )\n    \n    remove: object = (\n        | newArray newLast found |\n        newArray := Array new: self capacity.\n        newLast := 1.\n        found := false.\n       \n        self do: [ :it |\n          (it == object)\n              ifTrue:  [ found := true ]\n              ifFalse: [\n                  newArray at: newLast put: it.\n                  newLast := newLast + 1.\n              ]\n        ].\n       \n        storage := newArray.\n        last := newLast.\n        first := 1.\n        ^found\n    )\n   \n    contains: anObject = (\n        ^ storage contains: anObject\n    )\n  \n    \"Printing\"\n    println = (\n        '(' print.\n        self do: [ :it | '(' print. it print. ')' print ].\n        ')' println\n    )\n    \n    \"Sizing\"\n    isEmpty  = ( ^last = first   )\n    size     = ( ^last - first   )\n    capacity = ( ^storage length )\n    \n    \"Conversion\"\n    asArray = ( | arr |\n        arr := Array new: self size.\n        self doIndexes: [ :i | arr at: i put: (self at: i) ].\n        ^arr\n    )\n    \n    \"Private\"\n    initialize: size = (\n        storage := Array new: size.\n        first := 1.\n        last  := 1.\n    )\n    \n    checkIndex: index ifValid: block = (\n        ^ ((first <= index) && (index <= last)\n            ifTrue: [ block value ]\n            ifFalse: [\n                self error:\n                    'Vector[' + first asString + '..' + last asString +\n                    ']: Index ' + index asString + ' out of bounds' ])\n    )\n    \n    \"DeltaBlue\"\n    removeFirst = (\n        self isEmpty ifTrue: [ self error: 'OrderedCollection is empty' ].\n        first := first + 1.\n        ^ storage at: first - 1\n    )\n    \n    \"Conversion\"\n    asSet = (\n        ^ Set new addAll: self\n    )\n    \n    ----------------------------\n    \n    \"Allocation\"\n    new              = ( ^ self new: 50 )\n    new: initialSize = ( ^ super new initialize: initialSize )\n    \n    with: elem = (\n        | newVector |\n        newVector := self new: 1.\n        newVector append: elem.\n        ^ newVector\n    )\n    \n)\n", "String.som": "\"\n\n$Id: String.som 29 2009-07-31 11:28:44Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nString = (\n    \"Strings are immutable\"\n\n    \"Concatenate: returns a new string object\"\n    concatenate: argument = primitive\n    + argument            = ( ^self concatenate: argument asString )\n\n    \"Converting\"\n    asString = ( ^self )\n    asSymbol = primitive\n    hashcode = primitive\n\n    \"Info\"\n    length = primitive\n\n    \"Returns true if all characters in the string are whitespace.\n     False otherwise, including for the empty string.\"\n    isWhiteSpace = primitive\n\n    \"Returns true if all characters in the string are letters.\n     False otherwise, including for the empty string.\"\n    isLetters = primitive\n\n    \"Returns true if all characters in the string are digits.\n     False otherwise, including for the empty string.\"\n    isDigits = primitive\n\n    \"Comparing\"\n    = argument = primitive\n\n    \"substring: from 'start' to (and including) 'end'.\"\n    primSubstringFrom: start to: end = primitive\n\n    substringFrom: start to: end = (\n        ((end <= self length) && (start > 0) && (start <= end))\n            ifTrue: [^self primSubstringFrom: start to: end]\n            ifFalse: [\n                self error: 'Attempting to index string out of its bounds (start: ' + start asString + ' end: ' + end asString + ' length: ' + self length asString + ')' ]\n    )\n\n    beginsWith: prefix = (\n        self length < prefix length ifTrue: [ ^ false ].\n\n        1 to: prefix length do: [:i |\n            ((self charAt: i) = (prefix charAt: i)) ifFalse: [ ^ false ].\n        ].\n\n        ^ true\n    )\n\n    endsWith: suffix = (\n      | l sufL |\n      l := self length.\n      sufL := suffix length.\n      l < sufL ifTrue: [ ^ false ].\n\n      1 to: sufL do: [:i |\n          (self charAt: l - sufL + i) = (suffix charAt: i) ifFalse: [ ^ false ]\n      ].\n      ^ true\n    )\n\n    asInteger = (\n        ^ Integer fromString: self\n    )\n\n    charAt: argument = (\n        ^self substringFrom: argument to: argument\n    )\n\n    \"Printing\"\n    print    = ( system printString: self )\n\n)\n", "Set.som": "\"\n\n$Id: Set.som 29 2009-07-31 11:28:44Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nSet = (\n\n    | items |\n    \n    = otherSet = (\n        self size = otherSet size ifFalse: [^ false ].\n        \n        self do: [:item | (otherSet contains: item) ifFalse: [^ false]. ].\n        \n        ^ true.\n    )\n    \n    add: anObject = (\n        (self contains: anObject)\n            ifFalse: [ items append: anObject ]\n    )\n    \n    addAll: aCollection = (\n        aCollection do: [:each |\n            self add: each]\n    )\n    \n    union: aCollection = (\n        | new |\n        new := Set new.\n        new addAll: self.\n        new addAll: aCollection.\n        ^ new\n    )\n    \n    intersection: aCollection = (\n        | new |\n        new := Set new.\n        self do: [:it | \n            (aCollection contains: it) ifTrue: [ new add: it ]].\n        ^ new\n    )\n    \n    - aCollection = ( \"set difference\"\n        | new |\n        new := Set new.\n        self do: [:it |\n            (aCollection contains: it) ifFalse: [ new add: it ]].\n        ^ new\n    )\n    \n    contains: anObject = (\n        items do: [ :it | it == anObject ifTrue: [ ^true ] ].\n        ^false\n    )\n    \n    remove: anObject = (\n        | newItems |\n        newItems := Vector new.\n        [ items isEmpty ]\n            whileFalse: [ | it |\n                it := items remove.\n                it = anObject ifFalse: [ newItems append: it ] ].\n        items := newItems\n    )\n    \n    \"Sets do not have the notion of ordering, but\n     for convenience we provide those accessors\"\n    first = (\n        ^items at: 1\n    )\n    \n    isEmpty = (\n               ^items isEmpty\n    )\n    \n    \"Iteration\"\n    do: block = ( items do: block )\n    \n    \"Collection\"\n    collect: block = ( | coll |\n        coll := Vector new.\n        self do: [ :e | coll append: (block value: e) ].\n        ^coll\n    )\n    \n    \"Printing\"\n    println = (\n        '(' print.\n        self do: [ :it | '(' print. it print. ')' print ].\n        ')' println\n    )\n    \n    asString = (\n        | result |\n        result := 'a Set('.\n        items do: [:e | result := result + e asString + ', '].\n        result := result + ')'.\n        ^ result\n    )\n    \n    size = (\n        ^ items size\n    )\n    \n    \"Private\"\n    items: it = ( items := it )\n    \n    ----\n    \n    new = (\n        | newSet |\n        newSet := super new.\n        newSet items: Vector new.\n        ^newSet\n    )\n    \n)\n", "Object.som": "\"\n\n$Id: Object.som 27 2009-07-31 11:17:53Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nObject = nil (\n    class      = primitive\n    objectSize = primitive  \"size in bytes\"\n    \n    \"Comparing\"\n\n    \" If you override =, you MUST override hashcode as well.  The rule\n      obj1 = obj2   =>  obj1 hashcode = obj2 hashcode\n      must be valid for all objects, or Hashtable will not work\"\n    =  other    = ( ^self == other )\n    <> argument = ( ^(self = argument) not )\n    == other    = primitive\n    ~= other    = (^ (self == other) not )\n    isNil       = ( ^false )\n    notNil      = ( ^true )\n    \n    \"Converting\"\n    asString  = ( ^'instance of ' + (self class) )\n    , element = ( ^(Vector new append: self) append: element )\n    hashcode  = primitive\n    \n    \"Evaluating\"\n    value     = ( ^self )\n    \n    \"Convenience\"\n    ifNil: aBlock = (^self)\n    ifNotNil: aBlock = (^aBlock value)\n    ifNil: noGoBlock ifNotNil: goBlock = (^goBlock value)\n    \n    \"Printing\"\n    print     = ( self asString print )\n    println   = ( self print. system printNewline )\n\n    \"Debugging\"\n    inspect   = primitive\n    halt      = primitive\n    \n    \"Error handling\"\n    error: string = ( '' println. ('ERROR: ' + string) println. system exit: 1 )\n    \n    \"Abstract method support\"\n    subclassResponsibility = (\n        self error: 'This method is abstract and should be overridden'\n    )\n    \n    \"Error recovering\"\n    doesNotUnderstand: selector arguments: arguments = (\n        self error:\n            ('Method ' + selector + ' not found in class ' + self class name)\n    )\n    \n    escapedBlock: block = (\n        self error: 'Block has escaped and cannot be executed'\n    )\n    \n    unknownGlobal: name = ( ^system resolve: name )\n    \n    \"Reflection\"\n    respondsTo: aSymbol = (\n        (self class hasMethod: aSymbol)\n            ifTrue:  [ ^true ]\n            ifFalse: [ | cls |\n                cls := self class superclass.\n                [ cls isNil ] whileFalse: [\n                    (cls hasMethod: aSymbol)\n                        ifTrue:  [ ^true ]\n                        ifFalse: [ cls := cls superclass ] ].\n                ^ false ]\n    )\n    \n    perform: aSymbol = primitive\n    perform: aSymbol withArguments: args = primitive\n    \n    perform: aSymbol inSuperclass: cls = primitive\n    perform: aSymbol withArguments: args inSuperclass: cls = primitive\n    \n    instVarAt: idx          = primitive\n    instVarAt: idx put: obj = primitive\n    instVarNamed: sym       = primitive\n\n)\n", "Block.som": "\"\n\n$Id: Block.som 27 2009-07-31 11:17:53Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nBlock = (\n\n    \"For the creation of Block instances, see Universe_new_block().\"\n    \n    \"Evaluation\"\n    value = primitive\n    \n    \"Looping\" \n    whileFalse: block = ( \n        [ self value not ] whileTrue: block \n    )\n    \n    whileTrue: block = (\n        self value ifFalse: [ ^nil ].\n        block value.\n        self restart\n    )\n    \n    \"Restarting\"\n    restart = primitive\n    \n)\n", "Metaclass.som": "\"\n\n$Id: Metaclass.som 27 2009-07-31 11:17:53Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nMetaclass = Class ( )\n", "False.som": "\"\n\n$Id: False.som 27 2009-07-31 11:17:53Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nFalse = Boolean (\n\n    \"Converting\"\n    asString       = ( ^'false' )\n    \n    \"Conditional evaluation\"\n    ifTrue:  block = ( ^nil )\n    ifFalse: block = ( ^block value )\n    \n    \"Logical operations\"\n    not        = ( ^true )\n    or: block  = ( ^block value )\n    and: block = ( ^false )\n    \n)\n", "Symbol.som": "\"\n\n$Id: Symbol.som 27 2009-07-31 11:17:53Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nSymbol = String (\n\n    \"Converting\"\n    asString = primitive\n    asSymbol = ( ^self )\n    \n    \"Printing\"\n    print    = ( '#' print. super print )\n    \n)\n"}, "Examples": {"Echo.som": "\"\n\n$Id: Echo.som 226 2008-04-21 12:45:01Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nEcho = (\n\n    run: args = (\n        args from: 2 to: args length do: [ :arg | arg print. ' ' print ].\n        '' println.\n    )\n\n)\n", "Hello.som": "\"\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nHello = (\n\n    \"The 'run' method is called when initializing the system\"\n    run = ('Hello, World from SOM' println )\n    \n)\n", "Benchmarks": {"QuickSort.som": "\"\n\n$Id: QuickSort.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nQuickSort = Sort (\n\n    sort: array = (\n        self sort: array low: 1 high: self dataSize.\n        ^ array\n    )\n    \n    sort: array low: low high: high = (\n        | pivot i j |\n        \n        pivot := array at: (low + high) / 2.\n        i := low.\n        j := high.\n        [ i <= j ]\n            whileTrue: [\n                [ (array at: i) < pivot ] whileTrue: [ i := i + 1 ].\n                [ pivot < (array at: j) ] whileTrue: [ j := j - 1 ].\n                ( i <= j )\n                    ifTrue: [\n                        | tmp |\n                        tmp := array at: i.\n                        array at: i put: (array at: j).\n                        array at: j put: tmp.\n                        i := i + 1.\n                        j := j - 1. ] ].\n        \n        (low < j)  ifTrue: [ self sort: array low: low high: j  ].\n        (i < high) ifTrue: [ self sort: array low: i high: high ]\n    )\n    \n    dataSize = ( ^800 )\n    \n)\n", "Ball.som": "\"\n\n$Id: Ball.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nBall = (\n\n    | x y xVel yVel |\n    \n    bounce = (\n        | xLimit yLimit bounced |\n        xLimit  := yLimit := 500.\n        bounced := false.\n        \n        x := x + xVel.\n        y := y + yVel.\n        (x > xLimit)\n            ifTrue: [ x := xLimit. xVel := 0 - xVel abs. bounced := true ].\n        (x < 0)\n            ifTrue: [ x := 0.      xVel := xVel abs.     bounced := true ].\n        (y > yLimit)\n            ifTrue: [ y := yLimit. yVel := 0 - yVel abs. bounced := true ].\n        (y < 0)\n            ifTrue: [ y := 0.      yVel := yVel abs.     bounced := true ].\n        ^bounced\n    )\n    \n    initialize = (\n        x := Random next % 500.\n        y := Random next % 500.\n        xVel := (Random next % 300) - 150.\n        yVel := (Random next % 300) - 150.\n    )\n    \n    -----------------\n    \n    new = ( ^super new initialize )\n    \n)\n", "ListElement.som": "\"\n\n$Id: ListElement.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nListElement = (\n\n    | val next |\n    \n    length = ( next isNil ifTrue: [ ^1 ] ifFalse: [ ^(1 + next length) ] )\n    \n    val    = ( ^val )\n    val: n = ( val := n )\n    \n    next          = ( ^next )\n    next: element = ( next := element )\n    \n    ------------------\n    \n    new: n = ( ^super new val: n )\n    \n)\n\n", "JenkinsRandom.som": "JenkinsRandom = (\n  ----\n  | seed |\n  \n  seed: val = ( seed := val )\n  \n  \"Robert Jenkins' 32 bit integer hash function.\"\n  random = (\n    seed := ((seed       + 2127912214 \"0x7ed55d16\")       + (seed as32BitUnsignedValue  << 12) as32BitSignedValue) as32BitSignedValue.\n    seed := ((seed bitXor: 3345072700 \"0xc761c23c\") bitXor: (seed as32BitUnsignedValue >>> 19)) as32BitSignedValue.\n    seed := ((seed       +  374761393 \"0x165667B1\")       + (seed as32BitUnsignedValue  <<  5) as32BitSignedValue) as32BitSignedValue.\n    seed := ((seed       + 3550635116 \"0xd3a2646c\") bitXor: (seed as32BitUnsignedValue  <<  9) as32BitSignedValue) as32BitSignedValue.\n    seed := ((seed       + 4251993797 \"0xfd7046c5\")       + (seed as32BitUnsignedValue  <<  3) as32BitSignedValue) as32BitSignedValue.\n    seed := ((seed bitXor: 3042594569 \"0xb55a4f09\") bitXor: (seed as32BitUnsignedValue >>> 16)) as32BitSignedValue.\n    ^ seed\n  )\n)\n", "Queens.som": "\"\n\n$Id: Queens.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nQueens = Benchmark (\n\n    | freeMaxs freeRows freeMins queenRows |\n    \n    benchmark = (\n        | result |\n        result := true.\n        1 to: 10 do: [ :i | result := result and: self queens ].\n        ^ result\n    )\n    \n    verifyResult: result = (\n      ^ result\n    )\n    \n    queens = (\n        freeRows  := Array new:  8 withAll: true.\n        freeMaxs  := Array new: 16 withAll: true.\n        freeMins  := Array new: 16 withAll: true.\n        queenRows := Array new:  8 withAll: -1.\n        ^ self placeQueen: 1\n    )\n    \n    placeQueen: c = (\n        1 to: 8 do: [ :r | \n            (self row: r column: c)\n                ifTrue: [\n                    queenRows at: r put: c.\n                    self row: r column: c put: false.\n                    (c = 8) ifTrue: [ ^true ].\n                    (self placeQueen: c + 1) ifTrue: [ ^true ].\n                    self row: r column: c put: true ] ].\n        ^false\n    )\n    \n    row: r column: c = (\n        ^(freeRows at: r) && (freeMaxs at: c + r) && (freeMins at: c - r + 8)\n    )\n    \n    row: r column: c put: v = (\n        freeRows at: r         put: v.\n        freeMaxs at: c + r     put: v.\n        freeMins at: c - r + 8 put: v.\n    )\n    \n)\n\n", "List.som": "\"\n\n$Id: List.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nList = Benchmark (\n\n    benchmark = ( | result |\n        result := self\n            taklWithX: (self makeList: 15)\n            withY: (self makeList: 10)\n            withZ: (self makeList: 6).\n        ^ result length\n    )\n    \n    verifyResult: result = (\n      ^ self assert: 10 equals: result\n    )\n    \n    makeList: length = (\n        (length = 0)\n            ifTrue: [ ^nil ]\n            ifFalse: [\n                ^(ListElement new: length)\n                    next: (self makeList: (length - 1)) ]\n    )\n    \n    isShorter: x than: y = (\n        | xTail yTail |\n        \n        xTail := x. yTail := y.\n        [ yTail isNil ]\n            whileFalse: [\n                xTail isNil ifTrue: [ ^true ].\n                xTail := xTail next.\n                yTail := yTail next ].\n        \n        ^false\n    )\n    \n    taklWithX: x withY: y withZ: z = (\n        (self isShorter: y than: x)\n            ifTrue: [\n                ^(self\n                    taklWithX: (self taklWithX: x next withY: y withZ: z)\n                    withY: (self taklWithX: y next withY: z withZ: x)\n                    withZ: (self taklWithX: z next withY: x withZ: y)) ]\n            ifFalse: [ ^z ].\n    )\n    \n)\n", "BubbleSort.som": "\"\n\n$Id: BubbleSort.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nBubbleSort = Sort (\n\n    sort: array = (\n        array length downTo: 1 do: [ :i |\n            1 to: i - 1 do: [ :j |\n                | current next |\n                current := array at: j.\n                next    := array at: j + 1.\n                (current > next)\n                    ifTrue: [\n                        array at: j put: next.\n                        array at: j + 1 put: current ] ] ].\n        ^ array\n    )\n    \n    dataSize = ( ^130 )\n    \n)\n", "Mandelbrot.som": "\" This version is a transcription of the Ruby implementation mandelbrot.rb\n  found with JRuby\n  https://raw.githubusercontent.com/jruby/jruby/3e43676ee6dc3c13e70fe4a52cce685128c23b8e/bench/truffle/mandelbrot.rb\n\n  The original copyright statement reads as follows:\n\n# Copyright \u00a9 2004-2013 Brent Fulgham\n# \n# All rights reserved.\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#   * Redistributions of source code must retain the above copyright notice,\n#     this list of conditions and the following disclaimer.\n# \n#   * Redistributions in binary form must reproduce the above copyright notice,\n#     this list of conditions and the following disclaimer in the documentation\n#     and/or other materials provided with the distribution.\n# \n#   * Neither the name of 'The Computer Language Benchmarks Game' nor the name\n#     of 'The Computer Language Shootout Benchmarks' nor the names of its\n#     contributors may be used to endorse or promote products derived from this\n#     software without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# The Computer Language Benchmarks Game\n# http://benchmarksgame.alioth.debian.org\n# \n#  contributed by Karl von Laudermann\n#  modified by Jeremy Echols\n#  modified by Detlef Reichl\n#  modified by Joseph LaFata\n#  modified by Peter Zotov\n# \n# http://benchmarksgame.alioth.debian.org/u64q/program.php?test=mandelbrot&lang=yarv&id=3\n\"\n\nMandelbrot = Benchmark (\n    | firstResult |\n\n    innerBenchmarkLoop: innerIterations = ( \n      ^ self verify: (self mandelbrot: innerIterations) inner: innerIterations\n    )\n\n    verify: result inner: innerIterations = (\n      innerIterations = 750 ifTrue: [\n        ^ result = 50\n      ].\n      firstResult isNil ifTrue: [\n        firstResult := result.\n      ].\n      ^ result = firstResult\n    )\n\n    mandelbrot: size = (\n        | sum byteAcc bitNum y |\n        sum     := 0.\n        byteAcc := 0.\n        bitNum  := 0.\n  \n        y := 0.\n        \n        [y < size] whileTrue: [\n            | ci x |\n            ci := (2.0 * y // size) - 1.0.\n            x  := 0.\n            \n            [x < size] whileTrue: [\n                | zr zrzr zi zizi cr escape z notDone |\n                zrzr := zr := 0.0.\n                zizi := zi := 0.0.\n                cr   := (2.0 * x // size) - 1.5.\n                \n                z := 0.\n                notDone := true.\n                escape := 0.\n                [notDone and: [z < 50]] whileTrue: [\n                    zr := zrzr - zizi + cr.\n                    zi := 2.0 * zr * zi + ci.\n            \n                    \"preserve recalculation\"\n                    zrzr := zr * zr.\n                    zizi := zi * zi.\n            \n                    (zrzr + zizi > 4.0) ifTrue: [\n                        notDone := false.\n                        escape  := 1.\n                    ].\n                    z := z + 1.\n                ].\n  \n                byteAcc := (byteAcc << 1) + escape.\n                bitNum  := bitNum + 1.\n  \n                \" Code is very similar for these cases, but using separate blocks\n                  ensures we skip the shifting when it's unnecessary,\n                  which is most cases. \"\n                bitNum = 8 \n                    ifTrue: [\n                      sum := sum bitXor: byteAcc.\n                      byteAcc := 0.\n                      bitNum  := 0. ]\n                    ifFalse: [\n                      (x = (size - 1)) ifTrue: [\n                          byteAcc := byteAcc << (8 - bitNum).\n                          sum := sum bitXor: byteAcc.\n                          byteAcc := 0.\n                          bitNum  := 0. ]].\n                x := x + 1.\n            ].\n            y := y + 1.\n        ].\n        \n        ^ sum\n    )\n)\n", "Bounce.som": "\"\n\n$Id: Bounce.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nBounce = Benchmark (\n\n    benchmark = (\n        | ballCount balls bounces |\n        \n        Random initialize.\n        \n        ballCount := 100.\n        bounces   := 0.\n        balls     := Array new: ballCount withAll: [ Ball new ].\n        \n        1 to: 50 do: [ :i |\n            balls do: [ :ball |\n                (ball bounce) ifTrue: [ bounces := bounces + 1 ] ] ].\n\n        ^ bounces\n    )\n    \n    verifyResult: result = (\n      ^ self assert: 1331 equals: result\n    )\n    \n)\n", "Fannkuch.som": "\"\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\n\"Pfannkuchen are somehow known in Benchmarking. i.e., there is a Lisp story\"\n\n\" Original written for VisualWorks\n* The Computer Language Benchmarks Game\n   http://shootout.alioth.debian.org/\n   contributed by Paolo Bonzini *\"\n\nFannkuch = Benchmark (\n\n    | timesRotated perm atEnd |\n\n    pfannkuchen: anArray = (\n        | first complement a b k |\n        k := 0.\n        [ (first := anArray at: 1) = 1 ] whileFalse: [\n            k := k + 1.\n            complement := first + 1.\n\n            1 to: first / 2 do: [ :i |\n                a := anArray at: i.\n                b := anArray at: complement - i.\n                anArray at: i put: b.\n                anArray at: complement - i put: a.\n            ]\n        ].\n        ^k\n    )\n\n    initialize: size = (\n        perm := (1 to: size).\n        timesRotated := Array new: size withAll: 0.\n        atEnd := false\n    )\n\n    makeNext = (\n        | temp remainder |\n        \"* Generate the next permutation. *\"\n        2 to: perm length do: [ :r |\n            \"* Rotate the first r items to the left. *\"\n            temp := perm at: 1.\n            1 to: r - 1 do: [ :i | perm at: i put: (perm at: i + 1) ].\n            perm at: r put: temp.\n            \n            timesRotated at: r put: ((timesRotated at: r) + 1) % r.\n            remainder := timesRotated at: r.\n            remainder = 0 ifFalse: [ ^self ].\n\n            \"* After r rotations, the first r items are in their original positions.\n            Go on rotating the first r+1 items. *\"\n        ].\n\n        \"* We are past the final permutation. *\"\n        atEnd := true.\n    )\n\n\n    maxPfannkuchen = (\n        | max permutation |\n        max := 0.\n        [self atEnd] whileFalse: [\n            permutation := self next.\n            max := max max: (self pfannkuchen: permutation)].\n        ^max\n    )\n\n    atEnd = (\n        ^atEnd\n    )\n\n    next = (\n        | result |\n        result := perm copy.\n        self makeNext.\n        ^result\n    )\n\n    innerBenchmarkLoop: innerIterations = (\n        | result |\n        self initialize: innerIterations.\n        result := self maxPfannkuchen.\n        ^ result = (Fannkuch expectedResult: innerIterations)\n    )\n    \n    ----\n    | results |\n    \n    expectedResult: problemSize = (\n      results isNil ifTrue: [\n        results := Array new: 12.\n        results at:  1 put:  0.\n        results at:  2 put:  1.\n        results at:  3 put:  2.\n        results at:  4 put:  4.\n        results at:  5 put:  7.\n        results at:  6 put: 10.\n        results at:  7 put: 16.\n        results at:  8 put: 22.\n        results at:  9 put: 30.\n        results at: 10 put: 38.\n        results at: 11 put: 51.\n        results at: 12 put: 65.\n      ].\n      ^ results at: problemSize\n    )\n)\n", "All.som": "\"\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nAll = BenchmarkHarness (\n    | summedAverage |\n\n    all = (\n        ^ Fibonacci, Dispatch, Bounce, Loop, Permute, Queens, List, Recurse,\n          Storage, Sieve, BubbleSort, QuickSort, Sum, Towers, TreeSort,\n          IntegerLoop, FieldLoop\n    )\n    \n    run: params = (\n        params length < 2\n            ifTrue:  [ self exec: 100 ]\n            ifFalse: [ self exec: (params at: 2) asInteger ]\n    )\n    \n    printUsage = (\n      './som.sh -cp Smalltalk Examples/Benchmarks/All.som [number-of-iterations]' println.\n      '' println.\n      '  number-of-iterations - the number of time each benchmark is executed, default: 1' println.\n    )\n    \n    initialize = (\n        super initialize.\n        summedAverage := 0.\n    )\n    \n    exec: iterations = (\n        'Start execution of all benchmarks. Iterations: ' print.\n        iterations println.\n        \n        self all do: [:cls |\n            self initialize.\n            self benchmarkClass: cls.\n            self printAll: false.\n            self maxRuntime: 3. \"seconds\"\n            self numIterations: iterations.\n            self warmUp: 10.\n\n            self runBenchmark.\n        ].\n        self printTotal.\n    )\n    \n    reportBenchmark: bench result: total = (\n        '' println.\n        'Benchmark: ' print.\n        bench name println.\n\n        ('   Iterations: ' + numIterations + ' (elapsed time ' + (total // 1000) round\n            + ' ms)') println.\n        ('   AVERAGE: ' + ((total // numIterations) // 1000) round + ' ms') println.\n        \n        summedAverage := summedAverage + (total // numIterations).\n    )\n    \n    printTotal = (\n        ('Summed Average Runtime: ' + (summedAverage // 1000) round asString + ' ms') println.\n    )\n    \n)\n", "TowersDisk.som": "\"\n\n$Id: TowersDisk.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nTowersDisk = (\n\n    | size next |\n    \n    size        = ( ^size         )\n    size: value = ( size := value )\n    next        = ( ^next         )\n    next: value = ( next := value )\n    \n    -----------------------------------\n    \n    new: value  = ( ^super new size: value )\n    \n)\n", "Benchmark.som": "\"\n\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nBenchmark = (\n\n    run = ( \n        | harness |\n        harness := All new.\n        harness initialize.\n        harness benchmarkClass: self class.\n        harness printAll: false.\n        harness maxRuntime: 3. \"seconds\"\n        harness numIterations: 100.\n        harness warmUp: 10.\n\n        harness runBenchmark.\n        harness printTotal.\n    )\n    \n    oneTimeSetup = ()\n    \n    innerBenchmarkLoop: innerIterations = (\n        | i |\n        i := 0.\n        [ i < innerIterations ] whileTrue: [\n            (self verifyResult: self benchmark) ifFalse: [ ^ false ].\n            i := i + 1.\n        ].\n        ^ true\n    )\n    \n    benchmark  = ( self subclassResponsibility )\n    verifyResult: result = ( self subclassResponsibility )\n    name       = ( ^self class name asString )\n    \n    assert: expected equals: value = (\n      expected = value ifFalse: [\n        self error: 'Expected value (' + expected asString + ') differs from actual (' + value asString + ') benchmark result.'\n      ].\n      ^ true\n    )\n)\n", "PageRank.som": "\"https://github.com/Sable/Ostrich/blob/master/map-reduce/page-rank/js/pagerank.js\"\nPageRank = Benchmark (\n  | firstResult |\n\n  \" generates an array of random pages and their links \"\n  generateRandomPagesN: n outLinks: outLinks divisor: divisor  = (\n    | pages |\n    \" matrix cell i,j means link from j->i \"\n    pages := Array new: n * n withAll: 0.\n    \n    0 to: n - 1 do: [:i |\n      outLinks at: i + 1 put: 0.\n\n      0 to: n - 1 do: [:j |\n        (i <> j and: [(JenkinsRandom random abs % divisor) = 0]) ifTrue: [\n          pages at: (i * n + j) + 1 put: 1.\n          outLinks at: i + 1 put: (outLinks at: i + 1) + 1\n        ]\n      ].\n\n      \" the case with no outlinks is afunctioned \"\n    (outLinks at: i + 1) = 0 ifTrue: [\n        | k |\n        k := JenkinsRandom random abs % n.\n        [i = k] whileTrue: [\n          k := JenkinsRandom random abs % n.\n        ].\n\n        pages at: (i * n + k) + 1 put: 1.\n        outLinks at: i + 1 put: 1\n      ]\n    ].\n    ^ pages\n  )\n\n  mapPageRanks: pages pageRanks: pageRanks maps: maps outLinks: outLinks n: n = (\n    0 to: n - 1 do: [:i |\n      | outboundRank |\n      outboundRank := (pageRanks at: i + 1) // (outLinks at: i + 1).\n      \n      0 to: n - 1 do: [:j |\n        maps at: (i * n + j) + 1\n            put: ((pages at: (i * n + j) + 1) = 0\n                   ifTrue:  [0.0]\n                   ifFalse: [(pages at: (i * n + j) + 1)  * outboundRank])\n      ]\n    ]\n  )\n\n  reducePageRanks: pageRanks maps: maps n: n = (\n    | dif |\n    dif := 0.0.\n\n    0 to: n - 1 do: [:j |\n      | oldRank newRank |\n      oldRank := pageRanks at: j + 1.\n      newRank := 0.0.\n      \n      0 to: n - 1 do: [:i |\n        newRank := newRank + (maps at: (i * n + j) + 1)\n      ].\n\n      newRank := ((1 - PageRank DFactor) // n) + (PageRank DFactor * newRank).\n      dif := (newRank - oldRank) abs > dif\n               ifTrue: [(newRank - oldRank) abs] ifFalse: [ dif ].\n      pageRanks at: j + 1 put: newRank\n    ].\n    ^ dif\n  )\n\n  innerBenchmarkLoop: innerIterations = (\n    innerIterations < 2 ifTrue: [\n      self error: 'innerIterations has to be 2 or more, but was ' + innerIterations ].\n  \n    JenkinsRandom seed: 49734321.\n    \"standard for verification\"\n    \"n := 5000\n     iter    := 10.\n     thresh  := 0.00000001.\n     divisor := 100000.\"\n    ^ self verify: (self runPageRankN: innerIterations iter: 10 thresh: 0.00000001 divisor: 100000)\n           inner:  innerIterations.\n  )\n\n  runPageRankN: n iter: iter thresh: thresh divisor: divisor = (\n    | nbLinks maxDiff pageRanks maps outLinks t pages |\n    maxDiff   := Double PositiveInfinity.\n    pageRanks := Array new: n     withAll: 1.0 // n.\n    maps      := Array new: n * n withAll: 0.0.\n    outLinks  := Array new: n     withAll: 0.\n\n    pages := self generateRandomPagesN: n outLinks: outLinks divisor: divisor.\n\n    nbLinks := 0.\n    0 to: n - 1 do: [:i |\n      1 to: n do: [:j |\n        nbLinks := nbLinks + (pages at: i * n + j)\n      ]\n    ].\n\n    t := 1.\n    [t <= iter and: [maxDiff >= thresh]] whileTrue: [\n      self mapPageRanks: pages pageRanks: pageRanks maps: maps outLinks: outLinks n: n.\n      maxDiff := self reducePageRanks: pageRanks maps: maps n: n.\n      t := t + 1\n    ].\n    \n    ^ pageRanks\n  )\n  \n  verify: pageRanks inner: innerIterations = (\n    innerIterations = 5000 \" and: [iter = 10 and: [thresh = 0.00000001 and: [divisor = 100000]]]\"\n      ifTrue: [\n        | expected |\n        expected := PageRank ExpectedPageRanks.\n        pageRanks length = expected length ifFalse: [\n          self error: 'Invalid length of page_ranks array'\n        ].\n      \n        pageRanks doIndexes: [:i | \n          (pageRanks at: i) = (expected at: i) ifFalse: [\n            self error: 'ERROR: page_ranks[' + i asString + ']=' +\n                        (pageRanks at: i) + ' differs from the expected value: ' +\n                        (expected at: i)\n          ]\n        ] ]\n      ifFalse: [\n        ^ self checkBasedOnFirstResult: pageRanks inner: innerIterations\n      ].\n    ^ true\n  )\n  \n  checkBasedOnFirstResult: pageRanks inner: innerIterations = (\n    pageRanks length = innerIterations ifFalse: [ ^ false ].\n\n    firstResult == nil ifTrue: [\n      firstResult := pageRanks.\n      ^ true\n    ] ifFalse: [\n      1 to: innerIterations do: [:i |\n        (firstResult at: i) = (pageRanks at: i) ifFalse: [\n          ^ false\n        ]\n      ]\n    ].\n    \n    ^ true\n  )\n\n  ----\n  | expected |\n  \n  DFactor = ( ^ 0.85 ) \" damping factor\"\n  ExpectedPageRanks = (\n    | prevSize |\n    expected ifNotNil: [ ^ expected ].\n    \n    expected := Vector new: 5000.\n    prevSize := expected size.\n    \n    1 to: 53 do: [:i |\n      self perform: ('pageRanks' + i + ':') asSymbol withArguments: (Array with: expected).\n      expected size = prevSize ifTrue: [ self error: 'The method ' + ('pageRanks' + i) asSymbol + ' did not add elements to expected' ].\n      prevSize := expected size ].\n    \n    expected := expected asArray.\n    \n    ^ expected\n  )\n  \n  pageRanks1: expected = (\n    expected,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.00009885000000000002, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.0001937753607433594, 0.000030000000000000004, 0.000030000000000000004,\n       0.00026861193950589846, 0.0011626495265046287, 0.00033125968546875005,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.002419297210359863, 0.00005550000000000001, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.00008100000000000002,\n       0.000030000000000000004, 0.00028382917108593755, 0.00005550000000000001,\n       0.00022373208234375002, 0.0009500131460436332, 0.0004673045821320703,\n       0.00005550000000000001, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.00009559875000000003, 0.00029348190124218755,\n       0.00009559875000000003, 0.000030000000000000004, 0.000030000000000000004,\n       0.0002522648462121094, 0.0002007225, 0.0005721072315653125,\n       0.0006549038427949217, 0.00027208502253146485, 0.000030000000000000004,\n       0.00009559875000000003, 0.00022515500625, 0.000030000000000000004.\n  )\n  \n  pageRanks2: expected = (\n    expected,\n       0.000030000000000000004, 0.00020761099425802734, 0.00007717500000000002,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.0014816283407223048, 0.000030000000000000004, 0.00007717500000000002,\n       0.00018305958234375, 0.00014299384687500004, 0.00011125893750000003,\n       0.00015412125000000001, 0.00005550000000000001, 0.0005866682663756834,\n       0.0009038160999648827, 0.00005550000000000001, 0.00005550000000000001,\n       0.000030000000000000004, 0.00014299384687500004, 0.000030000000000000004,\n       0.00005550000000000001, 0.00005550000000000001, 0.000030000000000000004,\n       0.00012968268750000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.000214412971875, 0.000030000000000000004, 0.00008100000000000002,\n       0.00016827375000000002, 0.00005550000000000001, 0.0007612028507183201,\n       0.00005550000000000001, 0.000030000000000000004, 0.00005550000000000001,\n       0.0017911603607849024, 0.00012435000000000001, 0.0002074907896875,\n       0.000030000000000000004, 0.000620176162217578, 0.0016205421327844336,\n       0.000030000000000000004, 0.000030000000000000004, 0.0001772368043671875.\n  )\n  \n  pageRanks3: expected = (\n    expected,\n       0.0002207814375, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.0009383260308160549, 0.000030000000000000004,\n       0.00007717500000000002, 0.000030000000000000004, 0.00005550000000000001,\n       0.00007717500000000002, 0.00011727375000000003, 0.00025645517495238287,\n       0.00046964726999218764, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.00007717500000000002, 0.000030000000000000004,\n       0.00048092971362552716, 0.00022518875783285154, 0.0002320883721796875,\n       0.00014550189499218754, 0.000030000000000000004, 0.000030000000000000004,\n       0.00007717500000000002, 0.0001801089375, 0.0003218540343750001,\n       0.000030000000000000004, 0.00024264642949335937, 0.00014659875000000002,\n       0.00009885000000000002, 0.00005550000000000001, 0.000030000000000000004,\n       0.00012435000000000001, 0.00005550000000000001, 0.00009885000000000002,\n       0.00009559875000000003, 0.00007717500000000002, 0.00020376888060937495,\n       0.00005550000000000001, 0.000030000000000000004, 0.00005550000000000001,\n       0.00005550000000000001, 0.00011727375000000003, 0.00005550000000000001,\n       0.00023148805436718755, 0.00005550000000000001, 0.0003663848267566407,\n       0.000030000000000000004, 0.00008100000000000002, 0.000030000000000000004,\n       0.00005550000000000001, 0.00020837250000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.000128175, 0.00005550000000000001,\n       0.0007321965646351562, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.00009559875000000003, 0.0002918212500000001,\n       0.00005550000000000001, 0.00007717500000000002, 0.00018287250000000003,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00011727375000000003, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.0005117003058394531, 0.000030000000000000004,\n       0.000030000000000000004, 0.0005327917869365431, 0.000030000000000000004,\n       0.00013675893750000003, 0.00007717500000000002, 0.000030000000000000004,\n       0.00007717500000000002, 0.000030000000000000004, 0.00005550000000000001,\n       0.0008628989988383205, 0.00005550000000000001, 0.000030000000000000004,\n       0.00010267500000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.000126919125, 0.00010267500000000002, 0.000030000000000000004,\n       0.00011125893750000003, 0.000030000000000000004, 0.000030000000000000004,\n       0.00007717500000000002, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.00008100000000000002, 0.000030000000000000004,\n       0.00027766269375, 0.00005550000000000001, 0.000030000000000000004.\n  )\n  \n  pageRanks4: expected = (\n    expected,\n       0.00018287250000000003, 0.000030000000000000004, 0.00006825,\n       0.000030000000000000004, 0.00012052500000000002, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.00008100000000000002, 0.00007717500000000002, 0.00005550000000000001,\n       0.0005574534602777341, 0.00011402250000000001, 0.00009885000000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.000540919912277207, 0.00008100000000000002, 0.00005550000000000001,\n       0.00007717500000000002, 0.000030000000000000004, 0.00005550000000000001,\n       0.00013588458234375003, 0.000030000000000000004, 0.00020486333264062499,\n       0.0010616644951779884, 0.00005550000000000001, 0.00012109875000000002,\n       0.00013894875000000002, 0.0006629172614616794, 0.0015453146662926173,\n       0.000030000000000000004, 0.0002057215678125, 0.00014277375000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.00012457009687500003,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.00022662231875, 0.0002800117218750001,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00012457009687500003, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.0009413663007857225, 0.00005550000000000001,\n       0.00005550000000000001, 0.000030000000000000004, 0.00005550000000000001,\n       0.00025216269375, 0.000030000000000000004, 0.00005550000000000001,\n       0.00014299384687500004, 0.000030000000000000004, 0.0004204378892502149,\n       0.00022315833234375003, 0.001512352057544629, 0.00040963230479023444,\n       0.00026866422187500004, 0.00009885000000000002, 0.000030000000000000004,\n       0.0004487230533789453, 0.000030000000000000004, 0.0001568163804609375,\n       0.00014985, 0.00007717500000000002, 0.00037312038758925784,\n       0.00010267500000000002, 0.00007717500000000002, 0.000935572065964551,\n       0.000030000000000000004, 0.000030000000000000004, 0.0006538908974685352,\n       0.00005550000000000001, 0.000030000000000000004, 0.0006925555784296876,\n       0.00009559875000000003, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.000146025, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00004275000000000001, 0.0002412005625, 0.00005550000000000001,\n       0.00005550000000000001, 0.000351187703481504, 0.00010267500000000002,\n       0.000030000000000000004, 0.00019815573560605466, 0.0001356975,\n       0.00007717500000000002, 0.00013588458234375003, 0.0019199758003062113,\n       0.000030000000000000004, 0.000030000000000000004, 0.0006042323629701756,\n       0.000030000000000000004, 0.0008090710683361913, 0.000030000000000000004.\n  )\n  \n  pageRanks5: expected = (\n    expected,\n       0.00021544875, 0.000030000000000000004, 0.0003507081512421876,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00028123619308710943, 0.00007717500000000002, 0.00022293583249218752,\n       0.000030000000000000004, 0.00028254900584279304, 0.0004448098933681447,\n       0.000030000000000000004, 0.000030000000000000004, 0.00010267500000000002,\n       0.00005550000000000001, 0.000406985079798047, 0.000030000000000000004,\n       0.00007717500000000002, 0.000030000000000000004, 0.00005550000000000001,\n       0.00020730370734375002, 0.000030000000000000004, 0.00008100000000000002,\n       0.00009559875000000003, 0.000030000000000000004, 0.0006841020911458787,\n       0.000030000000000000004, 0.000030000000000000004, 0.00019508699999999998,\n       0.00023373894375, 0.000269050764124043, 0.00007717500000000002,\n       0.0012665335189376758, 0.0003229170826183594, 0.00005550000000000001,\n       0.00010267500000000002, 0.00007717500000000002, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.00026877685218750007,\n       0.00007717500000000002, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.00035339283501253916, 0.00007717500000000002,\n       0.00005550000000000001, 0.000030000000000000004, 0.00007717500000000002,\n       0.000220427784375, 0.000030000000000000004, 0.000132, 0.00025887973491310547,\n       0.0010559972458375393, 0.00007717500000000002, 0.000030000000000000004,\n       0.00005550000000000001, 0.00005550000000000001, 0.00008100000000000002,\n       0.0007952039924323437, 0.00009559875000000003, 0.0007619092408695311,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00008100000000000002, 0.00005550000000000001,\n       0.0004741191615037304, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.00005550000000000001,\n       0.00044242997182148444, 0.00014277375000000002, 0.000030000000000000004,\n       0.00007717500000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.0008103090240004296, 0.000030000000000000004, 0.0008127957153562891.\n  )\n  \n  pageRanks6: expected = (\n    expected,\n       0.00007717500000000002, 0.000030000000000000004, 0.0005670410421640625,\n       0.00012435000000000001, 0.0009996132445867678, 0.00005550000000000001,\n       0.000190168846875, 0.00019637074171875002, 0.00005550000000000001,\n       0.0006413808275615429, 0.0008067955708537303, 0.0007001598184784763,\n       0.00007717500000000002, 0.00005550000000000001, 0.00007717500000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00019364019374999998, 0.000030000000000000004,\n       0.000030000000000000004, 0.00024570768750000003, 0.00005550000000000001,\n       0.000030000000000000004, 0.00005550000000000001, 0.000816114721648008,\n       0.00016996851984375, 0.000251748159375, 0.00007717500000000002,\n       0.00005550000000000001, 0.00005550000000000001, 0.00005550000000000001,\n       0.00045582617944294916, 0.000030000000000000004, 0.00007717500000000002,\n       0.00009885000000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.0004087417901358985,\n       0.000030000000000000004, 0.00011125893750000003, 0.0007096632942357614,\n       0.0004450802223830273, 0.000030000000000000004, 0.00013788125625000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.0007781633581341993,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00005550000000000001, 0.000030000000000000004, 0.0007831720377038671,\n       0.00007717500000000002, 0.000146025, 0.000030000000000000004,\n       0.0004440335706074609, 0.0002797916250000001, 0.00014534287500000002,\n       0.000161417596875, 0.0009436753876707029, 0.00026090069906250005,\n       0.000661540765294531, 0.00029711647746210945, 0.0002448333323437501,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00021968458249218753, 0.00007717500000000002, 0.00018669750000000003,\n       0.000030000000000000004, 0.000030000000000000004, 0.0004852117315546876,\n       0.0003194149033965235, 0.000030000000000000004, 0.000770995975586406,\n       0.000582465439638496, 0.001229452233367832, 0.00007717500000000002,\n       0.000030000000000000004, 0.000166433693109375, 0.000969294173404297,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.0001513576875, 0.00009559875000000003, 0.00005550000000000001,\n       0.00007717500000000002, 0.000030000000000000004, 0.00027891726984375005,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004.\n  )\n  \n  pageRanks7: expected = (\n    expected,\n       0.0003005925113290822, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.0005980535795580271,\n       0.000030000000000000004, 0.00005550000000000001, 0.0006150758829812889,\n       0.000030000000000000004, 0.00011125893750000003, 0.000030000000000000004,\n       0.00005550000000000001, 0.00007717500000000002, 0.00015007009687500002,\n       0.000030000000000000004, 0.00005550000000000001, 0.00063777321360625,\n       0.000030000000000000004, 0.00041378858300664085, 0.0002291377273359375,\n       0.00008100000000000002, 0.0007787174847144531, 0.00011125893750000003,\n       0.000319367505031465, 0.00037540608941236337, 0.000030000000000000004,\n       0.0008391853330165822, 0.000030000000000000004, 0.0001952814375,\n       0.00008100000000000002, 0.00005550000000000001, 0.00009885000000000002,\n       0.000030000000000000004, 0.0004302220856250001, 0.00005550000000000001,\n       0.00007717500000000002, 0.00022148922187500001, 0.00008100000000000002,\n       0.000168493846875, 0.00005550000000000001, 0.00016444875000000002,\n       0.00022096851984374999, 0.0004387228943070313, 0.000030000000000000004,\n       0.00018994875000000002, 0.00043396908058710945, 0.000030000000000000004,\n       0.000030000000000000004, 0.00119860742323042, 0.00013675893750000003,\n       0.00005550000000000001, 0.00007717500000000002, 0.00008100000000000002,\n       0.00010267500000000002, 0.000030000000000000004, 0.0002644775398359375,\n       0.0007738206560650585, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.0007043146423551758, 0.00005550000000000001, 0.000753936463079121,\n       0.00014277375000000002, 0.00005550000000000001, 0.000030000000000000004,\n       0.0007755696951406249, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004.\n  )\n  \n  pageRanks8: expected = (\n    expected,\n       0.000030000000000000004, 0.00010267500000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00008100000000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.0007849164249744726, 0.00019180253983593749,\n       0.00013675893750000003, 0.000030000000000000004, 0.00017895411089179688,\n       0.00013293393750000003, 0.000030000000000000004, 0.0009846043482525976,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.0003370130432812501, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.0006119601669933592,\n       0.0005546408271638474, 0.00035661147136054695, 0.000030000000000000004,\n       0.00008100000000000002, 0.000030000000000000004, 0.00018305958234375,\n       0.00005550000000000001, 0.000030000000000000004, 0.0004162326721509962,\n       0.000030000000000000004, 0.00005550000000000001, 0.000140230284375,\n       0.00007717500000000002, 0.000030000000000000004, 0.00012435000000000001,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.0001752401304609375, 0.00012435000000000001,\n       0.00005550000000000001, 0.0009916779323594143, 0.000030000000000000004,\n       0.0001356975, 0.0005381491251261719, 0.000594984439271953,\n       0.000030000000000000004, 0.00008100000000000002, 0.0009741378132010936,\n       0.0010289986178938673, 0.00009885000000000002, 0.00005550000000000001,\n       0.00005550000000000001, 0.000030000000000000004, 0.00007717500000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.0003377064978837697,\n       0.000030000000000000004, 0.00008100000000000002, 0.00014985,\n       0.00007717500000000002, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.00047936216204097644, 0.00012109875000000002,\n       0.000944214872861504, 0.00005550000000000001, 0.00007717500000000002,\n       0.00010267500000000002, 0.000030000000000000004, 0.000030000000000000004.\n  )\n  \n  pageRanks9: expected = (\n    expected,\n       0.00005550000000000001, 0.0003911262409296876, 0.00016444875000000002,\n       0.0004658189423039455, 0.0006191960454895896, 0.00012109875000000002,\n       0.00008100000000000002, 0.00018994875, 0.0003503022762421876,\n       0.00007717500000000002, 0.00014659875000000002, 0.000030000000000000004,\n       0.000294136229749043, 0.0001546089375, 0.000030000000000000004,\n       0.00048512037514843756, 0.000030000000000000004, 0.00010267500000000002,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.0009038993515082423, 0.00005550000000000001,\n       0.000030000000000000004, 0.00016792009687500002, 0.00047329793096896486,\n       0.001073084842359102, 0.000227504034375, 0.00007717500000000002,\n       0.0004113979149621094, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.000994461009736816,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00009559875000000003, 0.00022421976984375, 0.0004580116392566408,\n       0.00042668597373246103, 0.000030000000000000004, 0.0005213088860603709,\n       0.00029239500000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.00009559875000000003, 0.00011727375000000003,\n       0.00010267500000000002, 0.000030000000000000004, 0.0004510455397947461,\n       0.00014277375000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.002259585483123663, 0.0010017437556216994, 0.00032997952022560553,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.0007017341088929103,\n       0.00005550000000000001, 0.0005571497378849411, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00022170931875,\n       0.0006954863535522461, 0.00005550000000000001, 0.0012527846540595113,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.0005184859828281249, 0.000030000000000000004, 0.000030000000000000004,\n       0.00013293393750000003, 0.00007717500000000002, 0.0008999596475350778,\n       0.00031492419618537123, 0.00008100000000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.0012884279283853029, 0.000030000000000000004,\n       0.000030000000000000004, 0.0007648574488383199, 0.0008473654450535153.\n  )\n  \n  pageRanks10: expected = (\n    expected,\n       0.00008100000000000002, 0.000030000000000000004, 0.000180329034375,\n       0.000170842875, 0.00005550000000000001, 0.000401158314638496,\n       0.0006134211817580272, 0.00015881305436718754, 0.000030000000000000004,\n       0.00005550000000000001, 0.00007717500000000002, 0.00008100000000000002,\n       0.000030000000000000004, 0.00007717500000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.00007717500000000002,\n       0.0005238088503046875, 0.00005550000000000001, 0.00012109875000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00012109875000000002, 0.00005550000000000001, 0.00005550000000000001,\n       0.00010267500000000002, 0.0001605102271875, 0.0005087270201025195,\n       0.0009967971475125393, 0.00007717500000000002, 0.00009559875000000003,\n       0.00008100000000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.00005550000000000001, 0.00005550000000000001,\n       0.0006039423526103709, 0.0009677339486394532, 0.000030000000000000004,\n       0.0007675520473719141, 0.0007538680901701758, 0.00008100000000000002,\n       0.0006169301652431443, 0.00009885000000000002, 0.0005449327357591993,\n       0.00011125893750000003, 0.00012435000000000001, 0.00005550000000000001,\n       0.00005550000000000001, 0.000030000000000000004, 0.00007717500000000002,\n       0.00011125893750000003, 0.00021132074186718748, 0.00007717500000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00007717500000000002, 0.000254291625, 0.00005550000000000001,\n       0.000140230284375, 0.00005550000000000001, 0.0005397573664441406,\n       0.000030000000000000004, 0.0002286781021875, 0.00011727375000000003,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00008100000000000002, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.00012109875000000002,\n       0.00014985, 0.0003482766015246095, 0.00007717500000000002,\n       0.00015843393750000003, 0.000030000000000000004, 0.00007717500000000002,\n       0.000030000000000000004, 0.00011125893750000003, 0.00042410386925802743,\n       0.000030000000000000004, 0.00007717500000000002, 0.000030000000000000004,\n       0.00007717500000000002, 0.00037117269868064466, 0.00005550000000000001,\n       0.0001806826875, 0.00005550000000000001, 0.000030000000000000004,\n       0.00008100000000000002, 0.00009559875000000003, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00025942602609375004.\n  )\n  \n  pageRanks11: expected = (\n    expected,\n       0.000030000000000000004, 0.000030000000000000004, 0.00010267500000000002,\n       0.00005550000000000001, 0.00007717500000000002, 0.000245927784375,\n       0.00005550000000000001, 0.0001768576875, 0.000030000000000000004,\n       0.00005550000000000001, 0.00012435000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.00038169142341406263,\n       0.000030000000000000004, 0.000030000000000000004, 0.00016978143750000002,\n       0.00012435000000000001, 0.000030000000000000004, 0.000218017875,\n       0.0003311542154954884, 0.0023047579029954004, 0.0005710822497378906,\n       0.00007717500000000002, 0.0003164610867890626, 0.00005550000000000001,\n       0.000030000000000000004, 0.00039183545686406263, 0.000030000000000000004,\n       0.000030000000000000004, 0.00010267500000000002, 0.00009885000000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00005550000000000001, 0.0006218280803472657, 0.00027158680436718753,\n       0.0005329226223534762, 0.000030000000000000004, 0.0001546089375,\n       0.00005550000000000001, 0.000030000000000000004, 0.00012109875000000002,\n       0.0013023196241036914, 0.000030000000000000004, 0.0005814199422881052,\n       0.000030000000000000004, 0.0010607720917741798, 0.00011125893750000003,\n       0.000030000000000000004, 0.000030000000000000004, 0.0003044889569777344,\n       0.00007717500000000002, 0.00005550000000000001, 0.0008152654201896286,\n       0.00005550000000000001, 0.000140230284375, 0.0007082080488527344,\n       0.0007379601076354103, 0.000408482320607461, 0.00012968268750000001,\n       0.0010253114960741213, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004.\n  )\n  \n  pageRanks12: expected = (\n    expected,\n       0.00007717500000000002, 0.00009559875000000003, 0.000030000000000000004,\n       0.000146025, 0.00020560893750000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.00016119750000000003, 0.00005550000000000001,\n       0.000030000000000000004, 0.00031838485247324223, 0.000030000000000000004,\n       0.00005550000000000001, 0.0014520803604533988, 0.000030000000000000004,\n       0.00005550000000000001, 0.00009885000000000002, 0.000364157824359375,\n       0.00005550000000000001, 0.0013332881297266016, 0.0005557404117852929,\n       0.000030000000000000004, 0.00010267500000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.0009105278934790038,\n       0.000030000000000000004, 0.00010267500000000002, 0.000030000000000000004,\n       0.00009559875000000003, 0.00005550000000000001, 0.000030000000000000004,\n       0.0007129847634453126, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.00013675893750000003,\n       0.000950365240418213, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.00014919574171875,\n       0.000030000000000000004, 0.00010267500000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.0001768576875,\n       0.00043941458861267575, 0.00005550000000000001, 0.00028618575000000004,\n       0.00020968190109375, 0.00012968268750000001, 0.00012109875000000002,\n       0.0005675717694396287, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.0002826102781975489, 0.000030000000000000004,\n       0.00009559875000000003, 0.00005550000000000001, 0.000030000000000000004.\n  )\n  \n  pageRanks13: expected = (\n    expected,\n       0.00009559875000000003, 0.000345610471875, 0.000030000000000000004,\n       0.0006355078163115429, 0.00005550000000000001, 0.00007717500000000002,\n       0.0003739622193515626, 0.00014299384687500004, 0.00022441180436718748,\n       0.000030000000000000004, 0.00044359985994126954, 0.0002641154176562501,\n       0.000030000000000000004, 0.000206951353125, 0.00005550000000000001,\n       0.00004275000000000001, 0.000030000000000000004, 0.00008100000000000002,\n       0.000030000000000000004, 0.00008100000000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.00009559875000000003, 0.00005550000000000001,\n       0.00005550000000000001, 0.00035032903437500005, 0.00008100000000000002,\n       0.0008822237984673634, 0.0007134373373503516, 0.000030000000000000004,\n       0.0008928574627982618, 0.00018287250000000003, 0.000030000000000000004,\n       0.00005550000000000001, 0.00005550000000000001, 0.00016827375000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00015865403437500001, 0.00008100000000000002, 0.00013293393750000003,\n       0.000030000000000000004, 0.000030000000000000004, 0.000511693358096836,\n       0.000030000000000000004, 0.000030000000000000004, 0.0008382409215566016,\n       0.000030000000000000004, 0.00011402250000000001, 0.00005550000000000001,\n       0.000030000000000000004, 0.00014277375000000002, 0.000590603701889238,\n       0.00011402250000000001, 0.000030000000000000004, 0.0003913641587121094,\n       0.000030000000000000004, 0.000030000000000000004, 0.00012435000000000001,\n       0.000030000000000000004, 0.0005719241044744334, 0.00005550000000000001,\n       0.000030000000000000004, 0.00009559875000000003, 0.000030000000000000004,\n       0.00018612375, 0.00041990431397560547, 0.000128175, 0.00005550000000000001,\n       0.000030000000000000004, 0.00008100000000000002, 0.00056602218509332,\n       0.00008100000000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.00014919574171875, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.0007010716836625781, 0.000030000000000000004,\n       0.00027271537500000005, 0.00009559875000000003, 0.000030000000000000004,\n       0.00015851355328125002, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.0017785457481467384, 0.00035147874703125013,\n       0.000030000000000000004, 0.000030000000000000004, 0.00012109875000000002,\n       0.00017087074171875, 0.00005550000000000001, 0.00029875788750000006,\n       0.00007717500000000002, 0.00005550000000000001, 0.00018287250000000003,\n       0.00020730370734374997, 0.000030000000000000004, 0.00046078811633689466,\n       0.00012435000000000001, 0.000030000000000000004, 0.00010267500000000002.\n    )\n  \n  pageRanks14: expected = (\n    expected,\n       0.0011980866815906645, 0.0001897543125, 0.00007717500000000002,\n       0.000030000000000000004, 0.00007717500000000002, 0.00024398593546875,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.00009559875000000003,\n       0.00005550000000000001, 0.000030000000000000004, 0.0005523386141103321,\n       0.000030000000000000004, 0.0011369696555575588, 0.00044302649175994153,\n       0.00016225893750000003, 0.000030000000000000004, 0.00005550000000000001,\n       0.00005550000000000001, 0.00009885000000000002, 0.000030000000000000004,\n       0.00005550000000000001, 0.00010267500000000002, 0.00034647523371210935,\n       0.00005550000000000001, 0.00005550000000000001, 0.00008100000000000002,\n       0.000030000000000000004, 0.0006266011364933593, 0.0007460569827269042,\n       0.000152419125, 0.0005574828435624999, 0.00045754291748888653,\n       0.00005550000000000001, 0.00007717500000000002, 0.00012435000000000001,\n       0.0006514320518563474, 0.0007781550062722654, 0.000030000000000000004,\n       0.00011727375000000003, 0.000030000000000000004, 0.00016978143750000002,\n       0.00005550000000000001, 0.00005550000000000001, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.00010267500000000002, 0.000030000000000000004, 0.00021112870734374997,\n       0.000030000000000000004, 0.0007241425462692384, 0.000030000000000000004,\n       0.00043975632939673826, 0.00026377172812500006, 0.0003192690972632813,\n       0.00007717500000000002, 0.00005550000000000001, 0.001060316398582637,\n       0.000030000000000000004, 0.00016827375, 0.000030000000000000004,\n       0.00008100000000000002, 0.00010267500000000002, 0.000030000000000000004,\n       0.0002944702747961329, 0.000030000000000000004, 0.00005550000000000001,\n       0.000348277539984375, 0.0001546089375, 0.0016954224484599999,\n       0.000030000000000000004, 0.00005550000000000001, 0.000180329034375.\n  )\n  \n  pageRanks15: expected = (\n    expected,\n       0.00005550000000000001, 0.00024112459341996093, 0.000030000000000000004,\n       0.00041604693152460934, 0.00007717500000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.0005496041375411911, 0.00019251787500000001,\n       0.0005949961275392772, 0.0001551826875, 0.000254291625,\n       0.00011727375000000003, 0.00007717500000000002, 0.00012109875000000002,\n       0.00005550000000000001, 0.00015354144375, 0.00015007009687500002,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00008100000000000002, 0.000030000000000000004, 0.00027656824171875004,\n       0.00022955245734375, 0.00005550000000000001, 0.000030000000000000004,\n       0.00032534906796093756, 0.00012457009687500003, 0.000215668846875,\n       0.00013894875000000002, 0.000205829034375, 0.0002736906531408399,\n       0.00010267500000000002, 0.00005550000000000001, 0.0007959996360539453,\n       0.00005550000000000001, 0.00005550000000000001, 0.00012052500000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.000224252784375, 0.00005550000000000001, 0.00017087074171875,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.0003375011800228516, 0.000030000000000000004, 0.00005550000000000001,\n       0.00010267500000000002, 0.000030000000000000004, 0.000030000000000000004.\n  )\n  \n  pageRanks16: expected = (\n    expected,\n       0.000030000000000000004, 0.00014624509687500003, 0.00005550000000000001,\n       0.00017152500000000004, 0.000030000000000000004, 0.0003609669341552931,\n       0.00007717500000000002, 0.000030000000000000004, 0.00007717500000000002,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.0002042114773359375,\n       0.0008721219106832425, 0.0006369682754531251, 0.0001356975,\n       0.00005550000000000001, 0.00024838187461171876, 0.000713347958461465,\n       0.00007717500000000002, 0.00017303268749999998, 0.00008100000000000002,\n       0.0005128700965591992, 0.00019470905663185548, 0.00009885000000000002,\n       0.00008100000000000002, 0.00026435153437500005, 0.000030000000000000004,\n       0.00028910833249218753, 0.00005550000000000001, 0.00024367850573554694,\n       0.00015843393750000003, 0.000030000000000000004, 0.0003614906134310743,\n       0.000030000000000000004, 0.00035817465068654306, 0.00019702661074335936,\n       0.000030000000000000004, 0.000030000000000000004, 0.00031682620734375006,\n       0.000030000000000000004, 0.00009559875000000003, 0.0009339972378849416,\n       0.000030000000000000004, 0.000030000000000000004, 0.00037407066244818355,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00028621361671875, 0.000030000000000000004, 0.00017557009687500002,\n       0.000030000000000000004, 0.00017598333234375, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.0005464359416179294,\n       0.00012968268750000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.00009885000000000002, 0.000454723037081924, 0.000030000000000000004,\n       0.00009885000000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.00026667045761835943, 0.0010615728509209819, 0.00043192417839472676,\n       0.00014277375000000002, 0.0016763097454050194, 0.0004163827734375001,\n       0.00017174509687500002, 0.00007717500000000002, 0.0005071352788982225,\n       0.000030000000000000004, 0.0004724088400752538, 0.000030000000000000004,\n       0.00005550000000000001, 0.00005550000000000001, 0.0013976675910372072,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00010267500000000002, 0.000030000000000000004,\n       0.00010267500000000002, 0.00016827375, 0.0009015184824459963.\n  )\n  \n  pageRanks17: expected = (\n    expected,\n       0.00011402250000000001, 0.000030000000000000004, 0.00020620815124218746,\n       0.0006429872559689648, 0.00009559875000000003, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.00027610687500000006,\n       0.000030000000000000004, 0.00030289569021933597, 0.0006080530205542576,\n       0.00011727375000000003, 0.000030000000000000004, 0.000030000000000000004,\n       0.0010484356591858599, 0.000030000000000000004, 0.0004212905427699219,\n       0.00007717500000000002, 0.000030000000000000004, 0.00043143789891640633,\n       0.00014659875000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.0002032035485179687, 0.0007551751218261719,\n       0.000030000000000000004, 0.00005550000000000001, 0.0003794698669933595,\n       0.00014659875000000002, 0.00007717500000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.00011727375000000003, 0.000030000000000000004,\n       0.000030000000000000004, 0.0004934760543513475, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000128175,\n       0.00005550000000000001, 0.0008547118390340233, 0.000030000000000000004,\n       0.0014346082973754881, 0.00021695643750000001, 0.00005550000000000001,\n       0.0015211104302111527, 0.00011727375000000003, 0.00005550000000000001,\n       0.0004392343555509962, 0.000030000000000000004, 0.000030000000000000004,\n       0.00010267500000000002, 0.00005550000000000001, 0.0009416894236694923,\n       0.00007717500000000002, 0.00005550000000000001, 0.00022873191724904294,\n       0.0008242737845741408, 0.00025836458859375004, 0.00009559875000000003,\n       0.000030000000000000004, 0.00031687600301942386, 0.000030000000000000004,\n       0.000030000000000000004, 0.00007717500000000002, 0.00005550000000000001,\n       0.00015843393750000003, 0.000390462103125, 0.000030000000000000004,\n       0.00005550000000000001, 0.0004362053242109375, 0.00019035592921875,\n       0.000030000000000000004, 0.0005769638100933201, 0.00006825,\n       0.00005550000000000001, 0.000030000000000000004, 0.00022241513046093752,\n       0.000030000000000000004, 0.00005550000000000001, 0.001006261613162637.\n  )\n  \n  pageRanks18: expected = (\n    expected,\n       0.0007857088789003512, 0.000030000000000000004, 0.00025498721718750006,\n       0.00005550000000000001, 0.0011432981682779491, 0.000030000000000000004,\n       0.000030000000000000004, 0.00007717500000000002, 0.000030000000000000004,\n       0.00005550000000000001, 0.00007717500000000002, 0.0006757280227431446,\n       0.000600739772793574, 0.00014919574171875, 0.000030000000000000004,\n       0.0004217083662265626, 0.000030000000000000004, 0.0021483529248317776,\n       0.00005550000000000001, 0.0006842449449634961, 0.00005550000000000001,\n       0.000030000000000000004, 0.00013588458234375003, 0.000030000000000000004,\n       0.000030000000000000004, 0.00008100000000000002, 0.000030000000000000004,\n       0.0003539867951484376, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.00009559875000000003, 0.0005256094171827733,\n       0.000030000000000000004, 0.00014985, 0.00007717500000000002,\n       0.00008100000000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.0006064650511017775, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.00023480038124999998, 0.000030000000000000004,\n       0.000386993224139668, 0.0007025938102384176, 0.00007717500000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.0008015986250978318,\n       0.0011856587198157474, 0.001220542597781563, 0.00005550000000000001,\n       0.001103845676174756, 0.000030000000000000004, 0.0005001217209945313,\n       0.000164668846875, 0.000030000000000000004, 0.00021766422187500002,\n       0.00009559875000000003, 0.0002708821616396681, 0.0008902189805322072,\n       0.0002728723524621094, 0.0001928969918671875, 0.000030000000000000004,\n       0.00005550000000000001, 0.00008100000000000002, 0.00012435000000000001,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00020673125625000002, 0.000030000000000000004, 0.00009559875000000003,\n       0.00012109875000000002, 0.000030000000000000004, 0.0001795858324921875,\n       0.00014659875000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.0006738107530478319,\n       0.00012435000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.00005550000000000001, 0.0005546722821167576,\n       0.00013675893750000003, 0.00005550000000000001, 0.00007717500000000002,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.0007719215799593356, 0.00009559875000000003, 0.00021162375000000001,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.00012968268750000001.\n  )\n  \n  pageRanks19: expected = (\n    expected,\n       0.00005550000000000001, 0.00027164788125, 0.00005550000000000001,\n       0.0014103401638943945, 0.00015154476984375004, 0.0005737931960558594,\n       0.0008436621533431052, 0.00012457009687500003, 0.00019145643750000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00010267500000000002, 0.000030000000000000004, 0.0002807485055871094,\n       0.0005178079962573242, 0.000030000000000000004, 0.00042718429824335937,\n       0.000030000000000000004, 0.000030000000000000004, 0.00009885000000000002,\n       0.00008100000000000002, 0.00007717500000000002, 0.000030000000000000004,\n       0.0009962234120309377, 0.000030000000000000004, 0.0002712076875,\n       0.0007484966368463475, 0.000030000000000000004, 0.000030000000000000004,\n       0.00021782324186718748, 0.0007975849074420704, 0.00005550000000000001,\n       0.0014440971395321093, 0.0004298739782575976, 0.000030000000000000004,\n       0.00016827375, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.0010549562700050393,\n       0.000030000000000000004, 0.00009559875000000003, 0.000030000000000000004,\n       0.000126919125, 0.000183092596875, 0.00045689434595333993,\n       0.000030000000000000004, 0.0006202840925404099, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.00005550000000000001,\n       0.00041851013033476574, 0.0009673196422284764, 0.00011402250000000001,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.00024139500000000002, 0.00015881305436718754,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.0005228328479950585, 0.000030000000000000004,\n       0.00021283083234375, 0.000030000000000000004, 0.0007436318898950389,\n       0.0004801294072429297, 0.00010267500000000002, 0.000502228642298047,\n       0.000030000000000000004, 0.000572949911904863, 0.00005550000000000001,\n       0.000030000000000000004, 0.00005550000000000001, 0.00007717500000000002,\n       0.00005550000000000001, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.000269925119280293, 0.0007819586751550391,\n       0.00005550000000000001, 0.000030000000000000004, 0.0007033901825952341,\n       0.00007717500000000002, 0.000165730284375, 0.00008100000000000002,\n       0.0010263752493400197, 0.000030000000000000004, 0.00014299384687500004,\n       0.000030000000000000004, 0.0002240326875, 0.000030000000000000004,\n       0.000030000000000000004, 0.0001584339375, 0.00045708025931367194,\n       0.00007717500000000002, 0.00047436583249218747, 0.000030000000000000004,\n       0.0002730541168671876, 0.000030000000000000004, 0.00016225893750000003,\n       0.000030000000000000004, 0.00040197340380373055, 0.000030000000000000004.\n  )\n  \n  pageRanks20: expected = (\n    expected,\n       0.000261367875, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.00013894875000000002, 0.000030000000000000004,\n       0.0002513864773359376, 0.00005550000000000001, 0.000030000000000000004,\n       0.00047612431834921886, 0.00007717500000000002, 0.00007717500000000002,\n       0.000030000000000000004, 0.0006952168221796875, 0.00012109875000000002,\n       0.00005550000000000001, 0.00007717500000000002, 0.000030000000000000004,\n       0.001107573809079551, 0.000030000000000000004, 0.00007717500000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00018431305436718753, 0.000030000000000000004, 0.000165730284375,\n       0.00030354806250000013, 0.00040802521613302745, 0.0007408627669822461,\n       0.0003570662890816407, 0.00028091394375000006, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.00007717500000000002,\n       0.0001356975, 0.0004396857337185352, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00011125893750000003, 0.000030000000000000004, 0.00005550000000000001,\n       0.00008100000000000002, 0.000030000000000000004, 0.00008100000000000002,\n       0.00038478386950781257, 0.000030000000000000004, 0.0007459325985840232,\n       0.0003567720534166603, 0.000030000000000000004, 0.00008100000000000002,\n       0.0001356975, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.00017798000625, 0.0014359547638245706,\n       0.00009559875000000003, 0.000030000000000000004, 0.000030000000000000004,\n       0.00046789477015955094, 0.000030000000000000004, 0.00010650000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.000226919852484375,\n       0.00022297125, 0.000596758121936328, 0.000030000000000000004,\n       0.0006366992817095507, 0.000030000000000000004, 0.000030000000000000004,\n       0.00010267500000000002, 0.00007717500000000002, 0.00017196519375,\n       0.00007717500000000002, 0.000030000000000000004, 0.0002011018125,\n       0.000030000000000000004, 0.0002167318951183594, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00012109875000000002,\n       0.0008290133266141014, 0.000030000000000000004, 0.000183580284375,\n       0.00023110893750000005, 0.00005550000000000001, 0.000030000000000000004,\n       0.00028930645988302735, 0.0001649910962121094, 0.00005550000000000001,\n       0.000030000000000000004, 0.0003763601051910157, 0.00010267500000000002,\n       0.000030000000000000004, 0.0001573725, 0.00007717500000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.00007717500000000002,\n       0.000030000000000000004, 0.00007717500000000002, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.0004523801286034764, 0.00005550000000000001, 0.000030000000000000004,\n       0.0004951815598534765, 0.00008100000000000002, 0.00010267500000000002.\n  )\n  \n  pageRanks21: expected = (\n    expected,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00010267500000000002, 0.00009559875000000003,\n       0.000030000000000000004, 0.001175440344576426, 0.000030000000000000004,\n       0.000030000000000000004, 0.00035443770990195323, 0.000030000000000000004,\n       0.0003747032963148926, 0.00005550000000000001, 0.0005116082614710938,\n       0.000030000000000000004, 0.000030000000000000004, 0.00021331851984375,\n       0.00007717500000000002, 0.0008077201393309957, 0.000030000000000000004,\n       0.000030000000000000004, 0.000994534956437754, 0.000030000000000000004,\n       0.00011727375000000003, 0.000030000000000000004, 0.0009117984778980079,\n       0.00005550000000000001, 0.00007717500000000002, 0.00009559875000000003,\n       0.000030000000000000004, 0.000030000000000000004, 0.00036226694577816426,\n       0.000030000000000000004, 0.000030000000000000004, 0.00032663461605585945,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.00009559875000000003,\n       0.0006578930123802537, 0.00013293393750000003, 0.000030000000000000004,\n       0.000030000000000000004, 0.000146025, 0.0006895069584232615,\n       0.00012968268750000001, 0.000030000000000000004, 0.00007717500000000002,\n       0.00034956950625, 0.00005550000000000001, 0.00007717500000000002,\n       0.000030000000000000004, 0.00047335328654826193, 0.000030000000000000004,\n       0.00005550000000000001, 0.0003485537326737892, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.00020124834327152344,\n       0.000030000000000000004, 0.0005462430679701755, 0.0010715045568435355,\n       0.00007717500000000002, 0.0001356975, 0.00008100000000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00009559875000000003, 0.00005550000000000001, 0.001050337302045796,\n       0.0005798148140722265, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00008100000000000002, 0.000030000000000000004, 0.0005860187924074219,\n       0.000695229028248086, 0.00036895237500000005, 0.00005550000000000001,\n       0.00009559875000000003, 0.000030000000000000004, 0.00010267500000000002,\n       0.00022698333234375003, 0.000030000000000000004, 0.00018994875000000002,\n       0.00030363530370429697, 0.00005550000000000001, 0.000030000000000000004.\n  )\n    \n  pageRanks22: expected = (\n    expected,\n       0.000030000000000000004, 0.0012613613445382034, 0.0009061000272912988,\n       0.000030000000000000004, 0.000030000000000000004, 0.00044870342936718753,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00005550000000000001, 0.000030000000000000004, 0.00030216397748437506,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.0003228767387781642, 0.00009885000000000002, 0.00016338125625,\n       0.000030000000000000004, 0.00007717500000000002, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.0005762014488482618, 0.00005550000000000001,\n       0.000252516346875, 0.000030000000000000004, 0.00007717500000000002,\n       0.00043890087460225595, 0.000030000000000000004, 0.000030000000000000004,\n       0.00008100000000000002, 0.00016701787500000002, 0.00007717500000000002,\n       0.000030000000000000004, 0.0009819741968800392, 0.00047788861671875,\n       0.00005550000000000001, 0.00008100000000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.001424334953569922, 0.000030000000000000004,\n       0.000030000000000000004, 0.0003072850223830275, 0.00019267689499218754,\n       0.0002809656928125, 0.000174094125, 0.0001650225, 0.00007717500000000002,\n       0.000030000000000000004, 0.0011707606836439263, 0.000030000000000000004,\n       0.00008100000000000002, 0.00014277375000000002, 0.0011823230263219532,\n       0.000030000000000000004, 0.000030000000000000004, 0.00008100000000000002,\n       0.000030000000000000004, 0.00013244625000000002, 0.0006514792329670507,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.0003684399653628907.\n  )\n  \n  pageRanks23: expected = (\n    expected,\n       0.000030000000000000004, 0.00038739278765625003, 0.000030000000000000004,\n       0.00022297125000000003, 0.00028660922160039077, 0.00022708709554921871,\n       0.00005550000000000001, 0.000030000000000000004, 0.0006567602159249608,\n       0.00005550000000000001, 0.00005550000000000001, 0.0005183511222142771,\n       0.00201874207261627, 0.00037233539805243184, 0.00005550000000000001,\n       0.0004911306645736522, 0.000030000000000000004, 0.000030000000000000004,\n       0.0005789639421744336, 0.000030000000000000004, 0.000030000000000000004,\n       0.00023881851984375, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000258336721875, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00046646993601609374,\n       0.00005550000000000001, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00015865403437500001, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00017174509687500002,\n       0.00005550000000000001, 0.00019164351984375002, 0.000030000000000000004,\n       0.000030000000000000004, 0.0004902321882890625, 0.00011402250000000001,\n       0.00012968268750000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.00021589500000000002, 0.000030000000000000004, 0.00005550000000000001,\n       0.0010836219592849413, 0.0010891681019760942, 0.000030000000000000004,\n       0.00012435000000000001, 0.00005550000000000001, 0.0007079486145866796,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004.\n  )\n  \n  pageRanks24: expected = (\n    expected,\n       0.00007717500000000002, 0.0003419444918671875, 0.000030000000000000004,\n       0.00005550000000000001, 0.001505804961977207, 0.000030000000000000004,\n       0.00008100000000000002, 0.00032973896826562506, 0.00013675893750000003,\n       0.00007717500000000002, 0.0007428987645248242, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00009559875000000003, 0.000030000000000000004, 0.0004649452599635351,\n       0.000128175, 0.000030000000000000004, 0.0012289260041186134,\n       0.0005547659253248241, 0.0012735475711920707, 0.000030000000000000004,\n       0.000030000000000000004, 0.0006304702346261715, 0.00005550000000000001,\n       0.000030000000000000004, 0.00010267500000000002, 0.0006962683298203127,\n       0.0015407160072108007, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.00007717500000000002, 0.00005550000000000001,\n       0.000575346237916621, 0.0008075947471042188, 0.00005550000000000001,\n       0.00009559875000000003, 0.000030000000000000004, 0.0001513576875,\n       0.00007717500000000002, 0.00016444875, 0.000030000000000000004,\n       0.000030000000000000004, 0.00012109875000000002, 0.000030000000000000004,\n       0.0012133833776340236, 0.00016701787500000002, 0.0006743516353132419,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00028358187446328134, 0.0005657072281472655, 0.000128175,\n       0.00005550000000000001, 0.000030000000000000004, 0.00010267500000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.00007717500000000002,\n       0.00005550000000000001, 0.00010267500000000002, 0.00010267500000000002,\n       0.0005714230341351562, 0.0003404881216429688, 0.0005203748888714452,\n       0.000030000000000000004, 0.00039713555163551777, 0.0003546995317031251,\n       0.0004783518928479491, 0.000030000000000000004, 0.00012052500000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.00044235231887617196, 0.000030000000000000004,\n       0.00016444875, 0.00019609428398671873, 0.000126919125,\n       0.000030000000000000004, 0.000030000000000000004, 0.00007717500000000002,\n       0.00005550000000000001, 0.00005550000000000001, 0.000030000000000000004,\n       0.00008100000000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.0001677, 0.000030000000000000004, 0.00005550000000000001.\n  )\n  \n  pageRanks25: expected = (\n    expected,\n       0.000030000000000000004, 0.000030000000000000004, 0.00034297342150898445,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.00007717500000000002, 0.00016792009687500002,\n       0.000030000000000000004, 0.000030000000000000004, 0.00010267500000000002,\n       0.000128175, 0.00040291446016097664, 0.00007717500000000002,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00007717500000000002, 0.00037065834674240237, 0.000030000000000000004,\n       0.0006004148802589451, 0.000030000000000000004, 0.00005550000000000001,\n       0.00010267500000000002, 0.00019016884687500003, 0.000030000000000000004,\n       0.00007717500000000002, 0.00008100000000000002, 0.0006253264456486521,\n       0.00005550000000000001, 0.000030000000000000004, 0.0010081750473936526,\n       0.0001584339375, 0.00015007009687500002, 0.000425316405686543,\n       0.00032775693480585947, 0.00016792009687500002, 0.00005550000000000001,\n       0.000030000000000000004, 0.000770613605453125, 0.000030000000000000004,\n       0.000030000000000000004, 0.0010328207671150588, 0.0001801089375,\n       0.000030000000000000004, 0.00005550000000000001, 0.0005880984259152342,\n       0.00009885000000000002, 0.00005550000000000001, 0.0002693696017992188,\n       0.000030000000000000004, 0.000030000000000000004, 0.0005425831398122849,\n       0.000030000000000000004, 0.00028088092921875, 0.00010267500000000002,\n       0.0006764355701484372, 0.00008100000000000002, 0.0003437430909375001,\n       0.0009308938220033006, 0.0009178192984247847, 0.0007719799011481251,\n       0.00007717500000000002, 0.00013675893750000003, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00009885000000000002,\n       0.00014810643750000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.0006161561722175781,\n       0.002341625584141152, 0.0002463233892566407, 0.0014496255159246877,\n       0.00039820903892660153, 0.000030000000000000004, 0.00007717500000000002,\n       0.00005550000000000001, 0.0004494569376072462, 0.00005550000000000001.\n  )\n  \n  pageRanks26: expected = (\n    expected,\n       0.0007375958831105469, 0.00005550000000000001, 0.000030000000000000004,\n       0.00019691513046093753, 0.000030000000000000004, 0.0006960112701089452,\n       0.000030000000000000004, 0.0001356975, 0.00010267500000000002,\n       0.00012457009687500003, 0.00009559875000000003, 0.00028669488604804693,\n       0.0005773723220977929, 0.0025455574471148447, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.0008289915908865819,\n       0.00012435000000000001, 0.000254291625, 0.000030000000000000004,\n       0.000030000000000000004, 0.0003034902985243946, 0.00031878986671875003,\n       0.0006200913580648829, 0.00089866348489084, 0.000030000000000000004,\n       0.00024847125000000003, 0.000030000000000000004, 0.00044653863884943365,\n       0.0009588353839884179, 0.000030000000000000004, 0.00005550000000000001,\n       0.0004802001794933595, 0.000030000000000000004, 0.00007717500000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.0005993897213728708, 0.000030000000000000004, 0.000030000000000000004,\n       0.00012435000000000001, 0.0006565863834296874, 0.0004414859974607228,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00010267500000000002, 0.000030000000000000004, 0.00011125893750000003,\n       0.000030000000000000004, 0.000030000000000000004, 0.00046621688976466807,\n       0.000030000000000000004, 0.00007717500000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.0003956887727812501, 0.000187405284375, 0.00008100000000000002,\n       0.00008100000000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000322784383514668, 0.00005550000000000001,\n       0.00013588458234375003, 0.00005550000000000001, 0.000030000000000000004,\n       0.00013293393750000003, 0.00012109875000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.0002027230162402734, 0.00007717500000000002,\n       0.000030000000000000004, 0.00005550000000000001, 0.00011727375000000003,\n       0.000030000000000000004, 0.0002919278240625, 0.000030000000000000004,\n       0.000030000000000000004, 0.00007717500000000002, 0.000030000000000000004.\n  )\n  \n  pageRanks27: expected = (\n    expected,\n       0.00005550000000000001, 0.0011767052391037309, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.00007717500000000002, 0.00007717500000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00015361125,\n       0.0017282723083981836, 0.00005550000000000001, 0.000030000000000000004,\n       0.0007795432040711617, 0.00007717500000000002, 0.00008100000000000002,\n       0.00014985, 0.00005550000000000001, 0.000030000000000000004,\n       0.0003018932018828127, 0.00035541894550021494, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.0007141020085688866, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00011125893750000003,\n       0.001132409535121133, 0.00024089480953125002, 0.00022514327545312499,\n       0.000030000000000000004, 0.00005550000000000001, 0.0004311059424464845,\n       0.000128175, 0.00019035592921875, 0.000030000000000000004, 0.0001768576875,\n       0.0009238328865187112, 0.000030000000000000004, 0.00005550000000000001,\n       0.00008100000000000002, 0.00012435000000000001, 0.00012109875000000002,\n       0.00005550000000000001, 0.000030000000000000004, 0.0001965018949921875,\n       0.00007717500000000002, 0.00005550000000000001, 0.000340432358860547,\n       0.000030000000000000004, 0.00009885000000000002, 0.00009885000000000002,\n       0.000030000000000000004, 0.00008100000000000002, 0.0006406874962545115,\n       0.00047452478709895517, 0.0010634564139578517, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000164668846875,\n       0.00007717500000000002, 0.00008100000000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.00014076403125000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004.\n  )\n  \n  pageRanks28: expected = (\n    expected,\n       0.000030000000000000004, 0.00031425467936718754, 0.000030000000000000004,\n       0.000030000000000000004, 0.00013244625000000002, 0.00011125893750000003,\n       0.00019459416468749997, 0.001184899122552129, 0.0006817205711949704,\n       0.00005550000000000001, 0.00007717500000000002, 0.00005550000000000001,\n       0.0005271594965196095, 0.0010400870586408399, 0.0004752608268892381,\n       0.000030000000000000004, 0.00020129625, 0.000030000000000000004,\n       0.00064671966671541, 0.0002982153750000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.0003997243869443556, 0.00048734821359374986,\n       0.0004759093776406251, 0.00011727375000000003, 0.000030000000000000004,\n       0.0005440875227589844, 0.00005550000000000001, 0.00019582394999999997,\n       0.00037308581183710947, 0.00005550000000000001, 0.00005550000000000001,\n       0.00008100000000000002, 0.00005550000000000001, 0.000030000000000000004,\n       0.0004962196445816407, 0.00011727375000000003, 0.000164668846875,\n       0.00005550000000000001, 0.00013588458234375003, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00012109875000000002, 0.00005550000000000001,\n       0.000030000000000000004, 0.00007717500000000002, 0.000030000000000000004,\n       0.00020380225558710936, 0.00010267500000000002, 0.000030000000000000004,\n       0.00009559875000000003, 0.000030000000000000004, 0.00022728393750000005,\n       0.00011402250000000001, 0.000030000000000000004, 0.0006183836193906247,\n       0.0001730326875, 0.00008100000000000002, 0.0012089610287725784,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.0010155726653473343, 0.000030000000000000004, 0.000030000000000000004,\n       0.00016119750000000003, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.00005550000000000001, 0.000192737971875,\n       0.000030000000000000004, 0.0006722068841278708, 0.0010718436839313866,\n       0.000030000000000000004, 0.001128313168464766, 0.002193723830047618,\n       0.00022640958234375002, 0.000030000000000000004, 0.00025480590886054686,\n       0.0008077473013638865, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.00008100000000000002,\n       0.0005865207417187499, 0.000030000000000000004, 0.00017579625,\n       0.00008100000000000002, 0.000030000000000000004, 0.00005550000000000001,\n       0.00022315833234375003, 0.00014277375000000002, 0.00005550000000000001,\n       0.00010267500000000002, 0.0003722072014756055, 0.000030000000000000004,\n       0.000030000000000000004, 0.00017598333234375, 0.0006452517980099412,\n       0.000174094125, 0.00024649398358593755, 0.000030000000000000004,\n       0.00011125893750000003, 0.00044401822041662117, 0.000030000000000000004.\n  )\n  \n  pageRanks29: expected = (\n    expected,\n       0.00012109875000000002, 0.00008100000000000002, 0.0004345341423233984,\n       0.0016198246023303518, 0.00007717500000000002, 0.00024390100558710937,\n       0.00023174226984375002, 0.00016827375000000002, 0.000030000000000000004,\n       0.00023969287499999998, 0.000030000000000000004, 0.00029862255421875006,\n       0.0002884303875000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.0012822416701354098, 0.00011727375000000003,\n       0.00019875278437500002, 0.00005550000000000001, 0.000030000000000000004,\n       0.00005550000000000001, 0.00013293393750000003, 0.000030000000000000004,\n       0.000030000000000000004, 0.000231320375, 0.00011727375000000003,\n       0.000030000000000000004, 0.00013293393750000003, 0.000030000000000000004,\n       0.00007717500000000002, 0.000030000000000000004, 0.0006375577699699217,\n       0.00013293393750000003, 0.0005119848858394532, 0.00012968268750000001,\n       0.00005550000000000001, 0.00009885000000000002, 0.00019747261913185545,\n       0.00005550000000000001, 0.000030000000000000004, 0.00005550000000000001,\n       0.0002687487898359375, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00005550000000000001, 0.00007717500000000002, 0.00005550000000000001,\n       0.00005550000000000001, 0.00010267500000000002, 0.00012052500000000002,\n       0.00018287250000000003, 0.000030000000000000004, 0.00027437842921875004,\n       0.00025469880421875006, 0.00021870000000000003, 0.001054292033974219,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00008100000000000002, 0.00005550000000000001, 0.0002522608324921875,\n       0.00017904144375, 0.0000880125, 0.00008100000000000002,\n       0.0008665907698721879, 0.00009559875000000003, 0.00011727375000000003,\n       0.00005550000000000001, 0.00005550000000000001, 0.000195405039984375,\n       0.000030000000000000004, 0.00015154476984375004, 0.000030000000000000004,\n       0.00005550000000000001, 0.00005550000000000001, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.00009559875000000003, 0.000030000000000000004, 0.0004193817696888867,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00007717500000000002, 0.00020620815124218752, 0.00011402250000000001,\n       0.00034031658501562504, 0.00008100000000000002, 0.00016225893750000003,\n       0.000030000000000000004, 0.00016444875000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00012457009687500003, 0.000030000000000000004, 0.000030000000000000004,\n       0.0013239555484927151, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.0003249621588382814, 0.000030000000000000004,\n       0.000030000000000000004, 0.002044314609656622, 0.000030000000000000004.\n  )\n  \n  pageRanks30: expected = (\n    expected,\n       0.000030000000000000004, 0.000030000000000000004, 0.0002445528608917969,\n       0.000030000000000000004, 0.0005265423747665818, 0.000140230284375,\n       0.00005550000000000001, 0.00011125893750000003, 0.000030000000000000004,\n       0.00009559875000000003, 0.000030000000000000004, 0.00035159226984375006,\n       0.00009885000000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.00012435000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.0006776933182608983, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00011402250000000001, 0.000030000000000000004,\n       0.00011125893750000003, 0.00022071992883046875, 0.000030000000000000004,\n       0.000030000000000000004, 0.00015412125000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00005550000000000001, 0.0003944472271875, 0.00014277375000000002,\n       0.000030000000000000004, 0.0003893728637121095, 0.00005550000000000001,\n       0.0005825809400868945, 0.000030000000000000004, 0.00005550000000000001,\n       0.00019546851984375, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.00022476706823554686, 0.00009559875000000003,\n       0.00007717500000000002, 0.000030000000000000004, 0.0004692964517755665,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00008100000000000002, 0.0006707026050272654,\n       0.000030000000000000004, 0.000128175, 0.0010464823826843753,\n       0.00013293393750000003, 0.00005550000000000001, 0.00009885000000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00009885000000000002, 0.00009559875000000003, 0.00011125893750000003,\n       0.00005550000000000001, 0.0011688491673253515, 0.00038341672349904315,\n       0.00033088877587617195, 0.000030000000000000004, 0.00040050305411792956,\n       0.0003604310280146681, 0.00016827375000000002, 0.00005550000000000001,\n       0.00005550000000000001, 0.00005550000000000001, 0.00005550000000000001,\n       0.000030000000000000004, 0.00009559875000000003, 0.000030000000000000004.\n  )\n  \n  pageRanks31: expected = (\n    expected,\n       0.00060983427609375, 0.000030000000000000004, 0.00005550000000000001,\n       0.00014985, 0.000030000000000000004, 0.00048470548947291976,\n       0.000030000000000000004, 0.00005550000000000001, 0.00016827375,\n       0.00007717500000000002, 0.00005550000000000001, 0.00020129625,\n       0.00008100000000000002, 0.00018820518749999997, 0.00022042778437499996,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00005550000000000001, 0.00007717500000000002, 0.0007755538548972265,\n       0.000030000000000000004, 0.0006086423521652343, 0.00010267500000000002,\n       0.0006501657417822068, 0.0002758531021875, 0.00005550000000000001,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.0009579667596042187, 0.000030000000000000004, 0.00007717500000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.00008100000000000002,\n       0.00021845292093749998, 0.00040177039710841806, 0.00043681785095626963,\n       0.0003784534574986133, 0.000030000000000000004, 0.00026525375625,\n       0.000030000000000000004, 0.0002016704146875, 0.0016676698321384962,\n       0.0016026092253459765, 0.00005550000000000001, 0.00008100000000000002,\n       0.00005550000000000001, 0.00011125893750000003, 0.000030000000000000004,\n       0.000030000000000000004, 0.000268820838890625, 0.000030000000000000004,\n       0.00005550000000000001, 0.00005550000000000001, 0.00040044269215550797,\n       0.00013788125625000002, 0.0010699961603220117, 0.000030000000000000004,\n       0.000146025, 0.00008100000000000002, 0.0001801089375, 0.000927249592168359,\n       0.00025420596890625007, 0.00030216799120429697, 0.0003564819935984766,\n       0.000030000000000000004, 0.000030000000000000004, 0.0005913996994322457,\n       0.000030000000000000004, 0.000030000000000000004, 0.00031262326397560547,\n       0.0008478974921164453, 0.00005550000000000001, 0.000030000000000000004,\n       0.00024811154062500003, 0.000030000000000000004, 0.00005550000000000001,\n       0.00009559875000000003, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.00007717500000000002,\n       0.00008100000000000002, 0.00046281358580802727, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.0004620340538085939,\n       0.000030000000000000004, 0.00008100000000000002, 0.00010267500000000002,\n       0.000030000000000000004, 0.0004924743943451367, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.0006910466454180467,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.0008784156453262499, 0.000030000000000000004.\n  )\n  \n  pageRanks32: expected = (\n    expected,\n       0.00009559875000000003, 0.00005550000000000001, 0.000030000000000000004,\n       0.0003290759292187501, 0.00007717500000000002, 0.000030000000000000004,\n       0.00009885000000000002, 0.0002467391346093751, 0.000770629669361074,\n       0.000030000000000000004, 0.00005550000000000001, 0.00035637197413966804,\n       0.0006510181400392773, 0.0001932, 0.000030000000000000004,\n       0.00013293393750000003, 0.00012109875000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.0005881109660193553, 0.0006697311012689257,\n       0.000030000000000000004, 0.000030000000000000004, 0.0019048124731323435,\n       0.000030000000000000004, 0.0012570390195532622, 0.000817076816654082,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00037593731782833994, 0.0003176617982433595, 0.00005550000000000001,\n       0.00005550000000000001, 0.0009558905795487891, 0.0001356975,\n       0.00007717500000000002, 0.002363161256569453, 0.000030000000000000004,\n       0.00008100000000000002, 0.0003379288264756056, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00010267500000000002, 0.000030000000000000004, 0.0002601929146875,\n       0.0002584977130570313, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.0006118566301355858, 0.00013675893750000003,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00019853268750000003, 0.000030000000000000004,\n       0.00005550000000000001, 0.00005550000000000001, 0.000030000000000000004,\n       0.00008100000000000002, 0.00008100000000000002, 0.000030000000000000004,\n       0.00005550000000000001, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00007717500000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.00011125893750000003,\n       0.00007717500000000002, 0.00017174509687500002, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00015843393750000003, 0.00005550000000000001,\n       0.000030000000000000004, 0.00012968268750000001, 0.00005550000000000001,\n       0.00007717500000000002, 0.00031165253983593755, 0.0004989153507442577,\n       0.0002587445625, 0.00005550000000000001, 0.00038396702839960947,\n       0.00045063995922013693, 0.0009222551727412307, 0.000030000000000000004,\n       0.00005550000000000001, 0.00012457009687500003, 0.000030000000000000004,\n       0.00008100000000000002, 0.00008100000000000002, 0.000030000000000000004,\n       0.00014330527412167969, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00047010862846427726, 0.00035199944906250005,\n       0.0003710352612187501, 0.00011727375000000003, 0.0012424059491165434.\n  )\n\n  pageRanks33: expected = (\n    expected,\n       0.000030000000000000004, 0.00007717500000000002, 0.0004125731167599415,\n       0.00008100000000000002, 0.0002748134751562501, 0.000030000000000000004,\n       0.000030000000000000004, 0.00023476058810156252, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.00009559875000000003,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000332562522531465, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00007717500000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.00015354144375,\n       0.00012109875000000002, 0.0002386314375, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00007717500000000002, 0.000030000000000000004, 0.00009885000000000002,\n       0.000030000000000000004, 0.0009038323984436134, 0.00007717500000000002,\n       0.00005550000000000001, 0.0009495415982433593, 0.00039800205690646495,\n       0.000030000000000000004, 0.00009559875000000003, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00039053699136197274,\n       0.00005550000000000001, 0.00012968268750000001, 0.000030000000000000004,\n       0.0006424087503536033, 0.00011727375000000003, 0.0007974356282954882,\n       0.00005550000000000001, 0.00013293393750000003, 0.00005550000000000001,\n       0.000030000000000000004, 0.002784270476832207, 0.00007717500000000002,\n       0.0010764892763057425, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.0002833907783996095, 0.0007036298547836328,\n       0.00005550000000000001, 0.00046026382205075194, 0.0013872956926727733,\n       0.00007717500000000002, 0.00009559875000000003, 0.00008100000000000002,\n       0.00005550000000000001, 0.00007717500000000002, 0.000030000000000000004,\n       0.0003395341507054688, 0.000030000000000000004, 0.0005002082528993947,\n       0.000030000000000000004, 0.00007717500000000002, 0.0007778580435433202,\n       0.000030000000000000004, 0.00005550000000000001, 0.0007483684404247458,\n       0.00011727375000000003, 0.00009559875000000003, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.00012109875000000002,\n       0.0006657233743404492, 0.000030000000000000004, 0.000548018287406992,\n       0.00042246069565507797, 0.001355053843909375, 0.0008567852761221873,\n       0.00016119750000000003, 0.00016701787500000002, 0.00007717500000000002,\n       0.00007717500000000002, 0.00020443397718749996, 0.00011402250000000001,\n       0.00009559875000000003, 0.00014277375000000002, 0.00005550000000000001,\n       0.000030000000000000004, 0.00009559875000000003, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00008100000000000002, 0.000030000000000000004, 0.00009559875000000003.\n  )\n  \n  pageRanks34: expected = (\n    expected,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00017152500000000004, 0.000030000000000000004, 0.0005834868354039061,\n       0.000030000000000000004, 0.00008100000000000002, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.00028394420437500005,\n       0.00010267500000000002, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.0003260878243371094, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.000128175,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000192737971875,\n       0.00009885000000000002, 0.0005593131134316015, 0.00007717500000000002,\n       0.0003434709373674024, 0.000030000000000000004, 0.000030000000000000004,\n       0.00033521453983593764, 0.00010267500000000002, 0.00011727375000000003,\n       0.0010148410295049998, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00007717500000000002,\n       0.00009885000000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.00019744738492187498, 0.00019875278437500002, 0.00013031062500000001,\n       0.000030000000000000004, 0.00020403750000000002, 0.0005788974922679687,\n       0.000030000000000000004, 0.000030000000000000004, 0.00017521644374999997,\n       0.0003113064375, 0.000030000000000000004, 0.00007717500000000002,\n       0.000030000000000000004, 0.00040593012538185554, 0.00015119241562500002,\n       0.0020183828489022167, 0.000030000000000000004, 0.000030000000000000004,\n       0.0010626563778712694, 0.00005550000000000001, 0.00005550000000000001,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.00010267500000000002, 0.000030000000000000004,\n       0.0010527559032889554, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00011727375000000003, 0.00014985,\n       0.000030000000000000004, 0.000030000000000000004, 0.0008434553828328515,\n       0.0004977945566349413, 0.00005550000000000001, 0.0006722223484265624,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00005550000000000001, 0.000030000000000000004, 0.0006747054431943555,\n       0.000210941625, 0.0008963466727096389, 0.00005550000000000001,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.0001605102271875, 0.00005550000000000001, 0.000030000000000000004,\n       0.00009559875000000003, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00023775102609375, 0.0001932,\n       0.00005550000000000001, 0.000030000000000000004, 0.00005550000000000001,\n       0.00005550000000000001, 0.000030000000000000004, 0.00012109875000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.0013960562834876764,\n       0.00009885000000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.00007717500000000002, 0.00010267500000000002, 0.00005550000000000001.\n  )\n  \n  pageRanks35: expected = (\n    expected,\n       0.00005550000000000001, 0.00009885000000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00043246640566427745, 0.0002664178528851563, 0.000030000000000000004,\n       0.000030000000000000004, 0.0005632257407151952, 0.00047896735528576165,\n       0.000632508809124043, 0.000030000000000000004, 0.0016506434779794729,\n       0.00024059509687500002, 0.000030000000000000004, 0.000192517875,\n       0.000030000000000000004, 0.000030000000000000004, 0.00019853268750000003,\n       0.00005550000000000001, 0.0012807454091226561, 0.0006797589345724413,\n       0.00019668014138871093, 0.00038820125014843763, 0.00009885000000000002,\n       0.00005550000000000001, 0.00018010893750000003, 0.0012861574391040038,\n       0.00019382727609374998, 0.000803065772465078, 0.000030000000000000004,\n       0.000030000000000000004, 0.0004803804035068555, 0.000030000000000000004,\n       0.0004718426704453124, 0.00005550000000000001, 0.00010267500000000002,\n       0.0004208408546006056, 0.0001828725, 0.001204916585841094,\n       0.000687985769325869, 0.00021094162500000002, 0.00016827375,\n       0.00008100000000000002, 0.000030000000000000004, 0.00011727375000000003,\n       0.0003829687037402735, 0.000030000000000000004, 0.0002555475,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00011402250000000001, 0.00027699795761835936, 0.00010267500000000002,\n       0.00007717500000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00012457009687500003, 0.000030000000000000004,\n       0.000181390471875, 0.00007717500000000002, 0.00026633888046093747,\n       0.000030000000000000004, 0.000030000000000000004, 0.0002201722699921875,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00008100000000000002, 0.00005550000000000001, 0.00007717500000000002,\n       0.00030823986686718754, 0.00007717500000000002, 0.00009559875000000003,\n       0.000030000000000000004, 0.00007717500000000002, 0.00011125893750000003,\n       0.00005550000000000001, 0.00021162375000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.00010650000000000001, 0.00019303215886054686,\n       0.00011125893750000003, 0.000030000000000000004, 0.00009885000000000002,\n       0.000030000000000000004, 0.00005550000000000001, 0.00005550000000000001,\n       0.00026469084375000003, 0.000030000000000000004, 0.000030000000000000004.\n  )\n  \n  pageRanks36: expected = (\n    expected,\n       0.00005550000000000001, 0.000030000000000000004, 0.00019486807662404297,\n       0.000030000000000000004, 0.00005550000000000001, 0.00005550000000000001,\n       0.001238094285992715, 0.00005550000000000001, 0.000030000000000000004,\n       0.00007717500000000002, 0.0009582389058128515, 0.000030000000000000004,\n       0.00005550000000000001, 0.00009559875000000003, 0.000030000000000000004,\n       0.00024953268749999997, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.00010267500000000002, 0.000030000000000000004,\n       0.00011125893750000003, 0.0001513576875, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00010267500000000002,\n       0.00014257931250000002, 0.000030000000000000004, 0.001362380613464414,\n       0.000030000000000000004, 0.00007717500000000002, 0.00023734384687500003,\n       0.00031125545949474615, 0.00016887406781249998, 0.000030000000000000004,\n       0.00017962125, 0.000030000000000000004, 0.00032175329238164074,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.001066234109780723, 0.0001395225,\n       0.00010267500000000002, 0.00013293393750000003, 0.0004844613860603709,\n       0.0002699217076183594, 0.000030000000000000004, 0.00009559875000000003,\n       0.000030000000000000004, 0.000030000000000000004, 0.0005309502408943944,\n       0.000030000000000000004, 0.000030000000000000004, 0.0001356975,\n       0.00011402250000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.0010622049395273834, 0.00023004750000000002,\n       0.000030000000000000004, 0.0002491371986964844, 0.000030000000000000004,\n       0.00012435000000000001, 0.00005550000000000001, 0.00022138175531249998,\n       0.00007717500000000002, 0.0017936928663086918, 0.00042966960194765636,\n       0.000030000000000000004, 0.000030000000000000004, 0.0009841252989410156,\n       0.000261941499592793, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.00007717500000000002, 0.00005550000000000001,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.0001932, 0.000030000000000000004, 0.000030000000000000004.\n  )\n\n  pageRanks37: expected = (\n    expected,\n       0.00010267500000000002, 0.00043106509355255866, 0.0010437505899590234,\n       0.0002792762970273438, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.00018047532249609375, 0.00005550000000000001,\n       0.000030000000000000004, 0.00048641498056345683, 0.00024958621359375,\n       0.0003643005830224805, 0.000030000000000000004, 0.000030000000000000004,\n       0.0007504075031519922, 0.000030000000000000004, 0.0002680099635937501,\n       0.00005550000000000001, 0.0003932948035558594, 0.000030000000000000004,\n       0.000172545, 0.0003614907562500001, 0.000030000000000000004,\n       0.00022164824186718748, 0.0006228411419443552, 0.000030000000000000004,\n       0.000030000000000000004, 0.0005299478300855074, 0.000030000000000000004,\n       0.00007717500000000002, 0.00005550000000000001, 0.00008100000000000002,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00012968268750000001, 0.0003085340538527344, 0.00019853268750000003,\n       0.00005550000000000001, 0.0009653476063435351, 0.000030000000000000004,\n       0.0011345384625932814, 0.0008455575109275976, 0.00008100000000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.000128175, 0.00005550000000000001, 0.00005550000000000001,\n       0.00005550000000000001, 0.0004085092553125001, 0.00010267500000000002,\n       0.00005550000000000001, 0.00019645035749999996, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.0003811410199921876, 0.00007717500000000002, 0.0012464304642064259,\n       0.00020837250000000002, 0.0007725661289884177, 0.0005878685803759568,\n       0.00015865403437500001, 0.00011402250000000001, 0.00017303268749999998,\n       0.0001828725, 0.00009885000000000002, 0.00012052500000000002,\n       0.00010267500000000002, 0.0002678228812500001, 0.000030000000000000004,\n       0.000030000000000000004, 0.00007717500000000002, 0.000030000000000000004,\n       0.00023969287500000004, 0.0008607545337244333, 0.00005550000000000001,\n       0.000030000000000000004, 0.00007717500000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.00009885000000000002, 0.00005550000000000001,\n       0.000030000000000000004, 0.00012109875000000002, 0.00005550000000000001,\n       0.00007717500000000002, 0.00005550000000000001, 0.00026326623179687505,\n       0.000030000000000000004, 0.00005550000000000001, 0.00005550000000000001,\n       0.000030000000000000004, 0.0007833576583764941, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.00005550000000000001.\n  )\n  \n  pageRanks38: expected = (\n    expected,\n       0.00005550000000000001, 0.00010267500000000002, 0.0005110525401105469,\n       0.00019871976984375, 0.000030000000000000004, 0.000030000000000000004,\n       0.0003483386168671875, 0.00005550000000000001, 0.00005550000000000001,\n       0.00012435000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00042438202159986323,\n       0.00019396244308710937, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00019698280387499996, 0.000030000000000000004,\n       0.00007717500000000002, 0.00011125893750000003, 0.000030000000000000004,\n       0.00008100000000000002, 0.000030000000000000004, 0.00005550000000000001,\n       0.00005550000000000001, 0.00014299384687500004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00047081371679001953,\n       0.000030000000000000004, 0.0009089884096401953, 0.000030000000000000004,\n       0.000224376386859375, 0.00011402250000000001, 0.00005550000000000001,\n       0.0009667603782073827, 0.000030000000000000004, 0.00011125893750000003,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.00005550000000000001, 0.001241030682654688,\n       0.000030000000000000004, 0.0004823641678046876, 0.00009559875000000003,\n       0.00021509509687500002, 0.00034904545746992195, 0.0008725268335975779,\n       0.000030000000000000004, 0.0004102900824509962, 0.0002089040241216797,\n       0.000030000000000000004, 0.0003740019745820314, 0.0012997076386943947,\n       0.00005550000000000001, 0.00018994875000000002, 0.0006884943091336133,\n       0.00005550000000000001, 0.00010267500000000002, 0.00012435000000000001,\n       0.000030000000000000004, 0.00005550000000000001, 0.0011576753198899027,\n       0.000030000000000000004, 0.000649733662027949, 0.000030000000000000004,\n       0.000030000000000000004, 0.000492883398434199, 0.0007212162063932225,\n       0.000128175, 0.000030000000000000004, 0.000030000000000000004,\n       0.00036528014310937504, 0.0009957260430857229, 0.000030000000000000004,\n       0.001329195085524004, 0.0006927975738414062, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00008100000000000002,\n       0.000030000000000000004, 0.001100317863523008, 0.00005550000000000001,\n       0.00010267500000000002, 0.000030000000000000004, 0.000146025,\n       0.00008100000000000002, 0.000030000000000000004, 0.0006030464054154491.\n  )\n\n  pageRanks39: expected = (\n    expected,\n       0.00007717500000000002, 0.00014277375000000002, 0.00011727375000000003,\n       0.000030000000000000004, 0.0008181163542995311, 0.000030000000000000004,\n       0.00014277375000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.0014100132311993948, 0.00010267500000000002, 0.00009559875000000003,\n       0.0006551366364775194, 0.00007717500000000002, 0.00009559875000000003,\n       0.00008100000000000002, 0.00010267500000000002, 0.00005550000000000001,\n       0.0007480018415248242, 0.0005355432135937501, 0.00007717500000000002,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00027271537500000005, 0.000030000000000000004, 0.000030000000000000004,\n       0.00046871357410369156, 0.000030000000000000004, 0.00005550000000000001,\n       0.000128175, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.00009559875000000003, 0.00012968268750000001,\n       0.00013675893750000003, 0.0006451623310560742, 0.000030000000000000004,\n       0.00020930038125, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00025474342050342774, 0.000030000000000000004, 0.000030000000000000004,\n       0.0006523670799398827, 0.000030000000000000004, 0.00014919574171875,\n       0.000030000000000000004, 0.00009559875000000003, 0.00009559875000000003,\n       0.000204767596875, 0.000030000000000000004, 0.00009559875000000003,\n       0.000030000000000000004, 0.00009885000000000002, 0.00007717500000000002,\n       0.000030000000000000004, 0.00007717500000000002, 0.0004906871529635349,\n       0.000030000000000000004, 0.00014277375000000002, 0.000030000000000000004,\n       0.00030763942364748055, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.0001677, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00007717500000000002, 0.00005550000000000001, 0.000030000000000000004,\n       0.00008100000000000002, 0.00008100000000000002, 0.00014810643750000002,\n       0.00008100000000000002, 0.000030000000000000004, 0.0004704629513872852,\n       0.000205829034375, 0.00009885000000000002, 0.00019853268750000003,\n       0.00012968268750000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.00013588458234375003, 0.000030000000000000004, 0.0007767642435570312,\n       0.000030000000000000004, 0.0006168027873406638, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004.\n  )\n  \n  pageRanks40: expected = (\n    expected,\n       0.00008100000000000002, 0.000030000000000000004, 0.00023329875,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00007717500000000002, 0.000030000000000000004,\n       0.0005132322826406251, 0.0005522987924888865, 0.00009885000000000002,\n       0.00009885000000000002, 0.0002266018125, 0.0015834187107174223,\n       0.00033898444402460947, 0.0008324012817950196, 0.000030000000000000004,\n       0.000180329034375, 0.0008978864941825587, 0.00005550000000000001,\n       0.00014299384687500004, 0.0001801089375, 0.00005550000000000001,\n       0.000030000000000000004, 0.0005692153571463084, 0.0005368253732539843,\n       0.00005550000000000001, 0.00005550000000000001, 0.000030000000000000004,\n       0.0006468409577320312, 0.000030000000000000004, 0.0003211811310781251,\n       0.000030000000000000004, 0.0006582275594396678, 0.0007064921391304686,\n       0.000030000000000000004, 0.000030000000000000004, 0.00010650000000000001,\n       0.001123349208692012, 0.00013894875000000002, 0.00017174509687500002,\n       0.000768254994630996, 0.000030000000000000004, 0.00007717500000000002,\n       0.000030000000000000004, 0.001407102531453867, 0.000030000000000000004,\n       0.0009750694000490038, 0.00005550000000000001, 0.00005550000000000001,\n       0.00024731642339179686, 0.00015154476984375004, 0.000030000000000000004,\n       0.00035790707901488293, 0.00022954649988632815, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00027896925010724617, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00037515426984375004,\n       0.000030000000000000004, 0.00010267500000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.00007717500000000002, 0.000030000000000000004,\n       0.0009195100252817186, 0.00010267500000000002, 0.0011678366105352931,\n       0.0004596703178347658, 0.000030000000000000004, 0.000030000000000000004,\n       0.0004559106924523828, 0.000030000000000000004, 0.0001823163804609375,\n       0.000030000000000000004, 0.000030000000000000004, 0.001121086223968906,\n       0.000030000000000000004, 0.00005550000000000001, 0.00004275000000000001,\n       0.00007717500000000002, 0.00011125893750000003, 0.000030000000000000004,\n       0.00007717500000000002, 0.000030000000000000004, 0.00014534287500000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004.\n  )\n  \n  pageRanks41: expected = (\n    expected,\n       0.0017556940398932423, 0.00015007009687500002, 0.000030000000000000004,\n       0.00011727375000000003, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.00005550000000000001, 0.000030000000000000004,\n       0.000168493846875, 0.000030000000000000004, 0.000030000000000000004,\n       0.000636605465767539, 0.0006222834791867967, 0.000030000000000000004,\n       0.00016225893750000003, 0.00020495467921875, 0.00019540503998437497,\n       0.000030000000000000004, 0.00008100000000000002, 0.00009559875000000003,\n       0.00008100000000000002, 0.000163766625, 0.0004007745255792969,\n       0.00005550000000000001, 0.00005550000000000001, 0.00007717500000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.00023427967921875,\n       0.00005550000000000001, 0.00005550000000000001, 0.00040445321618064444,\n       0.0002949046588605469, 0.00052845754028125, 0.000030000000000000004,\n       0.0004532404760482618, 0.00028161129623437505, 0.00023373894375000001,\n       0.000030000000000000004, 0.00005550000000000001, 0.0012445951359051468,\n       0.000030000000000000004, 0.000168493846875, 0.00057090017059375,\n       0.000030000000000000004, 0.0005946650262327733, 0.00005550000000000001,\n       0.00007717500000000002, 0.0001973778608917969, 0.0004028958548752149,\n       0.00010267500000000002, 0.000030000000000000004, 0.00012109875000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.0004724473638984376, 0.00007717500000000002, 0.00025497271615529296,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.0003436367774209181, 0.0006515472775947068, 0.000030000000000000004,\n       0.0007925057115101563, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00025811662500000007,\n       0.00005550000000000001, 0.000030000000000000004, 0.0003093791396384961,\n       0.000030000000000000004, 0.0004234529288368946, 0.0005038604170281249,\n       0.00012109875000000002, 0.00010267500000000002, 0.0001784913804609375,\n       0.0006189891913622458, 0.00005550000000000001, 0.00005550000000000001,\n       0.00005550000000000001, 0.000030000000000000004, 0.00008100000000000002,\n       0.00010650000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.0010110427299035549,\n       0.00005550000000000001, 0.00007717500000000002, 0.0012826222617107622,\n       0.0009419121841931444, 0.00010650000000000001, 0.00005550000000000001,\n       0.00013293393750000003, 0.0005449953795705271, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00009559875000000003,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.00009885000000000002, 0.0012708980017750392,\n       0.00005550000000000001, 0.00020881269375, 0.00035306008668643563,\n       0.000030000000000000004, 0.0005407651450046874, 0.0001356975.\n  )\n  \n  pageRanks42: expected = (\n    expected,\n       0.00005550000000000001, 0.00005550000000000001, 0.00022511452490337893,\n       0.000030000000000000004, 0.00021046892339179687, 0.00043287358488302733,\n       0.000030000000000000004, 0.00019783027718359373, 0.000030000000000000004,\n       0.00031611087217968756, 0.00005550000000000001, 0.0003520324635937501,\n       0.00011125893750000003, 0.000030000000000000004, 0.00005550000000000001,\n       0.0004311003574218751, 0.00010267500000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.0003175084025693555, 0.0011122127446247852,\n       0.00012435000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.0009516672924987891, 0.0007951100024036912, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.0004405921018214845,\n       0.0006293696852640232, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.00014277375000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.00008100000000000002, 0.00011125893750000003,\n       0.000221269125, 0.0002654379938572461, 0.00005550000000000001,\n       0.00010650000000000001, 0.000030000000000000004, 0.00015154476984375004,\n       0.00010267500000000002, 0.0003013663127651465, 0.000030000000000000004,\n       0.00009559875000000003, 0.00005550000000000001, 0.00009885000000000002,\n       0.000030000000000000004, 0.00028801585312500014, 0.00051896699171875,\n       0.000030000000000000004, 0.000030000000000000004, 0.00008100000000000002,\n       0.00005550000000000001, 0.00010267500000000002, 0.00007717500000000002,\n       0.00027813865045312505, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.0002295803240625, 0.000591690735639453,\n       0.00040644273358593757, 0.000030000000000000004, 0.00005550000000000001,\n       0.0004418071279275587, 0.00005550000000000001, 0.0004835387763812108,\n       0.001059485402328809, 0.000998035093129512, 0.00012052500000000002,\n       0.00010267500000000002, 0.0007237203894777343, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.00010267500000000002,\n       0.00005550000000000001, 0.00021695643750000001, 0.00007717500000000002,\n       0.00012968268750000001, 0.00012109875000000002, 0.000030000000000000004,\n       0.00005550000000000001, 0.0022970199819720605, 0.00005550000000000001,\n       0.00047827658859375005, 0.00005550000000000001, 0.00006825,\n       0.0005510104412360739, 0.0010187398686616798, 0.00011125893750000003,\n       0.00005550000000000001, 0.000030000000000000004, 0.00008100000000000002,\n       0.000030000000000000004, 0.00012968268750000001, 0.000030000000000000004,\n       0.00005550000000000001, 0.00013293393750000003, 0.00017321976984375,\n       0.00016225893750000003, 0.00019145643750000002, 0.00007717500000000002,\n       0.00031651012275117196, 0.00014659875000000002, 0.00039644005107951184.\n  )\n  \n  pageRanks43: expected = (\n    expected,\n       0.0002660132896875, 0.00005550000000000001, 0.00005550000000000001,\n       0.000152419125, 0.0016891438247597268, 0.00012457009687500003,\n       0.00016119750000000003, 0.00010267500000000002, 0.000030000000000000004,\n       0.00010267500000000002, 0.0009333136792756053, 0.000030000000000000004,\n       0.00019528143750000004, 0.00009885000000000002, 0.00005550000000000001,\n       0.0003461528180871094, 0.000030000000000000004, 0.00039424190589769544,\n       0.00033577812302578136, 0.000030000000000000004, 0.00005550000000000001,\n       0.00007717500000000002, 0.0002877893380792969, 0.000030000000000000004,\n       0.000030000000000000004, 0.0002240326875, 0.000030000000000000004,\n       0.00007717500000000002, 0.000030000000000000004, 0.00008100000000000002,\n       0.000030000000000000004, 0.0005661583932553319, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.0010921575166542774, 0.0014712415030663285, 0.000030000000000000004,\n       0.000030000000000000004, 0.00023186717123437498, 0.0011153109768279107,\n       0.00037087997203593765, 0.00005550000000000001, 0.00008100000000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.0005527790258255663,\n       0.00008100000000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00009559875000000003, 0.000128175,\n       0.00005550000000000001, 0.00009559875000000003, 0.0003304736308681447,\n       0.000030000000000000004, 0.00011125893750000003, 0.0018335073900723833,\n       0.000030000000000000004, 0.000030000000000000004, 0.00007717500000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00007717500000000002, 0.00010267500000000002, 0.000030000000000000004,\n       0.0001513576875, 0.00032466091776349617, 0.000030000000000000004,\n       0.000030000000000000004, 0.00022403268749999998, 0.0006712320912878907,\n       0.00024917903437500006, 0.000030000000000000004, 0.00025780846905468756,\n       0.000030000000000000004, 0.0008138743728837696, 0.000030000000000000004,\n       0.000030000000000000004, 0.0005576755996828122, 0.0006588155804808006,\n       0.00007717500000000002, 0.0005866007615345508, 0.00005550000000000001,\n       0.00029290500012617196, 0.0007023281972303903, 0.000030000000000000004,\n       0.0015980741978907033, 0.000030000000000000004, 0.00007717500000000002,\n       0.00005550000000000001, 0.00016827375000000002, 0.000030000000000000004,\n       0.00010267500000000002, 0.000030000000000000004, 0.000030000000000000004.\n  )\n  \n  pageRanks44: expected = (\n    expected,\n       0.000030000000000000004, 0.00012109875000000002, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.0009396548305022267,\n       0.00012109875000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.00009559875000000003, 0.001814793173989063, 0.000030000000000000004,\n       0.00009559875000000003, 0.00010267500000000002, 0.000030000000000000004,\n       0.002758934391622441, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.0003839836037885841, 0.000030000000000000004,\n       0.0008133136555286917, 0.00005550000000000001, 0.00007717500000000002,\n       0.000030000000000000004, 0.00010267500000000002, 0.00038753493443324235,\n       0.000030000000000000004, 0.00019609428398671875, 0.001827727958064629,\n       0.0007766777549231443, 0.002192770461927129, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.0006964689514820309,\n       0.000030000000000000004, 0.00009559875000000003, 0.0001356975,\n       0.000789890542953125, 0.00005550000000000001, 0.000030000000000000004,\n       0.00021036787500000001, 0.000030000000000000004, 0.00016444875000000002,\n       0.00008100000000000002, 0.00005550000000000001, 0.00017146863914296875,\n       0.00009559875000000003, 0.00043470567059683606, 0.000209654034375,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.0002679983892566408, 0.000030000000000000004,\n       0.000172545, 0.00012109875000000002, 0.00024865833234375003,\n       0.000030000000000000004, 0.00007717500000000002, 0.000030000000000000004,\n       0.00008100000000000002, 0.00015007009687500002, 0.00005550000000000001,\n       0.0005220628684277733, 0.0007966927069299414, 0.00018691759687499999,\n       0.0008192211742001366, 0.000030000000000000004, 0.0011461627584204495,\n       0.00012435000000000001, 0.00005550000000000001, 0.000030000000000000004,\n       0.00017303268749999998, 0.0005645964837343749, 0.0003273738042187501,\n       0.00013293393750000003, 0.000030000000000000004, 0.0011958616266875002,\n       0.00011727375000000003, 0.0006563778608917968, 0.00038789903437500006,\n       0.000030000000000000004, 0.00007717500000000002, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.00014277375000000002,\n       0.000030000000000000004, 0.00009559875000000003, 0.000030000000000000004,\n       0.0003000125285068556, 0.00009885000000000002, 0.0001945941646875,\n       0.00007717500000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.0001611975, 0.000030000000000000004, 0.00019422, 0.00005550000000000001.\n  )\n  \n  pageRanks45: expected = (\n    expected,\n       0.000030000000000000004, 0.000030000000000000004, 0.0003215274082826368,\n       0.00009559875000000003, 0.00008100000000000002, 0.0005578175908965235,\n       0.00007717500000000002, 0.00010650000000000001, 0.00007717500000000002,\n       0.0002650830054609375, 0.000030000000000000004, 0.00012109875000000002,\n       0.0003952191616555079, 0.00007717500000000002, 0.00009559875000000003,\n       0.00010650000000000001, 0.00030403575000000006, 0.00020817806250000002,\n       0.00011125893750000003, 0.0007993951805930079, 0.0009647913134157617,\n       0.000030000000000000004, 0.00007717500000000002, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000140230284375, 0.00015843393750000003,\n       0.0001573725, 0.00022963383274453124, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.00010267500000000002,\n       0.00005550000000000001, 0.00012109875000000002, 0.0005682106623220115,\n       0.000030000000000000004, 0.00007717500000000002, 0.00048354904214099615,\n       0.000171525, 0.000030000000000000004, 0.00008100000000000002,\n       0.00005550000000000001, 0.000030000000000000004, 0.0011088292365873393,\n       0.00005550000000000001, 0.00019399384687500003, 0.000030000000000000004,\n       0.00007717500000000002, 0.00010267500000000002, 0.000030000000000000004,\n       0.000478586195888496, 0.000030000000000000004, 0.00027036634687500004,\n       0.00013293393750000003, 0.000985747305325, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00007717500000000002, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00005550000000000001, 0.00005550000000000001, 0.000030000000000000004,\n       0.000187405284375, 0.00009559875000000003, 0.00037878833859375006,\n       0.000030000000000000004, 0.00025573217936718755, 0.000030000000000000004,\n       0.0004222222140789454, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00007717500000000002,\n       0.00009885000000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.0008828566442090232, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00007717500000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.000126919125, 0.000030000000000000004, 0.000030000000000000004,\n       0.0008706173606547655, 0.000030000000000000004, 0.000030000000000000004.\n  )\n  \n  pageRanks46: expected = (\n    expected,\n       0.000030000000000000004, 0.000030000000000000004, 0.001097905835669102,\n       0.000030000000000000004, 0.000030000000000000004, 0.0012911886927233205,\n       0.00010267500000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.0014471317232076367, 0.00007717500000000002, 0.00032919842311718756,\n       0.0006736807611742187, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.0005083643571588086, 0.00020877967921875,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.00010267500000000002, 0.00005550000000000001,\n       0.000030000000000000004, 0.000243164221875, 0.000267602784375,\n       0.00005550000000000001, 0.000030000000000000004, 0.00047918890923906253,\n       0.000030000000000000004, 0.0004517866978943946, 0.0015112480414817186,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00021090620749218748, 0.0005817136509740037, 0.000030000000000000004,\n       0.00005550000000000001, 0.0006902496070234765, 0.00005550000000000001,\n       0.00005550000000000001, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.00023004750000000002, 0.000030000000000000004,\n       0.00014810643750000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.0006170154330910936, 0.000165730284375, 0.00020927027636835936,\n       0.00042570324346896486, 0.0005386219151164453, 0.00007717500000000002,\n       0.0013819125144174025, 0.000030000000000000004, 0.0010520113375331644,\n       0.00009559875000000003, 0.0005797662982845508, 0.00015007009687500002,\n       0.00005550000000000001, 0.00005550000000000001, 0.00026522826441796886,\n       0.0001356975, 0.00009885000000000002, 0.0012027005989846294,\n       0.00005550000000000001, 0.00017685768750000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.00016119750000000003, 0.000030000000000000004,\n       0.00011727375000000003, 0.00015755958234375, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.0010036956054313869,\n       0.0001866975, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.0004468573575634569, 0.0007568851183328513,\n       0.00042272894573730486, 0.000030000000000000004, 0.00005550000000000001,\n       0.0003257730341351564, 0.0005692704913527343, 0.00019777118175802734,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.0002544981050078126,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.0009998740718150587, 0.000030000000000000004, 0.000030000000000000004,\n       0.00028684279252365243, 0.000030000000000000004, 0.00005550000000000001,\n       0.00022644259687500004, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.00011125893750000003, 0.00029678490030468754.\n  )\n  \n  pageRanks47: expected = (\n    expected,\n       0.000030000000000000004, 0.000030000000000000004, 0.00007717500000000002,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.00005550000000000001, 0.00090625993512791,\n       0.00007717500000000002, 0.000030000000000000004, 0.00021531519375,\n       0.0004893327048039453, 0.00008100000000000002, 0.00028449085474904296,\n       0.00011402250000000001, 0.000030000000000000004, 0.0004426083352713087,\n       0.000030000000000000004, 0.000168493846875, 0.000225540375,\n       0.00024176661889201175, 0.00010650000000000001, 0.00038301536889201183,\n       0.0003264409174306447, 0.000030000000000000004, 0.0007187389780083399,\n       0.0006355851256347263, 0.000030000000000000004, 0.000030000000000000004,\n       0.000944545681565801, 0.00044651261407503907, 0.00011727375000000003,\n       0.00008100000000000002, 0.0005137126510087695, 0.00007717500000000002,\n       0.000030000000000000004, 0.0001392675, 0.000030000000000000004,\n       0.00008100000000000002, 0.00005550000000000001, 0.00008100000000000002,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00014277375000000002, 0.00020859259687499998,\n       0.0001806826875, 0.00009559875000000003, 0.00012109875000000002,\n       0.000030000000000000004, 0.00006825, 0.00011125893750000003,\n       0.00011402250000000001, 0.00021219750000000002, 0.00005550000000000001,\n       0.0005975487986158006, 0.00005550000000000001, 0.000030000000000000004,\n       0.0006294703299214255, 0.00010267500000000002, 0.00005550000000000001,\n       0.000030000000000000004, 0.00024502556250000004, 0.000030000000000000004,\n       0.00021736361671874997, 0.000030000000000000004, 0.000478267900330039,\n       0.000030000000000000004, 0.000030000000000000004, 0.0005636191341747459,\n       0.000030000000000000004, 0.000030000000000000004, 0.0001610030625,\n       0.0003478678864488282, 0.000030000000000000004, 0.0008226126343261718,\n       0.00044772343749357427, 0.0010844268495790823, 0.00027328157421093753,\n       0.000030000000000000004, 0.00007717500000000002, 0.0004377152188212696,\n       0.00005550000000000001, 0.00007717500000000002, 0.0003810599095457033,\n       0.000030000000000000004, 0.0007371604510937501, 0.0010461534389142773,\n       0.00024611486671875007, 0.0008474182917279883, 0.00038903171229613285.\n  )\n  \n  pageRanks48: expected = (\n    expected,\n       0.00005550000000000001, 0.000030000000000000004, 0.00007717500000000002,\n       0.0007478200571626757, 0.000030000000000000004, 0.00013293393750000003,\n       0.0003705205402589845, 0.000030000000000000004, 0.00009559875000000003,\n       0.00015007009687500002, 0.00026467378371210936, 0.00013330032249609376,\n       0.00047262199203455097, 0.000168493846875, 0.00009559875000000003,\n       0.000030000000000000004, 0.00005550000000000001, 0.00019035592921875,\n       0.00005550000000000001, 0.0004023563457193946, 0.000792128087533164,\n       0.00005550000000000001, 0.000030000000000000004, 0.0004883296733917968,\n       0.00005550000000000001, 0.0004559052944855469, 0.000497331361295918,\n       0.00005550000000000001, 0.000400097954671875, 0.00005550000000000001,\n       0.000030000000000000004, 0.00005550000000000001, 0.00007717500000000002,\n       0.0001513576875, 0.000030000000000000004, 0.00011402250000000001,\n       0.00005550000000000001, 0.00010267500000000002, 0.0005869410960447462,\n       0.00005550000000000001, 0.00011727375000000003, 0.00014985,\n       0.00046397884894101556, 0.00013293393750000003, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.0004985444978679295,\n       0.00009559875000000003, 0.00029019763671093757, 0.00024614788125,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00004275000000000001, 0.00005550000000000001, 0.0002890909435165822,\n       0.000030000000000000004, 0.0009232520230490042, 0.00007717500000000002,\n       0.00007717500000000002, 0.000030000000000000004, 0.0002699518125,\n       0.000030000000000000004, 0.00009559875000000003, 0.000030000000000000004.\n  )\n  \n  pageRanks49: expected = (\n    expected,\n       0.0004820662698785156, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.0001584339375,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00011727375000000003, 0.0004580961996339844, 0.00005550000000000001,\n       0.0034371926123786135, 0.0007171233431230858, 0.000030000000000000004,\n       0.000030000000000000004, 0.0004940070602542576, 0.000030000000000000004,\n       0.00005550000000000001, 0.0020155847563304292, 0.00026344306061718757,\n       0.00025103522718749997, 0.00047311409130681634, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.0005740974556124608, 0.00005550000000000001, 0.00005550000000000001,\n       0.000030000000000000004, 0.00012109875000000002, 0.00005550000000000001,\n       0.000030000000000000004, 0.0003655747524131056, 0.0003691095187500001,\n       0.000128175, 0.0002538039375000001, 0.000185441625, 0.0004509094982433595,\n       0.000030000000000000004, 0.00009559875000000003, 0.000030000000000000004,\n       0.00012968268750000001, 0.00005550000000000001, 0.0013434953179166213,\n       0.00019364019375, 0.00008100000000000002, 0.000152419125,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00036471634687500003, 0.000030000000000000004, 0.00017557009687500002,\n       0.00005550000000000001, 0.000030000000000000004, 0.00009559875000000003,\n       0.00016225893750000003, 0.000140230284375, 0.0010686188597835936,\n       0.0005728017023122849, 0.000030000000000000004, 0.00028052439499218754,\n       0.0003154114045719142, 0.0003410776875000001, 0.000030000000000000004,\n       0.00007717500000000002, 0.00007717500000000002, 0.000585874040565371,\n       0.0008652517462578516, 0.0006117752634263864, 0.0006415838093136718,\n       0.00005550000000000001, 0.000987794997580957, 0.00007717500000000002,\n       0.0003370707326484376, 0.00007717500000000002, 0.00007717500000000002,\n       0.0011201223724816604, 0.000030000000000000004, 0.000030000000000000004,\n       0.00005550000000000001, 0.000030000000000000004, 0.00041637400038828116,\n       0.00030097138671093755, 0.0005901878716493943, 0.0009725682330679693,\n       0.0005054563544739061, 0.00008100000000000002, 0.0001744732418671875,\n       0.000030000000000000004, 0.00005550000000000001, 0.0011511606224924999,\n       0.00005550000000000001, 0.00017469574171875, 0.000030000000000000004,\n       0.00005550000000000001, 0.00005550000000000001, 0.00008100000000000002.\n  )\n  \n  pageRanks50: expected = (\n    expected,\n       0.00007717500000000002, 0.00017174509687500002, 0.0005585642724306445,\n       0.0004331871046195312, 0.000030000000000000004, 0.00007717500000000002,\n       0.0006780410787286913, 0.00019145643750000002, 0.0006755674858472655,\n       0.0004212642249228322, 0.00005550000000000001, 0.000030000000000000004,\n       0.00020085, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00011727375000000003, 0.000030000000000000004,\n       0.00005550000000000001, 0.00017730948300342773, 0.00007717500000000002,\n       0.000030000000000000004, 0.00008100000000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.00012109875000000002, 0.000030000000000000004,\n       0.0009763612694554688, 0.00024463889484375003, 0.00021184384687500003,\n       0.000030000000000000004, 0.00013675893750000003, 0.00007717500000000002,\n       0.000030000000000000004, 0.00036788708859375, 0.0012347261757795606,\n       0.000030000000000000004, 0.00023885153437500003, 0.0002056089375,\n       0.00020476759687499999, 0.000030000000000000004, 0.0009038579981077738,\n       0.00020235768750000003, 0.000030000000000000004, 0.00020859259687500004,\n       0.00005550000000000001, 0.00036820402530468756, 0.00005550000000000001,\n       0.00066419930620291, 0.00010267500000000002, 0.0003713825254372853,\n       0.00005550000000000001, 0.00010267500000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00005550000000000001, 0.0004132730735068556, 0.00011402250000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.000610537969854375,\n       0.00005550000000000001, 0.00005550000000000001, 0.000030000000000000004,\n       0.00005550000000000001, 0.00005550000000000001, 0.00231323575590872,\n       0.000030000000000000004, 0.00010267500000000002, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.0007635236087597262,\n       0.00005550000000000001, 0.000030000000000000004, 0.00012109875000000002,\n       0.00008100000000000002, 0.00007717500000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.0006835465769273435, 0.00010267500000000002,\n       0.000030000000000000004, 0.00011125893750000003, 0.0002674281846796875,\n       0.00089338520952625, 0.00007717500000000002, 0.00005550000000000001,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00010267500000000002, 0.001359938627840293, 0.00008100000000000002,\n       0.00014534287500000002, 0.00005550000000000001, 0.00010267500000000002,\n       0.000030000000000000004, 0.00008100000000000002, 0.00030859339458498054.\n  )\n  \n  pageRanks51: expected = (\n    expected,\n       0.00025607358488302737, 0.000030000000000000004, 0.00040411500814865246,\n       0.000030000000000000004, 0.00012968268750000001, 0.000030000000000000004,\n       0.00007717500000000002, 0.000030000000000000004, 0.00034456086915078134,\n       0.000030000000000000004, 0.000030000000000000004, 0.00010267500000000002,\n       0.00011727375000000003, 0.00009559875000000003, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.00012109875000000002, 0.00013293393750000003, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00011125893750000003,\n       0.000030000000000000004, 0.00005550000000000001, 0.0007807470633976951,\n       0.00005550000000000001, 0.000030000000000000004, 0.00005550000000000001,\n       0.00007717500000000002, 0.00005550000000000001, 0.00005550000000000001,\n       0.000030000000000000004, 0.0003173643442031251, 0.00009559875000000003,\n       0.000030000000000000004, 0.00010650000000000001, 0.000030000000000000004,\n       0.0006441722416652344, 0.00024267653437499997, 0.000030000000000000004,\n       0.00008100000000000002, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.00011125893750000003, 0.000030000000000000004,\n       0.00016827375000000002, 0.0002450773350314649, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.0005768196484567382,\n       0.000030000000000000004, 0.00007717500000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.0014809880060556444,\n       0.0003982600444914454, 0.000030000000000000004, 0.00005550000000000001,\n       0.00007717500000000002, 0.0006242420395359766, 0.000030000000000000004,\n       0.00016444875, 0.000030000000000000004, 0.0003311918156250001,\n       0.000030000000000000004, 0.00010267500000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.0008059152801275586, 0.0012004930497145903,\n       0.000030000000000000004, 0.0004951419985664452, 0.0004380695932937892,\n       0.000030000000000000004, 0.00010267500000000002, 0.00011727375000000003,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.0005296988262009961, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.00010650000000000001, 0.000030000000000000004, 0.0005620807610697853,\n       0.0005286613671070311, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004.\n  )\n  \n  pageRanks52: expected = (\n    expected,\n       0.00011125893750000003, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.000760817167551992, 0.000030000000000000004, 0.00010650000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.0003138477416337697,\n       0.000030000000000000004, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004, 0.0008371103585068553, 0.00007717500000000002,\n       0.0004518288427982617, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.0002608801875,\n       0.00005550000000000001, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.000164668846875, 0.00011727375000000003, 0.0003858458493481542,\n       0.00007717500000000002, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.001094358015352618, 0.00035263408031250003,\n       0.000370735670154336, 0.00008100000000000002, 0.0007597855260648826,\n       0.000030000000000000004, 0.000030000000000000004, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00009885000000000002,\n       0.00005550000000000001, 0.00014277375000000002, 0.00012457009687500003,\n       0.00005550000000000001, 0.00016444875000000002, 0.000030000000000000004,\n       0.000030000000000000004, 0.00007717500000000002, 0.00009559875000000003,\n       0.0004551034628453516, 0.00017174509687500002, 0.00016119750000000003,\n       0.00005550000000000001, 0.000030000000000000004, 0.0003727185005080275,\n       0.00012435000000000001, 0.00048311825031271483, 0.000030000000000000004,\n       0.0012598353609723147, 0.000030000000000000004, 0.000030000000000000004,\n       0.00038769586070216803, 0.00005550000000000001, 0.00010267500000000002,\n       0.00013588458234375003, 0.000568914242375215, 0.0006243928897521678,\n       0.000030000000000000004, 0.000030000000000000004, 0.00007717500000000002,\n       0.0010377028924124902, 0.00008100000000000002, 0.00005550000000000001.\n  )\n  \n  pageRanks53: expected = (\n    expected,\n       0.00010267500000000002, 0.000030000000000000004, 0.0005503465372175779,\n       0.000030000000000000004, 0.001355548606467051, 0.0003556893808617188,\n       0.000030000000000000004, 0.00016827375, 0.000030000000000000004,\n       0.0008246139931943555, 0.000030000000000000004, 0.0010154740938932223,\n       0.00040518822771779304, 0.00045871095761835937, 0.00005550000000000001,\n       0.00016701787500000002, 0.002071953365629297, 0.000030000000000000004,\n       0.000030000000000000004, 0.000030000000000000004, 0.00005550000000000001,\n       0.000030000000000000004, 0.000030000000000000004, 0.0005470457547568554,\n       0.0005157095790148827, 0.000030000000000000004, 0.000688324568213281,\n       0.0006465114741332422, 0.0010292594947507033, 0.00005550000000000001,\n       0.000030000000000000004, 0.00005550000000000001, 0.0001649910962121094,\n       0.000030000000000000004, 0.00009559875000000003, 0.00014277375000000002,\n       0.00010267500000000002, 0.000030000000000000004, 0.00031039666483593755,\n       0.0005295671026200583, 0.000030000000000000004, 0.00008100000000000002,\n       0.0004951876449921876, 0.000146025, 0.0005186043726941406,\n       0.00005550000000000001, 0.00007717500000000002, 0.00011727375000000003,\n       0.0004914393382277344, 0.00030981865964960947, 0.0005172251503359373,\n       0.00007717500000000002, 0.00014624509687500003, 0.0009398635399813478,\n       0.0014674101670753515, 0.00005550000000000001, 0.000030000000000000004,\n       0.000030000000000000004.\n  )\n)\n", "TreeSort.som": "\"\n\n$Id: TreeSort.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nTreeSort = Sort (\n\n    sort: array = (\n        | tree |\n        array doIndexes: [ :i |\n            (i = 1)\n                ifTrue: [ tree := TreeNode new: (array at: i) ]\n                ifFalse: [ tree insert: (array at: i) ] ].\n        ^ tree\n    )\n    \n    verifyResult: tree = (\n       tree check ifFalse: [ self error: 'Invalid result, tree not sorted' ].\n       ^ true.\n    )\n    \n    dataSize = ( ^ 1000 )\n)\n", "Sort.som": "\"\n\n$Id: Sort.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nSort = Benchmark (\n\n    | smallest largest |\n    \n    benchmark = (\n        | array |\n        array := self randomArray: self dataSize.\n        ^ self sort: array.\n    )\n    \n    dataSize    = ( self subclassResponsibility )\n    sort: array = ( self subclassResponsibility )\n    \n    verifyResult: array = (\n        ((array at: 1) <> smallest)\n            || ((array at: (array length)) <> largest)\n                ifTrue: [ self error: 'Array is not sorted. smallest: ' + smallest asString + ' largest: ' + largest asString + ' [1]: ' + (array at: 1) asString + ' [l]: ' + (array at: array length) asString ].\n        3 to: (array length) do: [ :i |\n            (array at: i - 1) > (array at: i) \n                ifTrue: [ self error: 'Array is not sorted. [' + i asString + ' - 1]: ' + (array at: i - 1) asString + ' [' + i asString + ']: ' + (array at: i) asString]. ].\n        ^ true\n    )\n    \n    randomArray: size = (\n        | array |\n        Random initialize.\n        array := Array new: size withAll: [ Random next ].\n        smallest := largest := array at: 1.\n        array do: [ :elm |\n            (elm > largest)  ifTrue: [ largest  := elm ].\n            (elm < smallest) ifTrue: [ smallest := elm ]. ].\n        ^array\n    )\n    \n)\n", "Storage.som": "\"\n\n$Id: Storage.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nStorage = Benchmark (\n\n    | count |\n    \n    benchmark = (\n        Random initialize.\n        count := 0.\n        self buildTreeDepth: 7.\n        ^ count\n    )\n    \n    verifyResult: result = (\n      ^ self assert: 5461 equals: result\n    )\n    \n    buildTreeDepth: depth = (\n        count := count + 1.\n        ^(depth = 1) \n            ifTrue:  [ Array new: Random next % 10 + 1 ]\n            ifFalse: [\n                Array new: 4 withAll: [ self buildTreeDepth: depth - 1 ] ]\n    )\n    \n)\n", "Random.som": "\"\n\n$Id: Random.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nRandom = (\n\n    | seed |\n    \n    initialize = ( \n        seed := 74755\n    )\n    \n    next = (\n        seed := ((seed * 1309) + 13849) & 65535.\n        ^seed\n    )\n    \n    run = (\n        | fail |\n        'Testing random number generator ... ' print.\n        fail := [ 'FAILED:' println. ^nil ].\n        (self next <> 22896) ifTrue: fail.\n        (self next <> 34761) ifTrue: fail.\n        (self next <> 34014) ifTrue: fail.\n        (self next <> 39231) ifTrue: fail.\n        (self next <> 52540) ifTrue: fail.\n        (self next <> 41445) ifTrue: fail.\n        (self next <>  1546) ifTrue: fail.\n        (self next <>  5947) ifTrue: fail.\n        (self next <> 65224) ifTrue: fail.\n        'PASSED' println\n    )\n    \n    -------------------\n    \n    | random |\n    \n    new        = ( ^super new initialize )\n    next       = ( ^self random next )\n    initialize = ( ^random := Random new )\n    \n    random = ( ^random )\n    \n)\n", "Permute.som": "\"\n\n$Id: Permute.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nPermute = Benchmark (\n\n    | count v |\n    \n    benchmark = (\n        count := 0.\n        v     := Array new: 7.\n        self permute: 6.\n        ^ count\n    )\n    \n    verifyResult: result = (\n      ^ self assert: 8660 equals: result\n    )\n    \n    permute: n = (\n        count := count + 1.\n        (n <> 0)\n            ifTrue: [\n                self permute: n - 1.\n                n downTo: 1 do: [ :i |\n                    self swap: n with: i.\n                    self permute: n - 1.\n                    self swap: n with: i ] ]\n    )\n    \n    swap: i with: j = (\n        | tmp |\n        tmp := v at: i.\n        v at: i put: (v at: j).\n        v at: j put: tmp\n    )\n    \n)\n", "Sieve.som": "\"\n\n$Id: Sieve.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nSieve = Benchmark (\n\n    benchmark = (\n        | flags |\n        flags  := Array new: 5000.\n        ^ self sieve: flags size: 5000.\n    )\n    \n    verifyResult: result = (\n      ^ self assert: 669 equals: result\n    )\n    \n    sieve: flags size: size = (\n        | primeCount |\n        primeCount := 0.\n        flags putAll: true.\n        2 to: size do: [ :i |\n            (flags at: i - 1)\n                ifTrue: [\n                    | k |\n                    primeCount := primeCount + 1.\n                    k := i + i.\n                    [ k <= size ]\n                        whileTrue: [\n                            flags at: k - 1 put: false. k := k + i ]. ] ].\n        ^primeCount\n    )\n    \n)\n", "TreeNode.som": "\"\n\n$Id: TreeNode.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nTreeNode = (\n\n    | left right value |\n    \n    value    = ( ^value     )\n    value: v = ( value := v )\n    \n    check = (\n        ^(left  isNil || [ (left  value <  value) && left  check ]) &&\n         (right isNil || [ (right value >= value) && right check ])\n    )\n    \n    insert: n = (\n        (n < value)\n            ifTrue: [\n                left isNil\n                    ifTrue: [ left  := TreeNode new: n ]\n                    ifFalse: [ left  insert: n ] ]\n            ifFalse: [\n                right isNil\n                    ifTrue: [ right := TreeNode new: n ]\n                    ifFalse: [ right insert: n ] ].\n    )\n    \n    -------------------------\n    \n    new: value = ( ^super new value: value )\n    \n)\n", "Towers.som": "\"\n\n$Id: Towers.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\n\"Mmm... Hanoi...\"\n\nTowers = Benchmark (\n\n    | piles movesdone |\n    \n    pushDisk: disk onPile: pile = (\n        | top |\n        \n        top := piles at: pile.\n        (top isNil not) && [ disk size >= top size ]\n            ifTrue: [ self error: 'Cannot put a big disk on a smaller one' ].\n        \n        disk next: top.\n        piles at: pile put: disk.\n    )\n    \n    popDiskFrom: pile = (\n        | top |\n        \n        top := piles at: pile.\n        top isNil\n            ifTrue: [\n                self error: 'Attempting to remove a disk from an empty pile' ].\n        \n        piles at: pile put: top next.\n        top next: nil.\n        ^top\n    )\n    \n    moveTopDiskFrom: fromPile to: toPile = (\n        self pushDisk: (self popDiskFrom: fromPile) onPile: toPile.\n        movesdone := movesdone + 1.\n    )\n    \n    buildTowerAt: pile disks: disks = (\n        disks downTo: 0 do: [ :i |\n            self pushDisk: (TowersDisk new: i) onPile: pile ]\n    )\n    \n    move: disks disksFrom: fromPile to: toPile = (\n        disks = 1\n            ifTrue: [ self moveTopDiskFrom: fromPile to: toPile ]\n            ifFalse: [ | otherPile |\n                otherPile := (6 - fromPile) - toPile.\n                self move: disks - 1 disksFrom: fromPile to: otherPile.\n                self moveTopDiskFrom: fromPile to: toPile.\n                self move: disks - 1 disksFrom: otherPile to: toPile. ]\n    )\n    \n    benchmark = (\n        piles := Array new: 4.\n        self buildTowerAt: 1 disks: 13.\n        movesdone := 0.\n        self move: 13 disksFrom: 1 to: 2.\n        ^ movesdone\n    )\n    \n    verifyResult: result = (\n      ^ self assert: 8191 equals: result\n    )\n    \n)\n", "BenchmarkHarness.som": "\"\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nBenchmarkHarness = (\n\n    \"The BenchmarkHarness can be invoked on the command line and should be\n    passed a list of benchmarks to run (class names) as arguments. It will\n    run each of them and output single as well as a total.\"\n    \n    | total benchmarkClass numIterations warmUp innerIterations maxRuntime printAll |\n    \n    benchmarkClass: class = ( benchmarkClass := class )\n    printAll: aBool = ( printAll := aBool )\n\n    maxRuntime: seconds = (\n        \"converted to microseconds i.e. ticks\"\n        seconds ifNotNil: [\n            maxRuntime := seconds * 1000 * 1000] )\n\n    numIterations: anInt = (numIterations := anInt)\n    warmUp: anInt = (warmUp := anInt)\n    \n    total = ( ^ total )\n    \n    run: args = (\n        args length < 2 ifTrue: [ ^ self printUsage ].\n        \n        self initialize.\n        self processArguments: args.\n\n        self runBenchmark.\n        self printTotal.\n    )\n    \n    initialize = (\n        total         := 0.\n        numIterations := 1.\n        warmUp        := 0.\n        innerIterations := 1.\n        maxRuntime    := nil.\n        printAll      := true.\n    )\n    \n    printUsage = (\n      './som.sh -cp Smalltalk Examples/Benchmarks/BenchmarkHarness.som [benchmark] [num-iterations [warm-up [inner-iter]]]' println.\n      '' println.\n      '  benchmark      - benchmark class name (e.g., Queens, Fibonacci, Dispatch)' println.\n      '  num-iterations - number of times to execute benchmark, default: 1' println.\n      '  warm-up        - number of times to execute benchmark before measuring, default: 0' println.\n      '  inner-iter     - number of times the benchmark is executed in an inner loop, ' println.\n      '                   which is measured in total, default: 1' println.\n    )\n    \n    processArguments: args = (\n        self loadBenchmarkClass: (args at: 2). \"First argument is the BenchmarkHarness\"\n        args length > 2 ifTrue: [\n            numIterations := (args at: 3) asInteger.\n            args length > 3 ifTrue: [\n                warmUp := (args at: 4) asInteger.\n                args length > 4 ifTrue: [\n                    innerIterations := (args at: 5) asInteger.\n                ].\n            ].\n        ]\n    )\n    \n    loadBenchmarkClass: className = (\n        | sym cls |\n        sym := className asSymbol.\n        cls := system load: sym.\n        cls ifNil: [\n            self error: 'Failed loading benchmark: ' + className ].\n        benchmarkClass := cls.\n    )\n        \n    runBenchmark = (\n        | bench result |\n        bench := benchmarkClass new.\n        bench oneTimeSetup.\n        \n        ('Starting ' + bench name + ' benchmark ... ') print.\n        self doWarmup: bench.\n        result := self doRuns: bench.\n        total := total + result.\n        self reportBenchmark: bench result: result.\n\n        '' println\n    )\n    \n    doWarmup: bench = (\n        | numIterationsTmp printAllTmp maxRuntimeTmp |\n        warmUp > 0 ifFalse: [\n            '' println.\n            ^ self].\n\n        numIterationsTmp := numIterations.\n        printAllTmp      := printAll.\n        maxRuntimeTmp    := maxRuntime.\n\n        numIterations := warmUp.\n        printAll      := false.\n        maxRuntime    := nil.\n\n        ' warmup ...' print.\n        self doRuns: bench.\n\n        numIterations := numIterationsTmp.\n        printAll      := printAllTmp.\n        maxRuntime    := maxRuntimeTmp.\n\n        ' completed.' println.\n    )\n    \n    doRuns: bench = (\n        | i total |\n        i := 0.\n        total := 0.\n    \n        [ i < numIterations ] whileTrue: [\n            | startTime endTime runTime |\n            startTime := system ticks.\n            (bench innerBenchmarkLoop: innerIterations) ifFalse: [\n              self error: 'Benchmark failed with incorrect result'. ].\n            endTime   := system ticks.\n        \n            runTime := endTime - startTime.\n            printAll ifTrue: [ self print: bench run: runTime ].\n        \n            total := total + runTime.\n            i := i + 1.\n        \n            maxRuntime ifNotNil: [\n                total > maxRuntime ifTrue: [\n                    numIterations := i.\n                    ^ total ]].\n        \n            system fullGC ].\n    \n        ^ total\n    )\n    \n    reportBenchmark: bench result: result = (\n        bench name print.\n        ': iterations=' print.\n        numIterations print.\n        ' average: ' print.\n        (result / numIterations) print.\n        'us' print.\n        ' total: ' print.\n        result print.\n        'us' println.\n    )\n     \n    print: bench run: runTime = (\n        bench name print.\n        ': iterations=1' print.\n        ' runtime: ' print.\n        runTime print.\n        'us' println\n    )\n        \n    printTotal = (\n        ('Total Runtime: ' + total asString + 'us') println.\n    )\n)\n", "NBody": {"NBodyBench.som": "\" The Computer Language Benchmarks Game\n  http://shootout.alioth.debian.org/\n\n  contributed by Mark C. Lewis\n  modified slightly by Chad Whipkey\n  \n  Based on nbody.java ported to SOM by Stefan Marr.\n\"\nNBodyBench = (\n    run: args = (\n        | n bodies |\n        n := (args at: 2) asInteger.\n        Body initialize.\n        \n        bodies := NBodySystem new.\n        \n        bodies energy println.\n        \n        n timesRepeat: [ bodies advance: 0.01 ].\n        \n        bodies energy println.\n    )\n)\n", "NBody.som": "NBody = Benchmark (\n    | expectedEnergy |\n    \n    initialize = (\n        Body initialize.\n    )\n    \n    innerBenchmarkLoop: innerIterations = (\n        | bodies |\n        bodies := NBodySystem new.\n        \n        1 to: innerIterations do: [:i |\n            bodies advance: 0.01.\n        ].\n        \n        innerIterations = 250000 ifTrue: [\n          ^ bodies energy = -0.1690859889909308\n        ].\n        expectedEnergy isNil ifTrue: [\n          expectedEnergy := bodies energy.\n          ^ true\n        ].\n        \n        ^ expectedEnergy = bodies energy.\n    )\n    \n    ----\n    \n    new = (\n        ^ super new initialize\n    )\n)\n", "Body.som": "\" The Computer Language Benchmarks Game\n  http://shootout.alioth.debian.org/\n\n  contributed by Mark C. Lewis\n  modified slightly by Chad Whipkey\n  \n  Based on nbody.java ported to SOM by Stefan Marr.\n\"\nBody = (\n    | x y z vx vy vz mass |\n\n    x = ( ^ x )\n    y = ( ^ y )\n    z = ( ^ z )\n\n    vx = ( ^ vx )\n    vy = ( ^ vy )\n    vz = ( ^ vz )\n\n    mass = ( ^ mass )\n\n    x: val = ( x := val )\n    y: val = ( y := val )\n    z: val = ( z := val )\n\n    vx: val = ( vx := val )\n    vy: val = ( vy := val )\n    vz: val = ( vz := val )\n\n    mass: val = ( mass := val )\n    \n    offsetMomentumX: px y: py z: pz = (\n       vx := 0.0 - (px // Body SolarMass).\n       vy := 0.0 - (py // Body SolarMass).\n       vz := 0.0 - (pz // Body SolarMass).\n    )\n    \n    print = (\n        'x:  ' print. x println.\n        'y:  ' print. y println.\n        'z:  ' print. z println.\n        \n        'vx: ' print. vx println.\n        'vy: ' print. vy println.\n        'vz: ' print. vz println.\n        \n        'mass: ' print. mass println.\n    )\n\n    ----\n    \n    | solarMass |\n    \n    Pi          = ( ^ 3.141592653589793 )\n    SolarMass   = ( ^ solarMass )\n    DaysPerYear = ( ^ 365.24 )\n    \n    initialize = (\n        solarMass := 4 * self Pi * self Pi.\n    )\n\n    new = ( | b |\n        b := super new.\n        b x: 0.0.  b vx: 0.0.\n        b y: 0.0.  b vy: 0.0.\n        b z: 0.0.  b vz: 0.0.\n        b mass: 0.0.\n        ^ b\n    )\n\n    jupiter = ( | b |\n       b := super new.\n       b x:    4.8414314424647209.\n       b y:   -1.16032004402742839.\n       b z:   -0.103622044471123109.\n       b vx:   0.00166007664274403694   * self DaysPerYear.\n       b vy:   0.00769901118419740425   * self DaysPerYear.\n       b vz:  -0.0000690460016972063023 * self DaysPerYear.\n       b mass: 0.000954791938424326609  * self SolarMass.\n       ^ b\n    )\n\n    saturn = ( | b |\n       b := super new.\n       b x:    8.34336671824457987.\n       b y:    4.12479856412430479.\n       b z:   -0.403523417114321381.\n       b vx:  -0.00276742510726862411   * self DaysPerYear.\n       b vy:   0.00499852801234917238   * self DaysPerYear.\n       b vz:   0.0000230417297573763929 * self DaysPerYear.\n       b mass: 0.000285885980666130812  * self SolarMass.\n       ^ b\n    )\n\n    uranus = ( | b |\n       b := super new.\n       b x:   12.894369562139131.\n       b y:  -15.1111514016986312.\n       b z:   -0.223307578892655734.\n       b vx:   0.00296460137564761618   * self DaysPerYear.\n       b vy:   0.0023784717395948095    * self DaysPerYear.\n       b vz:  -0.0000296589568540237556 * self DaysPerYear.\n       b mass: 0.0000436624404335156298 * self SolarMass.\n       ^ b\n    )\n\n    neptune = ( | b |\n       b := super new.\n       b x:   15.3796971148509165.\n       b y:  -25.9193146099879641.\n       b z:    0.179258772950371181.\n       b vx:   0.00268067772490389322   * self DaysPerYear.\n       b vy:   0.00162824170038242295   * self DaysPerYear.\n       b vz:  -0.000095159225451971587  * self DaysPerYear.\n       b mass: 0.0000515138902046611451 * self SolarMass.\n       ^ b\n    )\n\n    sun = ( | b |\n       b := self new.\n       b mass: self SolarMass.\n       ^ b\n    )\n)", "NBodySystem.som": "\" The Computer Language Benchmarks Game\n  http://shootout.alioth.debian.org/\n\n  contributed by Mark C. Lewis\n  modified slightly by Chad Whipkey\n  \n  Based on nbody.java ported to SOM by Stefan Marr.\n\"\nNBodySystem = (\n    | bodies |\n\n    initialize = (\n        | px py pz |\n\n        bodies := Array new: 5.\n        bodies at: 1 put: Body sun.\n        bodies at: 2 put: Body jupiter.\n        bodies at: 3 put: Body saturn.\n        bodies at: 4 put: Body uranus.\n        bodies at: 5 put: Body neptune.\n        \n        \"bodies do: [:b | b print. '' println ].\"\n\n        px := 0.0.  py := 0.0.  pz := 0.0.\n\n        bodies do: [:b |\n            px := px + (b vx * b mass).\n            py := py + (b vy * b mass).\n            pz := pz + (b vz * b mass).\n        ].\n        \n        (bodies at: 1) offsetMomentumX: px y: py z: pz.\n        \n        \"bodies do: [:b | b print. '' println ].\"\n    )\n\n    advance: dt = (\n        1 to: bodies length do: [:i |\n            | iBody |\n            iBody := bodies at: i.\n\n            i + 1 to: bodies length do: [:j |\n                | dx dy dz jBody dSquared distance mag |\n                jBody := bodies at: j.\n                dx := iBody x - jBody x.\n                dy := iBody y - jBody y.\n                dz := iBody z - jBody z.\n\n                dSquared := (dx * dx) + (dy * dy) + (dz * dz).\n                distance := dSquared sqrt.\n                mag      := dt // (dSquared * distance).\n\n                iBody vx: iBody vx - (dx * jBody mass * mag).\n                iBody vy: iBody vy - (dy * jBody mass * mag).\n                iBody vz: iBody vz - (dz * jBody mass * mag).\n\n                jBody vx: jBody vx + (dx * iBody mass * mag).\n                jBody vy: jBody vy + (dy * iBody mass * mag).\n                jBody vz: jBody vz + (dz * iBody mass * mag).\n            ].\n       ].\n       \n       bodies do: [:body |\n           body x: body x + (dt * body vx).\n           body y: body y + (dt * body vy).\n           body z: body z + (dt * body vz).\n       ].\n    )\n    \n    energy = (\n        | dx dy dz distance e |\n        e := 0.0.\n\n        1 to: bodies length do: [:i |\n            | iBody |\n            iBody := bodies at: i.\n            \n            e := e + (0.5 * iBody mass *\n                 ((iBody vx * iBody vx) +\n                  (iBody vy * iBody vy) +\n                  (iBody vz * iBody vz))).\n            \n            i + 1 to: bodies length do: [:j |\n                | jBody |\n                jBody := bodies at: j.\n                \n                dx := iBody x - jBody x.\n                dy := iBody y - jBody y.\n                dz := iBody z - jBody z.\n\n                distance := ((dx*dx) + (dy*dy) + (dz*dz)) sqrt.\n                e := e - ((iBody mass * jBody mass) // distance).\n            ].\n       ].\n       ^ e\n    )\n    \n    ----\n    \n    new = (\n        ^ super new initialize\n    )\n)\n"}, "Polymorphism": {"Polymorphism.som": "\"Port of  https://github.com/dropbox/pyston/blob/master/microbenchmarks/polymorphism.py\n# This microbenchmark is inspired by the ICBD type checker, which has a 'scoring' phase at\n# the end of the analysis.\n# I'm not sure how representative this file is of the type checker, or even if\n# this is really a polymorphism test or maybe just a tree test, or some cross of the two.\n\"\n\nPolymorphism = Benchmark (\n  | d |\n  rand = (\n    d := (d * 1.24591 + 0.195) % 1.0.\n    ^ d\n  )\n  \n  makeRandom: x = (\n    self rand > x   ifTrue: [^ Simple new].\n    self rand < 0.3 ifTrue: [\n      ^ Union with: (\n          Array with: (self makeRandom: 0.5 * (x - 1))\n                with: (self makeRandom: 0.5 * (x - 1)))].\n    ^ Poly1 with: (self makeRandom: x - 1)\n  )\n\n  benchmark = (\n    | r |\n    d := 0.0.\n    r := self makeRandom: 10000.\n    1000 timesRepeat: [r score]\n  )\n)", "Simple.som": "Simple = (\n  score = ( ^ 1.0 )\n)", "Poly1.som": "Poly1 = (\n  | sub |\n  initializeWith: anObject = (\n    sub := anObject\n  )\n  \n  score = (\n    ^ sub score\n  )\n  ----\n  with: anObject = (\n    ^ super new initializeWith: anObject\n  )\n\n)", "Union.som": "Union = (\n  | subs |\n\n  initializeWith: anArray = ( subs := anArray )\n  score = (\n    | t |\n    t := 0.0.\n    subs do: [:s | t := t + s score].\n    t := t // (subs length * subs length).\n    ^ t\n  )\n  \n  ----\n  with: anArray = (\n    ^ super new initializeWith: anArray\n  )\n)"}, "GraphSearch": {"Edge.som": "Edge = (\n  | dest weight |\n  dest   = ( ^ dest )\n  weight = ( ^ weight )\n  \n  initializeWith: destination and: w = (\n    dest   := destination.\n    weight := w.\n  )\n\n  ----\n  \n  newWith: dest and: weight = (\n    ^ self new initializeWith: dest and: weight\n  )\n\n)\n", "GraphSearch.som": "GraphSearch = Benchmark (\n  | graphNodes graphMask updatingGraphMask graphVisited cost graphEdges k firstCost |\n\n  initializeGraph: noOfNodes = (\n    | source graph totalEdges |\n    graphNodes        := Array new: noOfNodes.\n    graphMask         := Array new: noOfNodes withAll: false.\n    updatingGraphMask := Array new: noOfNodes withAll: false.\n    graphVisited      := Array new: noOfNodes withAll: false.\n    cost              := Array new: noOfNodes withAll: -1.\n\n    source := 1.\n\n    graph := Array new: noOfNodes withAll: [Vector new].\n\n    graph doIndexes: [:i |\n      | noOfEdges |\n      noOfEdges := (JenkinsRandom random\n                       rem: GraphSearch MaxInitEdges - GraphSearch MinEdges + 1) abs\n                   + GraphSearch MinEdges.\n      1 to: noOfEdges do: [:j |\n        | nodeId weight |\n        nodeId := (JenkinsRandom random rem: noOfNodes) abs + 1.\n        weight := (JenkinsRandom random rem: (\n                    GraphSearch MaxWeight - GraphSearch MinWeight + 1)) abs\n                  + GraphSearch MinWeight.\n        (graph at: i)      append: (Edge newWith: nodeId and: weight).\n        (graph at: nodeId) append: (Edge newWith:      i and: weight).\n      ]\n    ].\n\n    totalEdges := 0.\n    graph doIndexes: [:i |\n      | noOfEdges |\n      noOfEdges := (graph at: i) size.\n      graphNodes at: i put: (Node newWith: totalEdges + 1 and: noOfEdges).\n      totalEdges := totalEdges + noOfEdges\n    ].\n\n    graphMask    at: source put: true.\n    graphVisited at: source put: true.\n\n    graphEdges := Array new: totalEdges withAll: 0.\n    \n    k := 1.\n    graph do: [:i |\n      i do: [:j |\n        graphEdges at: k put: j dest.\n        k := k + 1.\n      ]\n    ].\n    cost at: source put: 0.\n  )\n\n  innerBenchmarkLoop: innerIterations = (\n    | noOfNodes |\n    JenkinsRandom seed: 49734321.\n    \n    noOfNodes := GraphSearch ExpectedNoOfNodes / 900000 * innerIterations * innerIterations * innerIterations.\n\n    self initializeGraph: noOfNodes.\n    self breadthFirstSearch: noOfNodes.\n    ^ self verify: cost inner: innerIterations\n  )\n\n  breadthFirstSearch: noOfNodes = (\n    | stop |\n    stop := true.\n    [stop] whileTrue: [\n      stop := false.\n      \n      1 to: noOfNodes do: [:tid |\n        (graphMask at: tid) ifTrue: [\n          graphMask at: tid put: false.\n          (graphNodes at: tid) starting \n              to: ((graphNodes at: tid) noOfEdges + (graphNodes at: tid) starting) - 1\n              do: [:i |\n            | id |\n            id := graphEdges at: i.\n            (graphVisited at: id) ifFalse: [\n              cost at: id put: (cost at: tid) + 1.\n              updatingGraphMask at: id put: true.\n            ]\n          ]\n        ]\n      ].\n      \n      1 to: noOfNodes do: [:tid |\n        (updatingGraphMask at: tid) ifTrue: [\n          graphMask    at: tid put: true.\n          graphVisited at: tid put: true.\n          stop := true.\n          updatingGraphMask at: tid put: false\n        ]\n      ]\n    ]\n  )\n\n  verify: result inner: innerIterations = (\n    | totalCost |\n    cost length = (GraphSearch ExpectedNoOfNodes / 900000 * innerIterations * innerIterations * innerIterations)\n      ifFalse: [ ^ false ].\n\n    totalCost := 0.    \n    cost do: [:c | totalCost := totalCost + c].\n\n    cost length = GraphSearch ExpectedNoOfNodes\n      ifTrue:  [\n        totalCost = GraphSearch ExpectedTotalCost ifFalse: [\n          self error: 'ERROR: the total cost obtained for ' + cost length asString\n              + ' nodes is ' + totalCost asString + ' while the expected cost is '\n              + GraphSearch ExpectedTotalCost \n        ]]\n      ifFalse: [\n        firstCost == nil\n          ifTrue: [\n            firstCost := totalCost.\n            ^ true ]\n          ifFalse: [\n            ^ firstCost = totalCost\n          ]\n      ].\n\n    ^ true\n  )\n  \n  ----\n  \n  MinEdges = ( ^ 2 )\n  MaxInitEdges = ( ^ 4 )\n  MinWeight = ( ^ 1 )\n  MaxWeight = ( ^ 1 )\n  \n  ExpectedNoOfNodes = ( ^ 3000000 )\n  ExpectedTotalCost = ( ^ 26321966 )\n  \n)", "Node.som": "Node = (\n  | starting noOfEdges |\n  \n  starting  = ( ^ starting )\n  noOfEdges = ( ^ noOfEdges )\n  \n  initializeWith: start and: edges = (\n    starting  := start.\n    noOfEdges := edges.\n  )\n  \n  ----\n  \n  newWith: starting and: noOfEdges = (\n    ^ self new initializeWith: starting and: noOfEdges\n  )\n)\n"}, "LanguageFeatures": {"WhileLoopVAt.som": "\"\nCopyright (c) 2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nWhileLoopVAt = Benchmark (\n\n    singleRun = (\n        | sum v |\n        v := Vector new.\n        v at: 1 put: 1.\n        sum := 0.\n        [sum < 1000]\n            whileTrue:\n                [sum := sum + (v at: 1)].\n        ^ sum\n    )\n\n    benchmark = ( \n        | sum |\n        sum := 0.\n        [sum < 20000]\n            whileTrue:\n                [sum := sum + self singleRun].\n        ^ sum\n    )\n    \n    verifyResult: result = (\n      ^ 20000 = result\n    )\n)\n\n", "Dispatch.som": "\"\n\n$Id: Dispatch.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nDispatch = Benchmark (\n\n    benchmark = (\n        | cnt |\n        cnt := 0.\n        1 to: 20000 do: [ :i | cnt := cnt + (self method: i) ].\n        ^ cnt\n    )\n    \n    method: argument = ( ^argument )\n    \n    verifyResult: result = (\n      ^ 200010000 = result\n    )\n    \n)\n", "SlopStone.som": "\"\nmodified for SOM by Stefan Marr.\n\nmodified for Squeak by nishis@urban.ne.jp\nI added one class methods.\nand modified execute method.  block variables are renamed for Squeak.\nThanx to Mr. Tim Olson, Mr. Kohler Markus, Mr. Tim Rowledge, Mr. John Maloney, Mr. Ian Piumarta.\n\noriginal comments\n    NAME            STones80\n    AUTHOR          bruce@utafll.uta.edu (Bruce Samuelson)\n    FUNCTION        low and medium level benchmarks for ST80 and ST/V\n    ST-VERSIONS     pre R4.0, R4.0, R4.1, ST/V\n    PREREQUISITES   need floating point hardware or emulation\n    CONFLICTS       none\n    DISTRIBUTION    world\n    VERSION         1.0\n    DATE            April 16, 1993\n\nSUMMARY The filein includes two classes: Slopstones (Smalltalk Low level\nOPeration Stones) and Smopstones (Smalltalk Medium level OPeration Stones).\nEach includes seven cpu intensive benchmarks. They work equally well with\n16-bit and 32-bit implementations and are designed to be portable to all\nSmalltalk versions from ParcPlace and Digitalk. They are normalized to the\nauthor's 486/33 Windows 3.1 machine running ParcPlace VisualWorks 1.0.\nResults have been posted to the Usenet group comp.lang.smalltalk and form the\nbasis of an article that is scheduled to be published in the June issue of The\nSmalltalk Report.\n\nThe only difference between the ST80 (STones80) and ST/V (STonesV) filein is\nin the messages that define the classes in the first few lines of code. The\nST80 messages specify the class category and message protocol, which are not\nused in ST/V.\n\nBruce Samuelson\n\"\n\nSlopStone = Benchmark (\n  | o obj |\n\n  innerBenchmarkLoop: innerIterations = (\n    \"Using the SlopStone benchmarks, but not doing the\n     old style Stone performance number reporting\"\n    obj := Object.\n    o := obj new.\n    \n    1 to: innerIterations do: [:i | self doIntAdd         ].\n    1 to: innerIterations do: [:i | self doFloatAdd       ].\n    \"1 to: innerIterations do: [:i | self doStringAccess   ].\" \"NOT SUPPORTED\"\n    1 to: innerIterations do: [:i | self doObjectCreation ].\n    \"1 to: innerIterations do: [:i | self doObjectCopy     ].\" \"NOT SUPPORTED\"\n    1 to: innerIterations do: [:i | self doPerform        ].\n    1 to: innerIterations do: [:i | self doBlockValue     ].\n  )\n\n\n   \"STEFAN: use the original benchmarks, but do not use original way\n            of reporting results. Rely on the SMark reporting instead.\"\n\n    \"INTRODUCTION \n     \n    Slopstone: Smalltalk Low level OPeration Stones \n    Portable Low Level Benchmarks for ST80 and ST/V (using 16-bit \n    SmallIntegers) Placed in public domain January 1993  (c) Bruce \n    Samuelson Permission is given to place this in public Smalltalk archives \n     \n    Use monospaced fonts if possible to view the methods in this class. \n     \n    (1) Collect garbage if supported (2) do 'SlopstoneBenchmark new \n    runBenchmark'. Results are printed in the Transcript window. \n    Post results for your machines to comp.lang.smalltalk or \n    mail them to bruce@ling.uta.edu or bruce@utafll.uta.edu. \n     \n    DISCUSSION \n        \n    This readme method would normally be in the class comment for ST80. \n    ST/V-DOS doesn't support class comments. \n      \n    The benchmarks test strictly low level operations. They do not test \n    higher level operations such as forming sets, sorting, or streaming, nor \n    do they test \n    applications. They also do not test user interface operations because of \n    the non-portability of this area of Smalltalk and its sensitivity to the \n    performance of the video subsystem. The tests are cpu bound. They do \n    not access files and should not cause disk paging. \n     \n    The benchmarks use loop counts of 16000 because SmallIntegers cannot \n    exceed 16383 for ST/V-DOS. 16-bit implementions would perform worse \n    with large loop \n    counts. The benchmarks are also suitable for testing 32-bit versions of \n    Smalltalk. \n     \n    DEFINITION OF REFERENCE MACHINE (ONE SLOPSTONE) \n     \n    The following machine is the one on which I developed these \n    benchmarks. By \n    convention it is defined to operate at one slopstone. It's a mid range \n    performer for current ParcPlace versions of Smalltalk. \n     \n    Hardware: Amax 486DX/33 (includes internal floating point processor \n    and internal 8K cache), 256K external cache, 16MB RAM. \n     \n    Software: ParcPlace VisualWorks 1.0, Windows 3.1, DOS 5.0 (plain vanilla \n    setup). \n     \n    COMPARISON TO XEROX DORADO \n     \n    For reference, the machine runs at 649% of a Dorado on ParcPlace \n    benchmarks for ST80 4.1. Its fast video card helps on these PPS \n    benchmarks. I didn't run \n    them for VisualWorks 1.0. It would be somewhat slower because there \n    are vastly \n    more classes. \n     \n    EXAMPLE RESULTS FOR REFERENCE MACHINE \n     \n    1000s    time    1000s of \n    itera-   sec-    iterations   slop- \n    tions    onds    per sec      stones   explanation \n     \n    3808     0.577   6600         1.0      add integers \n     544     2.262    240         1.0      add floats \n     960     1.088    882         1.0      access strings \n     320     0.908    352         1.0      create objects \n     160     1.49     107         1.0      copy objects \n     480     1.129    425         1.0      perform selectors \n     896     1.237    724         1.0      evaluate blocks \n     \n     640     1.151    555         1.0      geometric mean\"\n\n\n  doBlockValue = (\n    [] value. [] value. [] value. [] value. [] value. [] value. [] value.\n    [] value. [] value. [] value. [] value. [] value. [] value. [] value.\n    [] value. [] value. [] value. [] value. [] value. [] value. [] value.\n    [] value. [] value. [] value. [] value. [] value. [] value. [] value.\n    [] value. [] value. [] value. [] value. [] value. [] value. [] value.\n    [] value. [] value. [] value. [] value. [] value. [] value. [] value.\n    [] value. [] value. [] value. [] value. [] value. [] value. [] value.\n    [] value. [] value. [] value. [] value. [] value. [] value. [] value\n  )\n\n\n  doFloatAdd = (\n    1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+\n    1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0+1.0\n  )\n\n  doIntAdd = (\n    1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\n    \"+1+1+1+1+1+1+1+1+1+1+1+1+\n    1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+\n    1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+\n    1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+\n    1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+\n    1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+\n    1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\"\n  )\n\n  doObjectCopy = (\n    o copy copy copy copy copy copy copy copy copy copy\n  )\n\n  doObjectCreation = (\n    obj new. obj new. obj new. obj new. obj new.\n    obj new. obj new. obj new. obj new. obj new.\n    obj new. obj new. obj new. obj new. obj new.\n    obj new. obj new. obj new. obj new. obj new\n  )\n\n  doPerform = (\n    o perform: #value. o perform: #value. o perform: #value.\n    o perform: #value. o perform: #value. o perform: #value.\n    o perform: #value. o perform: #value. o perform: #value.\n    o perform: #value. o perform: #value. o perform: #value.\n    o perform: #value. o perform: #value. o perform: #value.\n    o perform: #value. o perform: #value. o perform: #value.\n    o perform: #value. o perform: #value. o perform: #value.\n    o perform: #value. o perform: #value. o perform: #value.\n    o perform: #value. o perform: #value. o perform: #value.\n    o perform: #value. o perform: #value. o perform: #value\n  )\n\n  doStringAccess = (\n    'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1.\n    'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1.\n    'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1.\n    'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1.\n    'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1.\n    'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1.\n    'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1.\n    'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1.\n    'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1.\n    'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1. 'a' at: 1\n  )\n)\n", "DispatchNoArg.som": "\"\n\n$Id: Dispatch.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nDispatchNoArg = Benchmark (\n\n    benchmark = (\n        1 to: 20000 do: [ :i | self method ]\n    )\n    \n    method = ( ^ 1 )\n    \n)\n", "IntegerLoop.som": "\"\n\n$Id: IntegerLoop.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nIntegerLoop = Benchmark (\n\n    benchmark = ( | bounds a |\n        bounds := 20000.\n        bounds negated to: bounds by: 1 do: [:value | a := value-value].\n        ^ a\n    )\n    \n    verifyResult: result = (\n      ^ 0 = result\n    )\n)\n", "DispatchPerform.som": "\"\n\n$Id: Dispatch.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nDispatchPerform = Benchmark (\n\n    benchmark = (\n        1 to: 20000 do: [ :i | self perform: #method: withArguments: (Array with: i)]\n    )\n    \n    method: argument = ( ^ argument )\n    \n)\n", "DispatchPerformNoArg.som": "\"\n\n$Id: Dispatch.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nDispatchPerformNoArg = Benchmark (\n\n    benchmark = (\n        1 to: 20000 do: [ :i | self perform: #method ]\n    )\n    \n    method = ( ^ 1 )\n    \n)\n", "WhileLoop.som": "\"\nCopyright (c) 2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nWhileLoop = Benchmark (\n\n    singleRun = (\n        | sum |\n        sum := 0.\n        [sum < 1000]\n            whileTrue:\n                [sum := sum + 1].\n        ^ sum\n    )\n\n    benchmark = ( \n        | sum |\n        sum := 0.\n        [sum < 20000]\n            whileTrue:\n                [sum := sum + self singleRun].\n        ^ sum\n    )\n    \n    verifyResult: result = (\n      ^ 20000 = result\n    )\n)\n\n", "Fibonacci.som": "\"\n\n$Id: Fibonacci.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nFibonacci = Benchmark (\n\n    benchmark = ( | result |\n        result := self fibonacci: 20.\n        ^ result\n    )\n    \n    fibonacci: n = (\n        ^(n <= 1) \n            ifTrue:  1 \n            ifFalse: [ (self fibonacci: (n - 1)) + (self fibonacci: (n - 2)) ]\n    )\n    \n    verifyResult: result = (\n      ^ 10946 = result\n    )\n    \n)\n", "FieldLoop.som": "\"\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nFieldLoop = Benchmark (\n    | counter |\n    \n    benchmark = ( | iter |\n        counter := 0.\n        iter := 20000.\n\n        [ iter > 0 ] whileTrue: [\n          iter := iter - 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          \n          counter := counter + 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          \n          counter := counter + 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          \n          counter := counter + 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          \n          counter := counter + 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          \n          counter := counter + 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          counter := counter + 1.\n          \n        ].\n        \n        ^ counter\n    )\n    \n    verifyResult: result = (\n      ^ 600000 = result\n    )\n    \n)\n", "FieldWrite.som": "FieldWrite = Benchmark (\n    | counter |\n    \n    benchmark = (\n        | bar |\n        bar := 1234.\n        \n        1 to: 20000 do: [:i |\n          counter := 2122.\n        ].\n        ^ counter\n    )\n    \n    verifyResult: result = (\n      ^ 2122 = result and: [counter = result]\n    )\n    \n)\n", "Loop.som": "\"\n\n$Id: Loop.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nLoop = Benchmark (\n\n    singleRun = (\n        | sum |\n        sum := 0.\n        1 to: 100 do: [ :j | sum := sum + 1 ].\n        (sum = 100)\n            ifFalse: [\n                self error: 'Wrong result: ' + sum + ' should be: 100' ].\n        ^ sum\n    )\n\n    benchmark = ( \n        | sum |\n        sum := 0.\n        1 to: 200 do: [ :i | sum := sum + self singleRun ].\n        ^ sum\n    )\n    \n    verifyResult: result = (\n      ^ 20000 = result\n    )\n)\n", "Sum.som": "\"\n\n$Id: Sum.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nSum = Benchmark (\n\n    benchmark = (\n        | result |\n        1 to: 2 do: [ :i | result := self sumFrom: 1 to: 10000 ].\n        ^ result\n    )\n    \n    sumFrom: start to: end = (\n        | sum |\n        sum := 0.\n        start to: end do: [ :i | sum := sum + i ].\n        ^sum\n    )\n    \n    verifyResult: result = (\n      ^ 50005000 = result\n    )\n    \n)\n", "Recurse.som": "\"\n\n$Id: Recurse.som 31 2009-07-31 12:25:18Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nRecurse = Benchmark (\n\n    benchmark = (\n        ^ self recurse: 13\n    )\n    \n    recurse: n = (\n        (n > 0) ifTrue: [ self recurse: n - 1. self recurse: n - 1 ].\n        ^ n\n    )\n    \n    verifyResult: result = (\n      ^ 13 = result\n    )\n)\n", "NonLocalReturn.som": "NonLocalReturn = Benchmark (\n\n    first:  a = ( ^ self second: a )\n    second: a = ( ^ self third: a  )\n    third:  a = ( a value )\n    \n    nlr = (\n        self first: [^ 1]\n    )\n\n    benchmark = (\n        | sum |\n        sum := 0.\n        1 to: 200 do: [ :i | sum := sum + self nlr ].\n        ^ sum\n    )\n    \n    verifyResult: result = (\n      ^ 200 = result\n    )\n    \n)\n", "WhileLoopPoly.som": "\"\nCopyright (c) 2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nWhileLoopPoly = Benchmark (\n\n    singleRun = (\n        | sum poly b |\n        sum := 0.\n        [sum < 1000]\n            whileTrue:\n                [sum := sum + 1.\n                ((sum % 4) = 0) ifTrue:  [poly := 1].\n                ((sum % 4) = 1) ifTrue:  [poly := 'abc'].\n                ((sum % 4) = 2) ifTrue:  [poly := 2222222222222222].\n                ((sum % 4) = 3) ifTrue:  [poly := 1//2].\n                b := poly\n                ].\n        b := b + b.\n        ^ sum\n    )\n\n    benchmark = ( \n        | sum |\n        sum := 0.\n        [sum < 20000]\n            whileTrue:\n                [sum := sum + self singleRun].\n        ^ sum\n    )\n    \n    verifyResult: result = (\n      ^ 20000 = result\n    )\n)\n\n", "DoesNotUnderstand": {"CalculatorDelegate.som": "CalculatorDelegate = (\n    | target |\n    \n    initializeWith: aCalculator = (\n        target := aCalculator\n    )\n    \n    inc: aSymbol = (\n        target inc: aSymbol\n    ) \n    \n    ----\n    \n    new: a = (\n        | calc |\n        calc := self new.\n        calc initializeWith: a.\n        ^ calc\n    )\n)", "ProxyAdd.som": "ProxyAdd = Benchmark (\n    | proxy calc |\n    \n    initialize = (\n        calc := Calculator new.\n        proxy := Proxy new: calc\n    )\n\n    benchmark = (\n        calc initializeWith: 5.\n    \n        1 to: 20000 do: [ :i | \n            proxy inc: #once\n        ].\n    \n        ^ calc a\n    )\n    \n    verifyResult: result = (\n      ^ 20005 = result\n    )\n    \n    ----\n    \n    new = (\n        ^ super new initialize\n    )\n)\n", "DirectAdd.som": "DirectAdd = Benchmark (\n    | calc |\n    \n    initialize = (\n        calc := Calculator new.\n    )\n\n    benchmark = (\n        calc initializeWith: 5.\n        \n        1 to: 20000 do: [ :i | \n            calc inc: #once\n        ].\n        \n        calc a = 20005 ifFalse: [ 'Benchmark failed with wrong result' println. calc a println. ]\n    )\n    \n    ----\n    \n    new = (\n        ^ super new initialize\n    )\n)\n", "PerformAdd.som": "PerformAdd = Benchmark (\n    | calc |\n    \n    initialize = (\n        calc := Calculator new.\n    )\n\n    benchmark = (\n        calc initializeWith: 5.\n    \n        1 to: 20000 do: [ :i | \n            calc perform: #inc: withArguments: (Array with: #once)\n        ].\n    \n        calc a = 20005 ifFalse: [ 'Benchmark failed with wrong result' println. calc a println. ]\n    )\n    \n    ----\n    \n    new = (\n        ^ super new initialize\n    )\n)\n", "CalculatorDnuPerform.som": "CalculatorDnuPerform = (\n    | a |\n    \n    initializeWith: anInt = (\n        a := anInt\n    )\n    \n    inc: aSymbol = (\n        aSymbol = #once ifTrue: [ a := a + 1 ]\n    )\n \n    a = ( ^ a )\n \n    doesNotUnderstand: selector arguments: arguments = (\n        ^ self perform: #inc: withArguments: arguments\n    )\n    \n    ----\n    \n    new: a = (\n        | calc |\n        calc := self new.\n        calc initializeWith: a.\n        ^ calc\n    )\n)", "Proxy.som": "Proxy = (\n    | target |\n    \n    initializeWith: anObj = (\n        target := anObj\n    )\n    \n    doesNotUnderstand: selector arguments: arguments = (\n        ^ target perform: selector withArguments: arguments\n    )\n    \n    ----\n    \n    new: target = (\n        | proxy |\n        proxy := self new.\n        proxy initializeWith: target.\n        ^ proxy\n    )\n)", "DnuPerformAdd.som": "DnuPerformAdd = Benchmark (\n    | calc |\n    \n    initialize = (\n        calc := CalculatorDnuPerform new.\n    )\n\n    benchmark = (\n        calc initializeWith: 5.\n        \n        1 to: 20000 do: [ :i | \n            calc incDNU: #once\n        ].\n        \n        calc a = 20005 ifFalse: [ 'Benchmark failed with wrong result' println. calc a println. ]\n    )\n    \n    ----\n    \n    new = (\n        ^ super new initialize\n    )\n)\n", "Calculator.som": "Calculator = (\n    | a |\n    \n    initializeWith: anInt = (\n        a := anInt\n    )\n    \n    inc: aSymbol = (\n        aSymbol = #once ifTrue: [ a := a + 1 ]\n    )\n \n    a = ( ^ a )\n \n    doesNotUnderstand: selector arguments: arguments = (\n        ^ self inc: #once\n    )\n    \n    ----\n    \n    new: a = (\n        | calc |\n        calc := self new.\n        calc initializeWith: a.\n        ^ calc\n    )\n)", "IndirectAdd.som": "IndirectAdd = Benchmark (\n    | delegate calc |\n    \n    initialize = (\n        calc := Calculator new.\n        delegate := CalculatorDelegate new: calc\n    )\n\n    benchmark = (\n        calc initializeWith: 5.\n    \n        1 to: 20000 do: [ :i | \n            delegate inc: #once\n        ].\n    \n        ^ calc a\n    )\n\n    verifyResult: result = (\n      ^ 20005 = result\n    )\n    \n    ----\n    \n    new = (\n        ^ super new initialize\n    )\n)\n", "DnuAdd.som": "DnuAdd = Benchmark (\n    | calc |\n    \n    initialize = (\n        calc := Calculator new.\n    )\n\n    benchmark = (\n        calc initializeWith: 5.\n        \n        1 to: 20000 do: [ :i | \n            calc incDNU: #once\n        ].\n        \n        calc a = 20005 ifFalse: [ 'Benchmark failed with wrong result' println. calc a println. ]\n    )\n    \n    ----\n    \n    new = (\n        ^ super new initialize\n    )\n)\n"}}, "Json": {"Json.som": "Json = Benchmark (\n\n    oneTimeSetup = (\n      JsonLiteral initialize.\n    )\n\n    benchmark = (\n      ^ (JsonParser with: Json RapBenchmarkMinified) parse.\n    )\n    \n    verifyResult: result = (\n      result class = ParseException ifTrue: [ result println ].\n      result isObject ifFalse: [^ false].\n      (result asObject at: 'head') isObject ifFalse: [^ false].\n      (result asObject at: 'operations') isArray ifFalse: [^ false].\n      ^ (result asObject at: 'operations') asArray size = 156\n    )\n    \n    ----\n    \n    RapBenchmarkMinified = (\n      ^ '{\"head\":{\"requestCounter\":4},\"operations\":[[\"destroy\",\"w54\"],[\"set\",\"w2\",{\"activeControl\":\"w99\"}],[\"set\",\"w21\",{\"customVariant\":\"variant_navigation\"}],[\"set\",\"w28\",{\"customVariant\":\"variant_selected\"}],[\"set\",\"w53\",{\"children\":[\"w95\"]}],[\"create\",\"w95\",\"rwt.widgets.Composite\",{\"parent\":\"w53\",\"style\":[\"NONE\"],\"bounds\":[0,0,1008,586],\"children\":[\"w96\",\"w97\"],\"tabIndex\":-1,\"clientArea\":[0,0,1008,586]}],[\"create\",\"w96\",\"rwt.widgets.Label\",{\"parent\":\"w95\",\"style\":[\"NONE\"],\"bounds\":[10,30,112,26],\"tabIndex\":-1,\"customVariant\":\"variant_pageHeadline\",\"text\":\"TableViewer\"}],[\"create\",\"w97\",\"rwt.widgets.Composite\",{\"parent\":\"w95\",\"style\":[\"NONE\"],\"bounds\":[0,61,1008,525],\"children\":[\"w98\",\"w99\",\"w226\",\"w228\"],\"tabIndex\":-1,\"clientArea\":[0,0,1008,525]}],[\"create\",\"w98\",\"rwt.widgets.Text\",{\"parent\":\"w97\",\"style\":[\"LEFT\",\"SINGLE\",\"BORDER\"],\"bounds\":[10,10,988,32],\"tabIndex\":22,\"activeKeys\":[\"#13\",\"#27\",\"#40\"]}],[\"listen\",\"w98\",{\"KeyDown\":true,\"Modify\":true}],[\"create\",\"w99\",\"rwt.widgets.Grid\",{\"parent\":\"w97\",\"style\":[\"SINGLE\",\"BORDER\"],\"appearance\":\"table\",\"indentionWidth\":0,\"treeColumn\":-1,\"markupEnabled\":false}],[\"create\",\"w100\",\"rwt.widgets.ScrollBar\",{\"parent\":\"w99\",\"style\":[\"HORIZONTAL\"]}],[\"create\",\"w101\",\"rwt.widgets.ScrollBar\",{\"parent\":\"w99\",\"style\":[\"VERTICAL\"]}],[\"set\",\"w99\",{\"bounds\":[10,52,988,402],\"children\":[],\"tabIndex\":23,\"activeKeys\":[\"CTRL+#70\",\"CTRL+#78\",\"CTRL+#82\",\"CTRL+#89\",\"CTRL+#83\",\"CTRL+#71\",\"CTRL+#69\"],\"cancelKeys\":[\"CTRL+#70\",\"CTRL+#78\",\"CTRL+#82\",\"CTRL+#89\",\"CTRL+#83\",\"CTRL+#71\",\"CTRL+#69\"]}],[\"listen\",\"w99\",{\"MouseDown\":true,\"MouseUp\":true,\"MouseDoubleClick\":true,\"KeyDown\":true}],[\"set\",\"w99\",{\"itemCount\":118,\"itemHeight\":28,\"itemMetrics\":[[0,0,50,3,0,3,44],[1,50,50,53,0,53,44],[2,100,140,103,0,103,134],[3,240,180,243,0,243,174],[4,420,50,423,0,423,44],[5,470,50,473,0,473,44]],\"columnCount\":6,\"headerHeight\":35,\"headerVisible\":true,\"linesVisible\":true,\"focusItem\":\"w108\",\"selection\":[\"w108\"]}],[\"listen\",\"w99\",{\"Selection\":true,\"DefaultSelection\":true}],[\"set\",\"w99\",{\"enableCellToolTip\":true}],[\"listen\",\"w100\",{\"Selection\":true}],[\"set\",\"w101\",{\"visibility\":true}],[\"listen\",\"w101\",{\"Selection\":true}],[\"create\",\"w102\",\"rwt.widgets.GridColumn\",{\"parent\":\"w99\",\"text\":\"Nr.\",\"width\":50,\"moveable\":true}],[\"listen\",\"w102\",{\"Selection\":true}],[\"create\",\"w103\",\"rwt.widgets.GridColumn\",{\"parent\":\"w99\",\"text\":\"Sym.\",\"index\":1,\"left\":50,\"width\":50,\"moveable\":true}],[\"listen\",\"w103\",{\"Selection\":true}],[\"create\",\"w104\",\"rwt.widgets.GridColumn\",{\"parent\":\"w99\",\"text\":\"Name\",\"index\":2,\"left\":100,\"width\":140,\"moveable\":true}],[\"listen\",\"w104\",{\"Selection\":true}],[\"create\",\"w105\",\"rwt.widgets.GridColumn\",{\"parent\":\"w99\",\"text\":\"Series\",\"index\":3,\"left\":240,\"width\":180,\"moveable\":true}],[\"listen\",\"w105\",{\"Selection\":true}],[\"create\",\"w106\",\"rwt.widgets.GridColumn\",{\"parent\":\"w99\",\"text\":\"Group\",\"index\":4,\"left\":420,\"width\":50,\"moveable\":true}],[\"listen\",\"w106\",{\"Selection\":true}],[\"create\",\"w107\",\"rwt.widgets.GridColumn\",{\"parent\":\"w99\",\"text\":\"Period\",\"index\":5,\"left\":470,\"width\":50,\"moveable\":true}],[\"listen\",\"w107\",{\"Selection\":true}],[\"create\",\"w108\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":0,\"texts\":[\"1\",\"H\",\"Hydrogen\",\"Nonmetal\",\"1\",\"1\"],\"cellBackgrounds\":[null,null,null,[138,226,52,255],null,null]}],[\"create\",\"w109\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":1,\"texts\":[\"2\",\"He\",\"Helium\",\"Noble gas\",\"18\",\"1\"],\"cellBackgrounds\":[null,null,null,[114,159,207,255],null,null]}],[\"create\",\"w110\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":2,\"texts\":[\"3\",\"Li\",\"Lithium\",\"Alkali metal\",\"1\",\"2\"],\"cellBackgrounds\":[null,null,null,[239,41,41,255],null,null]}],[\"create\",\"w111\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":3,\"texts\":[\"4\",\"Be\",\"Beryllium\",\"Alkaline earth metal\",\"2\",\"2\"],\"cellBackgrounds\":[null,null,null,[233,185,110,255],null,null]}],[\"create\",\"w112\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":4,\"texts\":[\"5\",\"B\",\"Boron\",\"Metalloid\",\"13\",\"2\"],\"cellBackgrounds\":[null,null,null,[156,159,153,255],null,null]}],[\"create\",\"w113\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":5,\"texts\":[\"6\",\"C\",\"Carbon\",\"Nonmetal\",\"14\",\"2\"],\"cellBackgrounds\":[null,null,null,[138,226,52,255],null,null]}],[\"create\",\"w114\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":6,\"texts\":[\"7\",\"N\",\"Nitrogen\",\"Nonmetal\",\"15\",\"2\"],\"cellBackgrounds\":[null,null,null,[138,226,52,255],null,null]}],[\"create\",\"w115\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":7,\"texts\":[\"8\",\"O\",\"Oxygen\",\"Nonmetal\",\"16\",\"2\"],\"cellBackgrounds\":[null,null,null,[138,226,52,255],null,null]}],[\"create\",\"w116\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":8,\"texts\":[\"9\",\"F\",\"Fluorine\",\"Halogen\",\"17\",\"2\"],\"cellBackgrounds\":[null,null,null,[252,233,79,255],null,null]}],[\"create\",\"w117\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":9,\"texts\":[\"10\",\"Ne\",\"Neon\",\"Noble gas\",\"18\",\"2\"],\"cellBackgrounds\":[null,null,null,[114,159,207,255],null,null]}],[\"create\",\"w118\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":10,\"texts\":[\"11\",\"Na\",\"Sodium\",\"Alkali metal\",\"1\",\"3\"],\"cellBackgrounds\":[null,null,null,[239,41,41,255],null,null]}],[\"create\",\"w119\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":11,\"texts\":[\"12\",\"Mg\",\"Magnesium\",\"Alkaline earth metal\",\"2\",\"3\"],\"cellBackgrounds\":[null,null,null,[233,185,110,255],null,null]}],[\"create\",\"w120\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":12,\"texts\":[\"13\",\"Al\",\"Aluminium\",\"Poor metal\",\"13\",\"3\"],\"cellBackgrounds\":[null,null,null,[238,238,236,255],null,null]}],[\"create\",\"w121\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":13,\"texts\":[\"14\",\"Si\",\"Silicon\",\"Metalloid\",\"14\",\"3\"],\"cellBackgrounds\":[null,null,null,[156,159,153,255],null,null]}],[\"create\",\"w122\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":14,\"texts\":[\"15\",\"P\",\"Phosphorus\",\"Nonmetal\",\"15\",\"3\"],\"cellBackgrounds\":[null,null,null,[138,226,52,255],null,null]}],[\"create\",\"w123\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":15,\"texts\":[\"16\",\"S\",\"Sulfur\",\"Nonmetal\",\"16\",\"3\"],\"cellBackgrounds\":[null,null,null,[138,226,52,255],null,null]}],[\"create\",\"w124\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":16,\"texts\":[\"17\",\"Cl\",\"Chlorine\",\"Halogen\",\"17\",\"3\"],\"cellBackgrounds\":[null,null,null,[252,233,79,255],null,null]}],[\"create\",\"w125\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":17,\"texts\":[\"18\",\"Ar\",\"Argon\",\"Noble gas\",\"18\",\"3\"],\"cellBackgrounds\":[null,null,null,[114,159,207,255],null,null]}],[\"create\",\"w126\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":18,\"texts\":[\"19\",\"K\",\"Potassium\",\"Alkali metal\",\"1\",\"4\"],\"cellBackgrounds\":[null,null,null,[239,41,41,255],null,null]}],[\"create\",\"w127\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":19,\"texts\":[\"20\",\"Ca\",\"Calcium\",\"Alkaline earth metal\",\"2\",\"4\"],\"cellBackgrounds\":[null,null,null,[233,185,110,255],null,null]}],[\"create\",\"w128\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":20,\"texts\":[\"21\",\"Sc\",\"Scandium\",\"Transition metal\",\"3\",\"4\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w129\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":21,\"texts\":[\"22\",\"Ti\",\"Titanium\",\"Transition metal\",\"4\",\"4\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w130\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":22,\"texts\":[\"23\",\"V\",\"Vanadium\",\"Transition metal\",\"5\",\"4\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w131\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":23,\"texts\":[\"24\",\"Cr\",\"Chromium\",\"Transition metal\",\"6\",\"4\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w132\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":24,\"texts\":[\"25\",\"Mn\",\"Manganese\",\"Transition metal\",\"7\",\"4\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w133\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":25,\"texts\":[\"26\",\"Fe\",\"Iron\",\"Transition metal\",\"8\",\"4\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w134\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":26,\"texts\":[\"27\",\"Co\",\"Cobalt\",\"Transition metal\",\"9\",\"4\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w135\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":27,\"texts\":[\"28\",\"Ni\",\"Nickel\",\"Transition metal\",\"10\",\"4\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w136\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":28,\"texts\":[\"29\",\"Cu\",\"Copper\",\"Transition metal\",\"11\",\"4\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w137\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":29,\"texts\":[\"30\",\"Zn\",\"Zinc\",\"Transition metal\",\"12\",\"4\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w138\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":30,\"texts\":[\"31\",\"Ga\",\"Gallium\",\"Poor metal\",\"13\",\"4\"],\"cellBackgrounds\":[null,null,null,[238,238,236,255],null,null]}],[\"create\",\"w139\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":31,\"texts\":[\"32\",\"Ge\",\"Germanium\",\"Metalloid\",\"14\",\"4\"],\"cellBackgrounds\":[null,null,null,[156,159,153,255],null,null]}],[\"create\",\"w140\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":32,\"texts\":[\"33\",\"As\",\"Arsenic\",\"Metalloid\",\"15\",\"4\"],\"cellBackgrounds\":[null,null,null,[156,159,153,255],null,null]}],[\"create\",\"w141\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":33,\"texts\":[\"34\",\"Se\",\"Selenium\",\"Nonmetal\",\"16\",\"4\"],\"cellBackgrounds\":[null,null,null,[138,226,52,255],null,null]}],[\"create\",\"w142\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":34,\"texts\":[\"35\",\"Br\",\"Bromine\",\"Halogen\",\"17\",\"4\"],\"cellBackgrounds\":[null,null,null,[252,233,79,255],null,null]}],[\"create\",\"w143\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":35,\"texts\":[\"36\",\"Kr\",\"Krypton\",\"Noble gas\",\"18\",\"4\"],\"cellBackgrounds\":[null,null,null,[114,159,207,255],null,null]}],[\"create\",\"w144\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":36,\"texts\":[\"37\",\"Rb\",\"Rubidium\",\"Alkali metal\",\"1\",\"5\"],\"cellBackgrounds\":[null,null,null,[239,41,41,255],null,null]}],[\"create\",\"w145\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":37,\"texts\":[\"38\",\"Sr\",\"Strontium\",\"Alkaline earth metal\",\"2\",\"5\"],\"cellBackgrounds\":[null,null,null,[233,185,110,255],null,null]}],[\"create\",\"w146\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":38,\"texts\":[\"39\",\"Y\",\"Yttrium\",\"Transition metal\",\"3\",\"5\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w147\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":39,\"texts\":[\"40\",\"Zr\",\"Zirconium\",\"Transition metal\",\"4\",\"5\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w148\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":40,\"texts\":[\"41\",\"Nb\",\"Niobium\",\"Transition metal\",\"5\",\"5\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w149\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":41,\"texts\":[\"42\",\"Mo\",\"Molybdenum\",\"Transition metal\",\"6\",\"5\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w150\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":42,\"texts\":[\"43\",\"Tc\",\"Technetium\",\"Transition metal\",\"7\",\"5\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w151\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":43,\"texts\":[\"44\",\"Ru\",\"Ruthenium\",\"Transition metal\",\"8\",\"5\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w152\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":44,\"texts\":[\"45\",\"Rh\",\"Rhodium\",\"Transition metal\",\"9\",\"5\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w153\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":45,\"texts\":[\"46\",\"Pd\",\"Palladium\",\"Transition metal\",\"10\",\"5\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w154\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":46,\"texts\":[\"47\",\"Ag\",\"Silver\",\"Transition metal\",\"11\",\"5\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w155\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":47,\"texts\":[\"48\",\"Cd\",\"Cadmium\",\"Transition metal\",\"12\",\"5\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w156\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":48,\"texts\":[\"49\",\"In\",\"Indium\",\"Poor metal\",\"13\",\"5\"],\"cellBackgrounds\":[null,null,null,[238,238,236,255],null,null]}],[\"create\",\"w157\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":49,\"texts\":[\"50\",\"Sn\",\"Tin\",\"Poor metal\",\"14\",\"5\"],\"cellBackgrounds\":[null,null,null,[238,238,236,255],null,null]}],[\"create\",\"w158\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":50,\"texts\":[\"51\",\"Sb\",\"Antimony\",\"Metalloid\",\"15\",\"5\"],\"cellBackgrounds\":[null,null,null,[156,159,153,255],null,null]}],[\"create\",\"w159\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":51,\"texts\":[\"52\",\"Te\",\"Tellurium\",\"Metalloid\",\"16\",\"5\"],\"cellBackgrounds\":[null,null,null,[156,159,153,255],null,null]}],[\"create\",\"w160\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":52,\"texts\":[\"53\",\"I\",\"Iodine\",\"Halogen\",\"17\",\"5\"],\"cellBackgrounds\":[null,null,null,[252,233,79,255],null,null]}],[\"create\",\"w161\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":53,\"texts\":[\"54\",\"Xe\",\"Xenon\",\"Noble gas\",\"18\",\"5\"],\"cellBackgrounds\":[null,null,null,[114,159,207,255],null,null]}],[\"create\",\"w162\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":54,\"texts\":[\"55\",\"Cs\",\"Caesium\",\"Alkali metal\",\"1\",\"6\"],\"cellBackgrounds\":[null,null,null,[239,41,41,255],null,null]}],[\"create\",\"w163\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":55,\"texts\":[\"56\",\"Ba\",\"Barium\",\"Alkaline earth metal\",\"2\",\"6\"],\"cellBackgrounds\":[null,null,null,[233,185,110,255],null,null]}],[\"create\",\"w164\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":56,\"texts\":[\"57\",\"La\",\"Lanthanum\",\"Lanthanide\",\"3\",\"6\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w165\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":57,\"texts\":[\"58\",\"Ce\",\"Cerium\",\"Lanthanide\",\"3\",\"6\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w166\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":58,\"texts\":[\"59\",\"Pr\",\"Praseodymium\",\"Lanthanide\",\"3\",\"6\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w167\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":59,\"texts\":[\"60\",\"Nd\",\"Neodymium\",\"Lanthanide\",\"3\",\"6\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w168\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":60,\"texts\":[\"61\",\"Pm\",\"Promethium\",\"Lanthanide\",\"3\",\"6\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w169\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":61,\"texts\":[\"62\",\"Sm\",\"Samarium\",\"Lanthanide\",\"3\",\"6\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w170\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":62,\"texts\":[\"63\",\"Eu\",\"Europium\",\"Lanthanide\",\"3\",\"6\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w171\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":63,\"texts\":[\"64\",\"Gd\",\"Gadolinium\",\"Lanthanide\",\"3\",\"6\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w172\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":64,\"texts\":[\"65\",\"Tb\",\"Terbium\",\"Lanthanide\",\"3\",\"6\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w173\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":65,\"texts\":[\"66\",\"Dy\",\"Dysprosium\",\"Lanthanide\",\"3\",\"6\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w174\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":66,\"texts\":[\"67\",\"Ho\",\"Holmium\",\"Lanthanide\",\"3\",\"6\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w175\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":67,\"texts\":[\"68\",\"Er\",\"Erbium\",\"Lanthanide\",\"3\",\"6\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w176\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":68,\"texts\":[\"69\",\"Tm\",\"Thulium\",\"Lanthanide\",\"3\",\"6\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w177\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":69,\"texts\":[\"70\",\"Yb\",\"Ytterbium\",\"Lanthanide\",\"3\",\"6\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w178\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":70,\"texts\":[\"71\",\"Lu\",\"Lutetium\",\"Lanthanide\",\"3\",\"6\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w179\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":71,\"texts\":[\"72\",\"Hf\",\"Hafnium\",\"Transition metal\",\"4\",\"6\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w180\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":72,\"texts\":[\"73\",\"Ta\",\"Tantalum\",\"Transition metal\",\"5\",\"6\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w181\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":73,\"texts\":[\"74\",\"W\",\"Tungsten\",\"Transition metal\",\"6\",\"6\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w182\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":74,\"texts\":[\"75\",\"Re\",\"Rhenium\",\"Transition metal\",\"7\",\"6\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w183\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":75,\"texts\":[\"76\",\"Os\",\"Osmium\",\"Transition metal\",\"8\",\"6\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w184\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":76,\"texts\":[\"77\",\"Ir\",\"Iridium\",\"Transition metal\",\"9\",\"6\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w185\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":77,\"texts\":[\"78\",\"Pt\",\"Platinum\",\"Transition metal\",\"10\",\"6\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w186\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":78,\"texts\":[\"79\",\"Au\",\"Gold\",\"Transition metal\",\"11\",\"6\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w187\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":79,\"texts\":[\"80\",\"Hg\",\"Mercury\",\"Transition metal\",\"12\",\"6\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w188\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":80,\"texts\":[\"81\",\"Tl\",\"Thallium\",\"Poor metal\",\"13\",\"6\"],\"cellBackgrounds\":[null,null,null,[238,238,236,255],null,null]}],[\"create\",\"w189\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":81,\"texts\":[\"82\",\"Pb\",\"Lead\",\"Poor metal\",\"14\",\"6\"],\"cellBackgrounds\":[null,null,null,[238,238,236,255],null,null]}],[\"create\",\"w190\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":82,\"texts\":[\"83\",\"Bi\",\"Bismuth\",\"Poor metal\",\"15\",\"6\"],\"cellBackgrounds\":[null,null,null,[238,238,236,255],null,null]}],[\"create\",\"w191\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":83,\"texts\":[\"84\",\"Po\",\"Polonium\",\"Metalloid\",\"16\",\"6\"],\"cellBackgrounds\":[null,null,null,[156,159,153,255],null,null]}],[\"create\",\"w192\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":84,\"texts\":[\"85\",\"At\",\"Astatine\",\"Halogen\",\"17\",\"6\"],\"cellBackgrounds\":[null,null,null,[252,233,79,255],null,null]}],[\"create\",\"w193\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":85,\"texts\":[\"86\",\"Rn\",\"Radon\",\"Noble gas\",\"18\",\"6\"],\"cellBackgrounds\":[null,null,null,[114,159,207,255],null,null]}],[\"create\",\"w194\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":86,\"texts\":[\"87\",\"Fr\",\"Francium\",\"Alkali metal\",\"1\",\"7\"],\"cellBackgrounds\":[null,null,null,[239,41,41,255],null,null]}],[\"create\",\"w195\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":87,\"texts\":[\"88\",\"Ra\",\"Radium\",\"Alkaline earth metal\",\"2\",\"7\"],\"cellBackgrounds\":[null,null,null,[233,185,110,255],null,null]}],[\"create\",\"w196\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":88,\"texts\":[\"89\",\"Ac\",\"Actinium\",\"Actinide\",\"3\",\"7\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w197\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":89,\"texts\":[\"90\",\"Th\",\"Thorium\",\"Actinide\",\"3\",\"7\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w198\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":90,\"texts\":[\"91\",\"Pa\",\"Protactinium\",\"Actinide\",\"3\",\"7\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w199\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":91,\"texts\":[\"92\",\"U\",\"Uranium\",\"Actinide\",\"3\",\"7\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w200\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":92,\"texts\":[\"93\",\"Np\",\"Neptunium\",\"Actinide\",\"3\",\"7\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w201\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":93,\"texts\":[\"94\",\"Pu\",\"Plutonium\",\"Actinide\",\"3\",\"7\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w202\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":94,\"texts\":[\"95\",\"Am\",\"Americium\",\"Actinide\",\"3\",\"7\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w203\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":95,\"texts\":[\"96\",\"Cm\",\"Curium\",\"Actinide\",\"3\",\"7\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w204\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":96,\"texts\":[\"97\",\"Bk\",\"Berkelium\",\"Actinide\",\"3\",\"7\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w205\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":97,\"texts\":[\"98\",\"Cf\",\"Californium\",\"Actinide\",\"3\",\"7\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w206\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":98,\"texts\":[\"99\",\"Es\",\"Einsteinium\",\"Actinide\",\"3\",\"7\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w207\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":99,\"texts\":[\"100\",\"Fm\",\"Fermium\",\"Actinide\",\"3\",\"7\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w208\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":100,\"texts\":[\"101\",\"Md\",\"Mendelevium\",\"Actinide\",\"3\",\"7\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w209\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":101,\"texts\":[\"102\",\"No\",\"Nobelium\",\"Actinide\",\"3\",\"7\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w210\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":102,\"texts\":[\"103\",\"Lr\",\"Lawrencium\",\"Actinide\",\"3\",\"7\"],\"cellBackgrounds\":[null,null,null,[173,127,168,255],null,null]}],[\"create\",\"w211\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":103,\"texts\":[\"104\",\"Rf\",\"Rutherfordium\",\"Transition metal\",\"4\",\"7\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w212\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":104,\"texts\":[\"105\",\"Db\",\"Dubnium\",\"Transition metal\",\"5\",\"7\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w213\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":105,\"texts\":[\"106\",\"Sg\",\"Seaborgium\",\"Transition metal\",\"6\",\"7\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w214\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":106,\"texts\":[\"107\",\"Bh\",\"Bohrium\",\"Transition metal\",\"7\",\"7\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w215\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":107,\"texts\":[\"108\",\"Hs\",\"Hassium\",\"Transition metal\",\"8\",\"7\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w216\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":108,\"texts\":[\"109\",\"Mt\",\"Meitnerium\",\"Transition metal\",\"9\",\"7\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w217\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":109,\"texts\":[\"110\",\"Ds\",\"Darmstadtium\",\"Transition metal\",\"10\",\"7\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w218\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":110,\"texts\":[\"111\",\"Rg\",\"Roentgenium\",\"Transition metal\",\"11\",\"7\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w219\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":111,\"texts\":[\"112\",\"Uub\",\"Ununbium\",\"Transition metal\",\"12\",\"7\"],\"cellBackgrounds\":[null,null,null,[252,175,62,255],null,null]}],[\"create\",\"w220\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":112,\"texts\":[\"113\",\"Uut\",\"Ununtrium\",\"Poor metal\",\"13\",\"7\"],\"cellBackgrounds\":[null,null,null,[238,238,236,255],null,null]}],[\"create\",\"w221\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":113,\"texts\":[\"114\",\"Uuq\",\"Ununquadium\",\"Poor metal\",\"14\",\"7\"],\"cellBackgrounds\":[null,null,null,[238,238,236,255],null,null]}],[\"create\",\"w222\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":114,\"texts\":[\"115\",\"Uup\",\"Ununpentium\",\"Poor metal\",\"15\",\"7\"],\"cellBackgrounds\":[null,null,null,[238,238,236,255],null,null]}],[\"create\",\"w223\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":115,\"texts\":[\"116\",\"Uuh\",\"Ununhexium\",\"Poor metal\",\"16\",\"7\"],\"cellBackgrounds\":[null,null,null,[238,238,236,255],null,null]}],[\"create\",\"w224\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":116,\"texts\":[\"117\",\"Uus\",\"Ununseptium\",\"Halogen\",\"17\",\"7\"],\"cellBackgrounds\":[null,null,null,[252,233,79,255],null,null]}],[\"create\",\"w225\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":117,\"texts\":[\"118\",\"Uuo\",\"Ununoctium\",\"Noble gas\",\"18\",\"7\"],\"cellBackgrounds\":[null,null,null,[114,159,207,255],null,null]}],[\"create\",\"w226\",\"rwt.widgets.Composite\",{\"parent\":\"w97\",\"style\":[\"BORDER\"],\"bounds\":[10,464,988,25],\"children\":[\"w227\"],\"tabIndex\":-1,\"clientArea\":[0,0,986,23]}],[\"create\",\"w227\",\"rwt.widgets.Label\",{\"parent\":\"w226\",\"style\":[\"NONE\"],\"bounds\":[10,10,966,3],\"tabIndex\":-1,\"text\":\"Hydrogen (H)\"}],[\"create\",\"w228\",\"rwt.widgets.Label\",{\"parent\":\"w97\",\"style\":[\"WRAP\"],\"bounds\":[10,499,988,16],\"tabIndex\":-1,\"foreground\":[150,150,150,255],\"font\":[[\"Verdana\",\"Lucida Sans\",\"Arial\",\"Helvetica\",\"sans-serif\"],10,false,false],\"text\":\"Shortcuts: [CTRL+F] - Filter | Sort by: [CTRL+R] - Number, [CTRL+Y] - Symbol, [CTRL+N] - Name, [CTRL+S] - Series, [CTRL+G] - Group, [CTRL+E] - Period\"}],[\"set\",\"w1\",{\"focusControl\":\"w99\"}],[\"call\",\"rwt.client.BrowserNavigation\",\"addToHistory\",{\"entries\":[[\"tableviewer\",\"TableViewer\"]]}]]}'\n    )\n)", "JsonString.som": "JsonString = JsonValue (\n  | string |\n  \n  initializeWith: str = ( string := str )\n\n  isString = (\n    ^ true\n  )\n\n  asString = (\n    ^ string\n  )\n\n  hashcode = (\n    ^ string hashcode\n  )\n\n  = other = (\n    self == other ifTrue: [ ^ true ].\n    other == nil ifTrue: [ ^ false ].\n\n    self class == other class ifFalse: [ ^ false ].\n\n    ^ string =  other asString\n  )\n\n  ----\n  \n  new: str = ( ^ self new initializeWith: str )\n\n)\n", "JsonObject.som": "JsonObject = JsonValue (\n  | names values table |\n  \n  initialize = (\n    names  := Vector new.\n    values := Vector new.\n    table  := HashIndexTable new\n  )\n\n  add: name withNumber: value = (\n    self add: name with: (JsonValue number: value)\n  )\n  \n  add: name withBoolean: value = (\n    self add: name with: (JsonValue boolean: value)\n  )\n  \n  add: name withString: value = (\n    self add: name with: (JsonValue string: value)\n  )\n  \n  add: name with: aJsonValue = (\n    name ifNil: [ self error: 'name is null'  ].\n    aJsonValue ifNil: [ self error: 'aJsonValue is null' ].\n\n    names  append: name.\n    values append: aJsonValue.\n    table at: name put: names size.\n  )\n\n  at: name putNumber: value = (\n    self at: name put: (JsonValue number: value)\n  )\n\n  at: name putBoolean: value = (\n    self at: name put: (JsonValue boolean: value)\n  )\n  \n  at: name putString: value = (\n    self at: name put: (JsonValue string: value)\n  )\n\n  at: name put: aJsonValue = (\n    | idx |\n    name ifNil: [ self error: 'name is null'  ].\n    aJsonValue ifNil: [ self error: 'aJsonValue is null' ].\n  \n    idx := self indexOf: name.\n    idx <> -1\n      ifTrue:  [values at: idx put: aJsonValue]\n      ifFalse: [\n        names  append: name.\n        values append: aJsonValue.\n        table at: name put: names size.\n      ].\n  )\n\n  remove: name = (\n    | idx |\n    name ifNil: [ self error: 'name is null' ].\n    idx := self indexOf: name.\n    idx = -1 ifFalse: [\n      table  remove: name.\n      names  remove: idx.\n      values remove: idx.\n    ].\n  )\n\n  at: name = (\n    | idx |\n    name ifNil: [ self error: 'name is null'  ].\n    idx := self indexOf: name.\n    idx = -1\n      ifTrue:  [ ^ nil ]\n      ifFalse: [ ^ values at: idx ]\n  )\n\n  at: name asIntegerWith: default = (\n    | value |\n    value := self at: name.\n    value\n      ifNil:    [ ^ default ]\n      ifNotNil: [ ^ value asInteger ]\n  )\n\n  at: name asDoubleWith: default = (\n    | value |\n    value := self at: name.\n    value\n      ifNil:    [ ^ default ]\n      ifNotNil: [ ^ value asDouble ]\n  )\n\n  at: name asBooleanWith: default = (\n    | value |\n    value := self at: name.\n    value\n      ifNil:    [ ^ default ]\n      ifNotNil: [ ^ value asBoolean ]\n  )\n\n  at: name asStringWith: default = (\n    | value |\n    value := self at: name.\n    value\n      ifNil:    [ ^ default ]\n      ifNotNil: [ ^ value asString ]\n  )\n\n  size = (\n    ^ names size\n  )\n  \n  isEmpty = (\n    ^ names isEmpty\n  )\n  \n  names = (\n    ^ names\n  )\n\n  \"TODO:\n  @Override\n  void write( final JsonWriter writer ) throws IOException {\n    writer.writeObjectOpen();\n    Iterator<String> namesIterator = names.iterator();\n    Iterator<JsonValue> valuesIterator = values.iterator();\n    boolean first = true;\n    while( namesIterator.hasNext() ) {\n      if( !first ) {\n        writer.writeObjectSeparator();\n      }\n      writer.writeMemberName( namesIterator.next() );\n      writer.writeMemberSeparator();\n      valuesIterator.next().write( writer );\n      first = false;\n    }\n    writer.writeObjectClose();\n  }\"\n  \n  isObject = ( ^ true )\n  asObject = ( ^ self )\n\n  hashcode = (\n    | result |\n    result := 1.\n    result := 31 * result + names hashcode.\n    result := 31 * result + values hashcode.\n    ^ result\n  )\n\n  = other = (\n    self == other ifTrue: [ ^ true  ].\n    self == nil   ifTrue: [ ^ false ].\n    self class == other class ifFalse: [ ^ false ].\n    \n    ^ names = other names && values = other values\n  )\n\n  indexOf: name = (\n    | idx |\n    idx := table at: name.    \n    idx <> -1 && name = (names at: idx) ifTrue: [ ^ idx ].\n    ^ names lastIndexOf: name\n  )\n\n  updateHashIndex = (\n    names doIndexes: [: i |\n      table add: (names at: i) put: i\n    ]\n  )\n\n  ----\n  \n  new = ( ^ super new initialize )\n  \n  readFrom: string = (\n    ^ (JsonValue readFrom: string) asObject\n  )\n)\n", "JsonArray.som": "JsonArray = JsonValue (\n  | values |\n\n  initialize = ( values := Vector new )\n\n  addInteger: value = (\n    values append: (JsonValue integer: value)\n  )\n\n  addDouble: value = (\n    values append: (JsonValue double: value)\n  )\n\n  addBoolean: value = (\n    values append: (JsonValue boolean: value)\n  )\n\n  addString: value = (\n    values append: (JsonValue string: value)\n  )\n\n  add: value = (\n    value ifNil: [ self error: 'value is null' ].\n    values append: value\n  )\n\n  at: index putInteger: value = (\n    values at: index put: (JsonValue integer: value)\n  )\n\n  at: index putDouble: value = (\n    values at: index put: (JsonValue double: value)\n  )\n\n  at: index putBoolean: value = (\n    values at: index put: (JsonValue boolean: value)\n  )\n\n  at: index putString: value = (\n    values at: index put: (JsonValue string: value)\n  )\n\n  at: index put: value = (\n    value ifNil: [ self error: 'value is null' ].\n    values at: index put: value\n  )\n\n  removeAt: index = (\n    values removeAt: index\n  )\n\n  size = (\n    ^ values size\n  )\n\n  isEmpty = (\n    ^ values isEmpty\n  )\n\n  at: index = (\n    ^ values at: index\n  )\n\n  values = (\n    ^ values\n  )\n \n  isArray = (\n    ^ true\n  )\n\n  asArray = (\n    ^ self\n  )\n\n  hashcode = (\n    ^ values hashcode\n  )\n\n  = other = (\n    self == other ifTrue: [ ^ true ].\n    other == nil ifTrue: [ ^ false ].\n    self class == other class ifFalse: [ ^ false ].\n\n    ^ values = other values\n  )\n\n  ----\n  \n  new = ( ^ super new initialize )\n  \n  readFrom: string = (\n    ^ (JsonValue readFrom: string) asArray\n  )\n)\n", "JsonValue.som": "JsonValue = (\n\n  isObject  = ( ^ false )\n  isArray   = ( ^ false )\n  isNumber  = ( ^ false )\n  isString  = ( ^ false )\n  isBoolean = ( ^ false )\n  \n  isTrue  = ( ^ false )\n  isFalse = ( ^ false )\n  isNull  = ( ^ false )\n\n  asObject = (\n    self error: 'Unsupported operation, not an object: ' + self asString\n  )\n\n  asArray = (\n    self error: 'Unsupported operation, not an array: ' + self asString\n  )\n\n  asInteger = (\n    self error: 'Unsupported operation, not a number: ' + self asString\n  )\n\n  asDouble = (\n    self error: 'Unsupported operation, not a number: ' + self asString\n  )\n\n  asString = (\n    self error: 'Unsupported operation, not a string: ' + self asString\n  )\n\n  asBoolean = (\n    self error: 'Unsupported operation, not a boolean: ' + self asString\n  )\n\n  writeTo: writer = (\n    self writeTo: writer with: nil\n  )\n\n\" TODO:\n    public void writeTo( final Writer writer, final WriterConfig config ) throws IOException {\n    WritingBuffer buffer = new WritingBuffer( writer, 128 );\n    write( config == null ? new JsonWriter( buffer ) : config.createWriter( buffer ) );\n    buffer.flush();\n  }\"\n\n  \"TODO:\n  @Override\n  public String toString() {\n    return toString( null );\n  }\n\n  public String toString( final WriterConfig config ) {\n    StringWriter writer = new StringWriter();\n    try {\n      writeTo( writer, config );\n    } catch( IOException exception ) {\n      // StringWriter does not throw IOExceptions\n      throw new RuntimeException( exception );\n    }\n    return writer.toString();\n  }\"\n\n\n  writeOn: writer = (\n    ^ self subclassResponsibility\n  )\n\n  ----\n  \n  readFrom: str = (\n    ^ (JsonParser with: str) parse\n  )\n\n  integer: anInteger = (\n    ^ JsonNumber new: anInteger asString\n  )\n\n  double: aDouble = (\n    aDouble ifNil: [self error: 'aDouble nil'].\n    ^ JsonNumber new: (self cutOffPointZero: aDouble asString)\n  )\n\n  string: aString = (\n    ^ aString == nil\n        ifTrue:  [ JsonLiteral NULL ]\n        ifFalse: [ JsonString new: aString ]\n  )\n\n  boolean: aBoolean = (\n    ^ aBoolean\n        ifTrue:  [ JsonLiteral TRUE  ]\n        ifFalse: [ JsonLiteral FALSE ]\n  )\n  \n  cutOffPointZero: str = (\n    (str endsWith: '.0') ifTrue: [ ^ str substringFrom: 1 to: str length - 2].\n    ^ str\n  )\n)", "JsonParser.som": "\" This is a rough port of minijson from Java.\n  TODO: add details (com.eclipsesource.json) \"\n\nJsonParser = (\n  | input index line column current captureBuffer captureStart exceptionBlock |\n  \n  initializeWith: string = (\n    input := string.\n    index := 0.\n    line  := 1.\n    column := 0.\n    current := nil.\n    captureBuffer := ''.\n  )\n\n  parse = (\n    | result |\n    exceptionBlock := [:ex | ^ ex ].\n    self read.\n    self skipWhiteSpace.\n    result := self readValue.\n    self skipWhiteSpace.\n    self isEndOfText ifFalse: [ self error: 'Unexpected character'].\n    ^ result\n  )\n\n  readValue = (\n    current = 'n' ifTrue: [ ^ self readNull   ].\n    current = 't' ifTrue: [ ^ self readTrue   ].\n    current = 'f' ifTrue: [ ^ self readFalse  ].\n    current = '\"' ifTrue: [ ^ self readString ].\n    current = '[' ifTrue: [ ^ self readArray  ].\n    current = '{' ifTrue: [ ^ self readObject ].\n    \n    \"Is this really the best way to write this?, or better #or:?,\n     but with all the nesting, it's just ugly.\"\n    current = '-' ifTrue: [ ^ self readNumber ].\n    current = '0' ifTrue: [ ^ self readNumber ].\n    current = '1' ifTrue: [ ^ self readNumber ].\n    current = '2' ifTrue: [ ^ self readNumber ].\n    current = '3' ifTrue: [ ^ self readNumber ].\n    current = '4' ifTrue: [ ^ self readNumber ].\n    current = '5' ifTrue: [ ^ self readNumber ].\n    current = '6' ifTrue: [ ^ self readNumber ].\n    current = '7' ifTrue: [ ^ self readNumber ].\n    current = '8' ifTrue: [ ^ self readNumber ].\n    current = '9' ifTrue: [ ^ self readNumber ].\n    \n    \"else\"\n    self expected: 'value'\n  )\n\n  readArrayElement: array = (\n    self skipWhiteSpace.\n    array add: self readValue.\n    self skipWhiteSpace.\n  )\n  \n  readArray = (\n    | array |\n    self read.\n    array := JsonArray new.\n    \n    \"Array might be empty\"\n    self skipWhiteSpace.\n    (self readChar: ']') ifTrue: [\n      ^ array\n    ].\n    \n    self readArrayElement: array.\n    [self readChar: ','] whileTrue: [\n      self readArrayElement: array.\n    ].\n\n    (self readChar: ']') ifFalse: [\n      self expected: '\",\" or \"]\"'\n    ].\n    ^ array\n  )\n\n  readObjectKeyValuePair: object = (\n    | name |\n    self skipWhiteSpace.\n    name := self readName.\n    self skipWhiteSpace.\n  \n    (self readChar: ':') ifFalse: [ self expected: ':' ].\n  \n    self skipWhiteSpace.\n  \n    object add: name with: self readValue.\n  \n    self skipWhiteSpace.\n  )\n\n  readObject = (\n    | object |\n    self read.\n    object := JsonObject new.\n    self skipWhiteSpace.\n\n    (self readChar: '}') ifTrue: [\n      ^ object\n    ].\n    \n    self readObjectKeyValuePair: object.\n    [self readChar: ','] whileTrue: [\n      self readObjectKeyValuePair: object.\n    ].\n    \n    (self readChar: '}') ifFalse: [\n      self expected: '\",\" or \"}\"'\n    ].\n    \n    ^ object\n  )\n\n  readName = (\n    current = '\"' ifFalse: [ self expected: 'name' ].\n    ^ self readStringInternal\n  )\n\n  readNull = (\n    self read.\n    self readRequiredChar: 'u'.\n    self readRequiredChar: 'l'.\n    self readRequiredChar: 'l'.\n    ^ JsonLiteral NULL\n  )\n\n  readTrue = (\n    self read.\n    self readRequiredChar: 'r'.\n    self readRequiredChar: 'u'.\n    self readRequiredChar: 'e'.\n    ^ JsonLiteral TRUE\n  )\n\n  readFalse = (\n    self read.\n    self readRequiredChar: 'a'.\n    self readRequiredChar: 'l'.\n    self readRequiredChar: 's'.\n    self readRequiredChar: 'e'.\n    ^ JsonLiteral FALSE\n  )\n\n  readRequiredChar: ch = (\n    (self readChar: ch) ifFalse: [\n      self expected: 'character: ' + ch\n    ]\n  )\n\n  readString = (\n    ^ JsonString new: self readStringInternal\n  )\n\n  readStringInternal = (\n    | string |\n    self read.\n    self startCapture.\n    \n    [current = '\"'] whileFalse: [\n      current = '\\\\' ifTrue: [\n        self pauseCapture.\n        self readEscape.\n        self startCapture.\n      ] ifFalse: [\n        \"if (current < 0x20) { throw expected('valid string character'); }\"\n        \"we currently don't have a way to get the ordinal value for a character\"\n        \"} else {\"\n        self read.\n      ]\n    ].\n    string := self endCapture.\n    self read.\n    ^ string\n  )\n\n  readEscapeChar = (\n    current = '\"'  ifTrue: [ ^ '\"'  ].\n    current = '/'  ifTrue: [ ^ '/'  ].\n    current = '\\\\' ifTrue: [ ^ '\\\\' ].\n\n    current = 'b'  ifTrue: [ ^ '\\b'  ].\n    current = 'f'  ifTrue: [ ^ '\\f'  ].\n    current = 'n'  ifTrue: [ ^ '\\n'  ].\n    current = 'r'  ifTrue: [ ^ '\\r'  ].\n    current = 't'  ifTrue: [ ^ '\\t'  ].\n\n    \"TODO: SOM doesn't have a way to create unicode characters.\"\n    self expected: 'valid escape sequence. note, some are not supported'\n  )\n\n  readEscape = (\n    self read.    \n    captureBuffer := captureBuffer concatenate: self readEscapeChar.\n    self read\n  )\n\n  readNumber = (\n    | firstDigit |\n    self startCapture.\n    self readChar: '-'.\n    firstDigit := current.\n    \n    self readDigit ifFalse: [ self expected: 'digit' ].\n    firstDigit <> '0' ifTrue: [ [self readDigit] whileTrue: []].\n        \n    self readFraction.\n    self readExponent.\n    ^ JsonNumber new: self endCapture\n  )\n\n  readFraction = (\n    (self readChar: '.') ifFalse: [ ^ false ].\n    \n    self readDigit ifFalse: [ self expected: 'digit' ].\n    \n    [self readDigit] whileTrue: [].\n\n    ^ true\n  )\n\n  readExponent = (\n    ((self readChar: 'e') not and: [\n      (self readChar: 'E') not]) ifTrue: [ ^ false ].\n    \n    \n    (self readChar: '+') ifFalse: [ self readChar: '-' ].\n    \n    self readDigit ifFalse: [ self expected: 'digit' ].\n\n    [self readDigit] whileTrue: [].\n\n    ^ true\n  )\n\n  readChar: ch = (\n    current = ch ifFalse: [ ^ false ].\n    self read.\n    ^ true\n  )\n\n  readDigit = (\n    self isDigit ifFalse: [ ^ false ].\n    self read.\n    ^ true\n  )\n\n  skipWhiteSpace = (\n    [ self isWhiteSpace ]\n      whileTrue:\n        [ self read ].\n  )\n\n  read = (\"TODO: this is probably broken\"\n    current = '\\n' ifTrue: [\n      line := line + 1.\n      column := 0.\n    ].\n    \n    index := index + 1.\n    column := column + 1.\n\n    input ifNil: [ self error:'input nil'].\n    index <= input length\n      ifTrue:  [ current := input charAt: index ]\n      ifFalse: [ current := nil ]\n  )\n\n  startCapture = (\n    captureStart := index\n  )\n\n  pauseCapture = (\n    captureBuffer := captureBuffer concatenate: (\n      input substringFrom: captureStart to: index - 1).\n    captureStart := -1\n  )\n\n  endCapture = (\n    | captured |\n    '' = captureBuffer\n      ifTrue:  [ captured := input substringFrom: captureStart to: index - 1 ]\n      ifFalse: [\n        self pauseCapture.\n        captured := captureBuffer.\n        captureBuffer := '' ].\n    captureStart := -1.\n    \n    ^ captured\n  )\n\n  expected: expected = (\n    self isEndOfText ifTrue: [\n      self error: 'Unexpected end of input, expected ' + expected asString\n    ].\n    self error: 'Expected ' + expected\n  )\n\n  error: message = (\n    'error:' print.\n    message print.\n    ':' print.\n    line print.\n    column println.\n    exceptionBlock value: (ParseException with: message at: index\n                                          line: line    column: column )\n  )\n\n  isWhiteSpace = (\n    current = ' '  ifTrue: [^ true].\n    current = '\\t' ifTrue: [^ true].\n    current = '\\n' ifTrue: [^ true].\n    current = '\\r' ifTrue: [^ true].\n    ^ false\n  )\n\n  isDigit = (\n    current = '0' ifTrue: [^ true].\n    current = '1' ifTrue: [^ true].\n    current = '2' ifTrue: [^ true].\n    current = '3' ifTrue: [^ true].\n    current = '4' ifTrue: [^ true].\n    current = '5' ifTrue: [^ true].\n    current = '6' ifTrue: [^ true].\n    current = '7' ifTrue: [^ true].\n    current = '8' ifTrue: [^ true].\n    current = '9' ifTrue: [^ true].\n    ^ false\n  )\n\n  isEndOfText = (\n    ^ current isNil\n  )\n  \n  ----\n  \n  with: aJsonString = (\n    ^ self new initializeWith: aJsonString\n  )\n)\n", "JsonNumber.som": "JsonNumber = JsonValue (\n  | string |\n  \n  initializeWith: str = ( string := str )\n\n  asString = ( ^ string )\n  isNumber = ( ^ true )\n\n  asInteger = (\n    ^ Integer fromString: string\n  )\n\n  asDouble = (\n    ^ Double fromString: string\n  )\n\n  hashcode = (\n    ^ string hashcode\n  )\n\n  = other = (\n    self == other ifTrue: [ ^ true ].\n    other == nil ifTrue: [ ^ false ].\n    \n    self class == other class ifFalse: [ ^ false ].\n    ^ string = other asString\n  )\n\n  ----\n\n  new: string = (\n    string ifNil: [ self error: 'string is null' ].\n    ^ self new initializeWith: string\n  )\n)\n", "HashIndexTable.som": "HashIndexTable = (\n  | hashTable |\n  \n  initialize = (\n    hashTable := Array new: 32 withAll: 0\n  )\n\n  at: name put: index = (\n    | slot |\n    slot := self hashSlotFor: name.\n    \n    index < 255\n      ifTrue:  [ hashTable at: slot put: index + 1 ]\n      ifFalse: [ hashTable at: slot put: 0 ]\n  )\n\n  remove: index = (\n    hashTable doIndexes: [:i |\n      index + 1 = (hashTable at: i)\n        ifTrue:  [ hashTable at: i put: 0 ]\n        ifFalse: [ \n          (hashTable at: i) > index + 1 ifTrue: [\n            hashTable at: i put: (hashTable at: i) - 1]]]\n  )\n\n  at: name = (\n    | slot |\n    slot := self hashSlotFor: name.\n\n    \" subtract 1, 0 stands for empty \"\n    ^ ((hashTable at: slot) & 255) - 1\n  )\n\n  hashSlotFor: element = (\n    ^ (element hashcode & 31) + 1\n  )\n  \n  ----\n  \n  new = ( ^ super new initialize )\n)\n", "JsonLiteral.som": "JsonLiteral = JsonValue (\n  | value isNull isTrue isFalse |\n\n  initializeWith: val = (\n    value   := val.\n    isNull  := 'null'  = val.\n    isTrue  := 'true'  = val.\n    isFalse := 'false' = val.\n  )\n\n  asString  = ( ^ value )\n  hashcode  = ( ^ value hashcode )\n  isNull    = ( ^ isNull )\n  isTrue    = ( ^ isTrue )\n  isFalse   = ( ^ isFalse )\n  isBoolean = ( ^ isTrue || isFalse )\n\n  asBoolean = (\n    isNull ifTrue:  [ ^ super asBoolean ]\n           ifFalse: [ ^ isTrue ]\n  )\n\n  = other = (\n    self == other ifTrue: [ ^ true ].  \n    other == nil ifTrue: [ ^ false ].\n    self class == other class ifFalse: [ ^ false ].\n\n    ^ value = other asString\n  )\n\n  ----\n\n  | NULL TRUE FALSE |\n\n  initialize = (\n    NULL  := self new initializeWith: 'null'.\n    TRUE  := self new initializeWith: 'true'.\n    FALSE := self new initializeWith: 'false'.\n  )\n\n  NULL  = ( ^ NULL )\n  TRUE  = ( ^ TRUE )\n  FALSE = ( ^ FALSE )  \n)\n", "JsonSmall.som": "JsonSmall = Benchmark (\n\n    oneTimeSetup = (\n      JsonLiteral initialize.\n    )\n\n    benchmark = (\n      ^ (JsonParser with: JsonSmall RapBenchmark) parse.\n    )\n    \n    verifyResult: result = (\n      result class = ParseException ifTrue: [ result println ].\n      result isObject ifFalse: [^ false].\n      (result asObject at: 'head') isObject ifFalse: [^ false].\n      (result asObject at: 'operations') isArray ifFalse: [^ false].\n      ^ (result asObject at: 'operations') asArray size = 41\n    )\n    \n    ----\n    \n    RapBenchmark = (\n      ^ '{\n            \"head\":{\"requestCounter\":4},\n            \"operations\":[[\"destroy\",\"w54\"],[\"set\",\"w2\",{\"activeControl\":\"w99\"}],\n              [\"set\",\"w21\",{\"customVariant\":\"variant_navigation\"}],[\"set\",\"w28\",{\"customVariant\":\"variant_selected\"}],\n              [\"set\",\"w53\",{\"children\":[\"w95\"]}],\n              [\"create\",\"w95\",\"rwt.widgets.Composite\",{\"parent\":\"w53\",\"style\":[\"NONE\"],\"bounds\":[0,0,1008,586],\"children\":[\"w96\",\"w97\"],\"tabIndex\":-1,\"clientArea\":[0,0,1008,586]}],\n              [\"create\",\"w96\",\"rwt.widgets.Label\",{\"parent\":\"w95\",\"style\":[\"NONE\"],\"bounds\":[10,30,112,26],\"tabIndex\":-1,\"customVariant\":\"variant_pageHeadline\",\"text\":\"TableViewer\"}],\n              [\"create\",\"w97\",\"rwt.widgets.Composite\",{\"parent\":\"w95\",\"style\":[\"NONE\"],\"bounds\":[0,61,1008,525],\"children\":[\"w98\",\"w99\",\"w226\",\"w228\"],\"tabIndex\":-1,\"clientArea\":[0,0,1008,525]}],\n              [\"create\",\"w98\",\"rwt.widgets.Text\",{\"parent\":\"w97\",\"style\":[\"LEFT\",\"SINGLE\",\"BORDER\"],\"bounds\":[10,10,988,32],\"tabIndex\":22,\"activeKeys\":[\"#13\",\"#27\",\"#40\"]}],' +\n        '[\"listen\",\"w98\",{\"KeyDown\":true,\"Modify\":true}],\n              [\"create\",\"w99\",\"rwt.widgets.Grid\",{\"parent\":\"w97\",\"style\":[\"SINGLE\",\"BORDER\"],\"appearance\":\"table\",\"indentionWidth\":0,\"treeColumn\":-1,\"markupEnabled\":false}],\n              [\"create\",\"w100\",\"rwt.widgets.ScrollBar\",{\"parent\":\"w99\",\"style\":[\"HORIZONTAL\"]}],\n              [\"create\",\"w101\",\"rwt.widgets.ScrollBar\",{\"parent\":\"w99\",\"style\":[\"VERTICAL\"]}],' +\n        '[\"set\",\"w99\",{\"bounds\":[10,52,988,402],\"children\":[],\"tabIndex\":23,\"activeKeys\":[\"CTRL+#70\",\"CTRL+#78\",\"CTRL+#82\",\"CTRL+#89\",\"CTRL+#83\",\"CTRL+#71\",\"CTRL+#69\"],\"cancelKeys\":[\"CTRL+#70\",\"CTRL+#78\",\"CTRL+#82\",\"CTRL+#89\",\"CTRL+#83\",\"CTRL+#71\",\"CTRL+#69\"]}],\n              [\"listen\",\"w99\",{\"MouseDown\":true,\"MouseUp\":true,\"MouseDoubleClick\":true,\"KeyDown\":true}],\n              [\"set\",\"w99\",{\"itemCount\":118,\"itemHeight\":28,\"itemMetrics\":[[0,0,50,3,0,3,44],[1,50,50,53,0,53,44],[2,100,140,103,0,103,134],[3,240,180,243,0,243,174],[4,420,50,423,0,423,44],[5,470,50,473,0,473,44]],\"columnCount\":6,\"headerHeight\":35,\"headerVisible\":true,\"linesVisible\":true,\"focusItem\":\"w108\",\"selection\":[\"w108\"]}],\n              [\"listen\",\"w99\",{\"Selection\":true,\"DefaultSelection\":true}],\n              [\"set\",\"w99\",{\"enableCellToolTip\":true}],[\"listen\",\"w100\",{\"Selection\":true}],' +\n        '[\"set\",\"w101\",{\"visibility\":true}],[\"listen\",\"w101\",{\"Selection\":true}],\n              [\"create\",\"w102\",\"rwt.widgets.GridColumn\",{\"parent\":\"w99\",\"text\":\"Nr.\",\"width\":50,\"moveable\":true}],' +\n        '[\"listen\",\"w102\",{\"Selection\":true}],\n              [\"create\",\"w103\",\"rwt.widgets.GridColumn\",{\"parent\":\"w99\",\"text\":\"Sym.\",\"index\":1,\"left\":50,\"width\":50,\"moveable\":true}],\n              [\"listen\",\"w103\",{\"Selection\":true}],\n              [\"create\",\"w104\",\"rwt.widgets.GridColumn\",{\"parent\":\"w99\",\"text\":\"Name\",\"index\":2,\"left\":100,\"width\":140,\"moveable\":true}],\n              [\"listen\",\"w104\",{\"Selection\":true}],\n              [\"create\",\"w105\",\"rwt.widgets.GridColumn\",{\"parent\":\"w99\",\"text\":\"Series\",\"index\":3,\"left\":240,\"width\":180,\"moveable\":true}],\n              [\"listen\",\"w105\",{\"Selection\":true}],' +\n        '[\"create\",\"w106\",\"rwt.widgets.GridColumn\",{\"parent\":\"w99\",\"text\":\"Group\",\"index\":4,\"left\":420,\"width\":50,\"moveable\":true}],\n              [\"listen\",\"w106\",{\"Selection\":true}],\n              [\"create\",\"w107\",\"rwt.widgets.GridColumn\",{\"parent\":\"w99\",\"text\":\"Period\",\"index\":5,\"left\":470,\"width\":50,\"moveable\":true}],\n              [\"listen\",\"w107\",{\"Selection\":true}],\n              [\"create\",\"w108\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":0,\"texts\":[\"1\",\"H\",\"Hydrogen\",\"Nonmetal\",\"1\",\"1\"],\"cellBackgrounds\":[null,null,null,[138,226,52,255],null,null]}],' +\n        '[\"create\",\"w224\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":116,\"texts\":[\"117\",\"Uus\",\"Ununseptium\",\"Halogen\",\"17\",\"7\"],\"cellBackgrounds\":[null,null,null,[252,233,79,255],null,null]}],\n              [\"create\",\"w225\",\"rwt.widgets.GridItem\",{\"parent\":\"w99\",\"index\":117,\"texts\":[\"118\",\"Uuo\",\"Ununoctium\",\"Noble gas\",\"18\",\"7\"],\"cellBackgrounds\":[null,null,null,[114,159,207,255],null,null]}],\n              [\"create\",\"w226\",\"rwt.widgets.Composite\",{\"parent\":\"w97\",\"style\":[\"BORDER\"],\"bounds\":[10,464,988,25],\"children\":[\"w227\"],\"tabIndex\":-1,\"clientArea\":[0,0,986,23]}],\n              [\"create\",\"w227\",\"rwt.widgets.Label\",{\"parent\":\"w226\",\"style\":[\"NONE\"],\"bounds\":[10,10,966,3],\"tabIndex\":-1,\"text\":\"Hydrogen (H)\"}],' +\n        '[\"create\",\"w228\",\"rwt.widgets.Label\",{\"parent\":\"w97\",\"style\":[\"WRAP\"],\"bounds\":[10,499,988,16],\"tabIndex\":-1,\"foreground\":[150,150,150,255],\"font\":[[\"Verdana\",\"Lucida Sans\",\"Arial\",\"Helvetica\",\"sans-serif\"],10,false,false],\"text\":\"Shortcuts: [CTRL+F] - Filter | Sort by: [CTRL+R] - Number, [CTRL+Y] - Symbol, [CTRL+N] - Name, [CTRL+S] - Series, [CTRL+G] - Group, [CTRL+E] - Period\"}],\n              [\"set\",\"w1\",{\"focusControl\":\"w99\"}],[\"call\",\"rwt.client.BrowserNavigation\",\"addToHistory\",{\"entries\":[[\"tableviewer\",\"TableViewer\"]]}]]}'\n    )\n)\n", "ParseException.som": "ParseException = (\n  | offset line column msg |\n  \n  initializeWith: message at: anOffset line: aLine column: aColumn = (\n    msg    := message.\n    offset := anOffset.\n    line   := aLine.\n    column := aColumn.\n  )\n  \n  message = ( ^ msg )\n  \n  offset = ( ^ offset )\n  line   = ( ^ line   )\n  column = ( ^ column )\n  \n  asString = ( ^ msg + ':' + line + ':' + column )\n  \n  ----\n\n  with: aMessageString at: offset line: line column: column = (\n    ^ self new initializeWith: aMessageString\n                           at: offset\n                         line: line\n                       column: column\n  )\n)\n"}, "Richards": {"Time.som": "Time = Object (\n    ----\n    millisecondClockValue = (^system time)\n)\n", "WorkerTaskDataRecord.som": "WorkerTaskDataRecord = RBObject (\n    |destination count|\n    count = (^count)\n\n    count: aCount =(count := aCount)\n\n    destination = (^destination)\n\n    destination: aHandler = (destination := aHandler)\n\n    create = (\n        destination := RBObject HandlerA.\n        count := 0\n    )\n----\ncreate = (^super new create)\n)\n", "RichardsBenchmarks.som": "RichardsBenchmarks = RBObject (\n    |taskList currentTask currentTaskIdentity taskTable tracing layout queuePacketCount holdCount|\n\n    createDevice: identity priority: priority work: work state: state = (\n        | data |\n        data := DeviceTaskDataRecord create.\n        self\n                createTask: identity\n                priority: priority\n                work: work\n                state: state\n                function: \n                        [:work :word |\n                        | data functionWork | \n                        data := word.\n                        functionWork := work.\n                        RBObject NoWork == functionWork\n                                ifTrue:\n                                        [RBObject NoWork == (functionWork := data pending)\n                                                ifTrue: [self wait]\n                                                ifFalse: \n                                                        [data pending: RBObject NoWork.\n                                                        self queuePacket: functionWork]]\n                                ifFalse: \n                                        [data pending: functionWork.\n                                        tracing\n                                                ifTrue: \n                                                        [self trace: functionWork datum].\n                                        self holdSelf]]\n                data: data\n    )\n\n    createHandler: identity priority: priority work: work state: state = (\n        | data |\n        data := HandlerTaskDataRecord create.\n        self\n                createTask: identity\n                priority: priority\n                work: work\n                state: state\n                function: \n                        [:work :word | \n                        | data workPacket |\n                        data := word.\n                        RBObject NoWork == work\n                                ifFalse: [RBObject WorkPacketKind == work kind \n                                        ifTrue: [data workInAdd: work]\n                                        ifFalse: [data deviceInAdd: work]].\n                        RBObject NoWork == (workPacket := data workIn)\n                                ifTrue: [self wait]\n                                ifFalse: \n                                        [ |count|\n                                          count := workPacket datum.\n                                        count > 4\n                                                ifTrue: \n                                                        [data workIn: workPacket link.\n                                                        self queuePacket: workPacket]\n                                                ifFalse:\n                                                        [ | devicePacket |\n                                                          RBObject NoWork == (devicePacket := data deviceIn)\n                                                                ifTrue: [self wait]\n                                                                ifFalse: \n                                                                        [data deviceIn: devicePacket link.\n                                                                        devicePacket datum: (workPacket data at: count).\n                                                                        workPacket datum: count + 1.\n                                                                        self queuePacket: devicePacket]]]]\n                data: data\n    )\n\n    createIdler: identity priority: priority work: work state: state = (\n        | data |\n        data := IdleTaskDataRecord create.\n        self\n                createTask: identity\n                priority: priority\n                work: work\n                state: state\n                function: \n                        [:work :word | \n                        | data |\n                        data := word.\n                        data count: data count - 1.\n                        0 = data count\n                                ifTrue: [self holdSelf]\n                                ifFalse:\n                                        [0 = (data control & 1)\n                                                ifTrue: \n                                                        [data control: data control / 2.\n                                                        self release: RBObject DeviceA]\n                                                ifFalse: \n                                                        [data control: (data control / 2 bitXor: 53256).\n                                                        self release: RBObject DeviceB]]]\n                data: data\n    )\n\n    createPacket: link identity: identity kind: kind = (\n        ^Packet\n                create: link\n                identity: identity\n                kind: kind\n    )\n\n    createTask: identity priority: priority work: work state: state function: aBlock data: data = (\n        | t |\n\n        t := TaskControlBlock\n                                link: taskList\n                                create: identity\n                                priority: priority\n                                initialWorkQueue: work\n                                initialState: state\n                                function: aBlock\n                                privateData: data.\n        taskList := t.\n        taskTable at: identity put: t\n    )\n\n    createWorker: identity priority: priority work: work state: state = (\n        | data |\n        data := WorkerTaskDataRecord create.\n        self\n                createTask: identity\n                priority: priority\n                work: work\n                state: state\n                function: \n                        [:work :word |\n                        | data | \n                        data := word.\n                        RBObject NoWork == work\n                                ifTrue: [self wait]\n                                ifFalse: \n                                        [data destination: (RBObject HandlerA = data destination\n                                                        ifTrue: [RBObject HandlerB]\n                                                        ifFalse: [RBObject HandlerA]).\n                                        work identity: data destination.\n                                        work datum: 1.\n                                        1 to: 4 do: \n                                                [:i | \n                                                data count: data count + 1.\n                                                data count > 26 ifTrue: [data count: 1].\n                                                \"work data at: i put: $A asInteger + data count - 1].\"\n                                                work data at: i put: 65 + data count - 1].\n                                        self queuePacket: work]]\n                data: data\n    )\n\n    run = (\n        RBObject initialize.\n        self start.\n    )\n\n    start = (\n        | workQ mark1 mark2 mark3 mark4|\n        self initTrace.\n        self initScheduler.\n        mark1 := Time millisecondClockValue.\n        Transcript show: 'Bench mark starting'.\n        Transcript cr.\n        self\n                createIdler: RBObject Idler\n                priority: 0\n                work: RBObject NoWork\n                state: TaskState running.\n        workQ := self\n                                createPacket: RBObject NoWork\n                                identity: RBObject Worker\n                                kind: RBObject WorkPacketKind.\n        workQ := self\n                                createPacket: workQ\n                                identity: RBObject Worker\n                                kind: RBObject WorkPacketKind.\n        self\n                createWorker: RBObject Worker\n                priority: 1000\n                work: workQ\n                state: TaskState waitingWithPacket.\n        workQ := self\n                                createPacket: RBObject NoWork\n                                identity: RBObject DeviceA\n                                kind: RBObject DevicePacketKind.\n        workQ := self\n                                createPacket: workQ\n                                identity: RBObject DeviceA\n                                kind: RBObject DevicePacketKind.\n        workQ := self\n                                createPacket: workQ\n                                identity: RBObject DeviceA\n                                kind: RBObject DevicePacketKind.\n        self\n                createHandler: RBObject HandlerA\n                priority: 2000\n                work: workQ\n                state: TaskState waitingWithPacket.\n        workQ := self\n                                createPacket: RBObject NoWork\n                                identity: RBObject DeviceB\n                                kind: RBObject DevicePacketKind.\n        workQ := self\n                                createPacket: workQ\n                                identity: RBObject DeviceB\n                                kind: RBObject DevicePacketKind.\n        workQ := self\n                                createPacket: workQ\n                                identity: RBObject DeviceB\n                                kind: RBObject DevicePacketKind.\n        self\n                createHandler: RBObject HandlerB\n                priority: 3000\n                work: workQ\n                state: TaskState waitingWithPacket.\n        self\n                createDevice: RBObject DeviceA\n                priority: 4000\n                work: RBObject NoWork\n                state: TaskState waiting.\n        self\n                createDevice: RBObject DeviceB\n                priority: 5000\n                work: RBObject NoWork\n                state: TaskState waiting.\n        Transcript show: 'Starting'.\n        Transcript cr.\n        mark2 := Time millisecondClockValue.\n        self schedule.\n        mark3 := Time millisecondClockValue.\n        Transcript show: 'Finished'.\n        Transcript cr.\n        Transcript show: 'QueuePacket count = '.\n        Transcript show: queuePacketCount asString.\n        Transcript show: ' HoldCount = '.\n        Transcript show: holdCount asString.\n        Transcript cr.\n        Transcript show: 'These results are '.\n        (((queuePacketCount = 23246) and: (holdCount = 9297))\n            ifTrue: [Transcript show: 'correct']\n            ifFalse: [Transcript show: 'wrong']).\n        Transcript cr.\n        Transcript show: 'End of run'.\n        Transcript cr.\n        mark4 := Time millisecondClockValue.\n        Transcript show: '*****Scheduler time = '.\n        Transcript show: (mark3 - mark2) asString.\n        Transcript show: ' Total time = '.\n        Transcript show: (mark4 - mark1) asString.\n        Transcript cr\n    )\n    \n    \"This is start simply duplicated, removing all output and making the\n     correctness check exiting with an error.\"\n    reBenchStart = (\n        | workQ |\n        self initTrace.\n        self initScheduler.\n\n        self\n                createIdler: RBObject Idler\n                priority: 0\n                work: RBObject NoWork\n                state: TaskState running.\n        workQ := self\n                                createPacket: RBObject NoWork\n                                identity: RBObject Worker\n                                kind: RBObject WorkPacketKind.\n        workQ := self\n                                createPacket: workQ\n                                identity: RBObject Worker\n                                kind: RBObject WorkPacketKind.\n        self\n                createWorker: RBObject Worker\n                priority: 1000\n                work: workQ\n                state: TaskState waitingWithPacket.\n        workQ := self\n                                createPacket: RBObject NoWork\n                                identity: RBObject DeviceA\n                                kind: RBObject DevicePacketKind.\n        workQ := self\n                                createPacket: workQ\n                                identity: RBObject DeviceA\n                                kind: RBObject DevicePacketKind.\n        workQ := self\n                                createPacket: workQ\n                                identity: RBObject DeviceA\n                                kind: RBObject DevicePacketKind.\n        self\n                createHandler: RBObject HandlerA\n                priority: 2000\n                work: workQ\n                state: TaskState waitingWithPacket.\n        workQ := self\n                                createPacket: RBObject NoWork\n                                identity: RBObject DeviceB\n                                kind: RBObject DevicePacketKind.\n        workQ := self\n                                createPacket: workQ\n                                identity: RBObject DeviceB\n                                kind: RBObject DevicePacketKind.\n        workQ := self\n                                createPacket: workQ\n                                identity: RBObject DeviceB\n                                kind: RBObject DevicePacketKind.\n        self\n                createHandler: RBObject HandlerB\n                priority: 3000\n                work: workQ\n                state: TaskState waitingWithPacket.\n        self\n                createDevice: RBObject DeviceA\n                priority: 4000\n                work: RBObject NoWork\n                state: TaskState waiting.\n        self\n                createDevice: RBObject DeviceB\n                priority: 5000\n                work: RBObject NoWork\n                state: TaskState waiting.\n\n        self schedule.\n\n        ^ ((queuePacketCount = 23246) and: (holdCount = 9297))\n    )\n\n\n    findTask: identity = (\n        | t |\n        t := taskTable at: identity.\n        RBObject NoTask == t ifTrue: [self error: 'findTask failed'].\n        ^t\n    )\n\n    holdSelf = (\n        holdCount := holdCount + 1.\n        currentTask taskHolding: true.\n        ^currentTask link\n    )\n\n    initScheduler = (\n        queuePacketCount := 0.\n        holdCount := 0.\n        taskTable := Array new: 6 withAll: RBObject NoTask.\n        taskList := RBObject NoTask\n    )\n\n    initTrace = (\n        \"\u000e\u000e\u000e    BinaryChoice \n        message: 'Trace?' \n        displayAt: Sensor mousePoint \n        centered: true \n        ifTrue: [tracing := true] \n        ifFalse: [tracing := false].\n        \"\n        \"does not work in V. 4\"\n\n        tracing := false.\n        layout := 0\n    )\n\n    queuePacket: packet = (\n        | t |\n        t := self findTask: packet identity.\n        RBObject NoTask == t ifTrue: [^RBObject NoTask].\n        queuePacketCount := queuePacketCount + 1.\n        packet link: RBObject NoWork.\n        packet identity: currentTaskIdentity.\n        ^t addInput: packet checkPriority: currentTask\n    )\n\n    release: identity = (\n        | t |\n        t := self findTask: identity.\n        RBObject NoTask == t ifTrue: [^RBObject NoTask].\n        t taskHolding: false.\n        t priority > currentTask priority\n                ifTrue: [^t]\n                ifFalse: [^currentTask]\n    )\n\n    trace: id = (\n        layout := layout - 1.\n        0 >= layout\n                ifTrue: \n                        [Transcript cr.\n                        layout := 50].\n        Transcript show: id asString\n    )\n\n    wait = (\n        currentTask taskWaiting: true.\n        ^currentTask\n    )\n\n    schedule = (\n        currentTask := taskList. \n        [RBObject NoTask == currentTask]\n                whileFalse: \n                        [currentTask isTaskHoldingOrWaiting\n                                ifTrue: [currentTask := currentTask link]\n                                ifFalse: \n                                        [currentTaskIdentity := currentTask identity.\n                                        tracing ifTrue: [self trace: currentTaskIdentity].\n                                        currentTask := currentTask runTask]]\n    )\n\n    ----\n\n    start = (\n        super new start\n    )\n)\n", "Transcript.som": "Transcript = (\n    ----\n    cr = (system printNewline)\n    show: text = (system printString: text)\n)\n\n", "DeviceTaskDataRecord.som": "DeviceTaskDataRecord = RBObject (\n    |pending|\n\n    pending = (^pending)\n\n    pending: packet = (pending := packet)\n\n    create = (pending := RBObject NoWork)\n----\n    create = (\n        ^super new create\n    )\n)\n", "HandlerTaskDataRecord.som": "HandlerTaskDataRecord = RBObject (\n    |workIn deviceIn|\n\n    deviceIn = (^deviceIn)\n\n    deviceIn: aPacket = (deviceIn := aPacket)\n\n    deviceInAdd: packet = (\n        deviceIn := self append: packet head: deviceIn\n    )\n\n    workIn = (^workIn)\n\n    workIn: aWorkQueue = (workIn := aWorkQueue)\n\n    workInAdd: packet = (\n        workIn := self append: packet head: workIn\n    )\n\n    create = (\n        workIn := deviceIn := RBObject NoWork\n    )\n    asString = (\n        ^ 'HandlerTaskDataRecord(' + workIn asString + ', ' + deviceIn asString + ')'\n    )\n----\n    create = (^super new create)\n)\n", "Richards.som": "Richards = Benchmark (\n    benchmark = (\n        ^ RichardsBenchmarks new reBenchStart.\n    )\n    verifyResult: result = (\n      ^ result\n    )\n)", "IdleTaskDataRecord.som": "IdleTaskDataRecord = RBObject (\n\n    |control count|\n\n    control = (^control)\n\n    control: aNumber = (\n        control := aNumber\n    )\n\n    count = (^count)\n\n    count: aCount = (\n        count := aCount\n    )\n\n    create = (\n        control := 1.\n        count := 10000\n    )\n\n    ----\n\n    create = (^super new create)\n)\n", "Packet.som": "Packet = RBObject (\n    | link identity kind datum data |\n\n    data  = ( ^data)\n\n    datum = ( ^datum)\n    datum: someData = (datum := someData)\n\n    identity = ( ^identity)\n    identity: anIdentity = ( identity := anIdentity)\n\n    kind = ( ^kind)\n    link = ( ^link)\n\n    link: aWorkQueue = ( link := aWorkQueue )\n    link: aLink identity: anIdentity kind: aKind = (\n        link := aLink.\n        identity := anIdentity. \n        kind := aKind.\n        datum := 1.\n        data := Array new: 4 withAll: 0\n    )\n\n    asString = (\n        ^ 'Packet(' + \n            link asString + ', ' +\n            identity asString + ', ' +\n            kind asString + ', ' +\n            datum asString + ', ' +\n            data asString +\n          ')'\n    )\n    \n    ----\n\n    create: link identity: identity kind: kind = ( \n        ^super new\n            link: link\n            identity: identity\n            kind: kind\n    )\n)\n", "TaskControlBlock.som": "\nTaskControlBlock = TaskState (\n    |link identity priority input function handle|\n\n    identity = (^identity)\n\n    link = (^link)\n\n    priority = (^priority)\n\n    link: aLink identity: anIdentity priority: aPriority initialWorkQueue: anInitialWorkQueue initialState: anInitialState function: aBlock privateData: aPrivateData = (\n        link := aLink.\n        identity := anIdentity.\n        priority := aPriority.\n        input := anInitialWorkQueue.\n        self packetPending: anInitialState isPacketPending.\n        self taskWaiting: anInitialState isTaskWaiting.\n        self taskHolding: anInitialState isTaskHolding.\n        function := aBlock.\n        handle := aPrivateData.\n    )\n\n    addInput: packet checkPriority: oldTask = (\n        RBObject NoWork == input\n                ifTrue: \n                        [input := packet.\n                        self packetPending: true.\n                        priority > oldTask priority ifTrue: [^self]]\n                ifFalse: \n                        [input := self append: packet head: input].\n        ^oldTask\n    )\n\n    runTask = (\n     | message |\n     self isWaitingWithPacket\n         ifTrue: \n             [message := input.\n             input := message link.\n             RBObject NoWork == input\n                 ifTrue: [self running]\n                 ifFalse: [self packetPending]]\n         ifFalse: [message := RBObject NoWork].\n        ^function value: message with: handle\n    )\n\n----\n\n    link: link create: identity priority: priority initialWorkQueue: initialWorkQueue initialState: initialState function: aBlock privateData: privateData = (\n        ^super new\n                link: link\n                identity: identity\n                priority: priority\n                initialWorkQueue: initialWorkQueue\n                initialState: initialState\n                function: aBlock\n                privateData: privateData\n    )\n)\n", "RBObject.som": "RBObject = Object (\n\n    append: packet head: queueHead = (\n        | mouse link |\n        packet link: RBObject NoWork.\n        RBObject NoWork == queueHead ifTrue: [^packet].\n        mouse := queueHead.\n        [RBObject NoWork == (link := mouse link)]\n                whileFalse: [mouse := link].\n        mouse link: packet.\n        ^queueHead\n\t  )\n\n    ----\n\n    NoTask  = ( ^ nil )\n    Idler   = ( ^ 1   )\n    NoWork  = ( ^ nil )\n    Worker  = ( ^ 2 )\n    WorkPacketKind = ( ^ 2 )\n    HandlerA = ( ^ 3 )\n    HandlerB = ( ^ 4 )\n    DeviceA  = ( ^ 5 )\n    DeviceB  = ( ^ 6 )\n    DevicePacketKind = ( ^ 1 )\n)\n", "TaskState.som": "TaskState = RBObject (\n    |packetPending taskWaiting taskHolding|\n\n    isPacketPending = (^packetPending)\n\n    isTaskHolding = (^taskHolding)\n\n    isTaskWaiting = (^taskWaiting)\n\n    taskHolding: aBoolean   = (taskHolding   := aBoolean)\n    taskWaiting: aBoolean   = (taskWaiting   := aBoolean)\n    packetPending: aBoolean = (packetPending := aBoolean)\n\n    packetPending = (\n        packetPending := true.\n        taskWaiting := false.\n        taskHolding := false\n    )\n\n    running = (\n        packetPending := taskWaiting := taskHolding := false\n    )\n\n    waiting = (\n        packetPending := taskHolding := false.\n        taskWaiting := true\n    )\n\n    waitingWithPacket = (\n        taskHolding := false.\n        taskWaiting := packetPending := true\n    )\n\n    isRunning = (^packetPending not and: [taskWaiting not and: [taskHolding not]])\n\n    isTaskHoldingOrWaiting = (^taskHolding or: [packetPending not and: [taskWaiting]])\n\n    isWaiting = (^packetPending not and: [taskWaiting and: [taskHolding not]])\n\n    isWaitingWithPacket = (^packetPending and: [taskWaiting and: [taskHolding not]])\n\n\n    ----\n    packetPending = (^super new packetPending)\n\n    running = (\n        ^super new running\n    )\n\n    waiting = (^super new waiting)\n\n    waitingWithPacket = (^super new waitingWithPacket)\n)\n"}, "DeltaBlue": {"AbstractConstraint.som": "AbstractConstraint = (\n    \"I am an abstract class representing a system-maintainable relationship (or\n    'constraint') between a set of variables. I supply a strength instance\n    variable; concrete subclasses provide a means of storing the constrained\n    variables and other information required to represent a constraint.\n\n    Instance variables:\n        strength            the strength of this constraint <Strength>\"\n    | strength |\n\n    \"accessing\"\n\n    strength = (\n        \"Answer my strength.\"\n        ^strength\n    )\n\n    strength: strengthSymbol = (\n        \"Set my strength.\"\n        strength := Strength of: strengthSymbol.\n    )\n\n    \"queries\"\n    isInput = (\n        \"Normal constraints are not input constraints. An input constraint is\n         one that depends on external state, such as the mouse, the keyboard,\n         a clock, or some arbitrary piece of imperative code.\"\n        ^false\n    )\n\n    isSatisfied = (\n        \"Answer true if this constraint is satisfied in the current solution.\"\n        self subclassResponsibility\n    )\n\n    \"add/remove\"\n    addConstraint = (\n        \"Activate this constraint and attempt to satisfy it.\"\n\n        self addToGraph.\n        Planner current incrementalAdd: self.\n    )\n\n    addToGraph = (\n        \"Add myself to the constraint graph.\"\n        self subclassResponsibility\n    )\n\n    destroyConstraint = (\n        \"Deactivate this constraint, remove it from the constraint graph,\n         possibly causing other constraints to be satisfied, and destroy it.\"\n\n        (self isSatisfied) ifTrue: [Planner current incrementalRemove: self].\n        self removeFromGraph.\n        \"self release.\"\n    )\n\n    removeFromGraph = (\n        \"Remove myself from the constraint graph.\"\n        self subclassResponsibility\n    )\n\n    \"planning\"\n    chooseMethod: mark = (\n        \"Decide if I can be satisfied and record that decision. The output of\n         the choosen method must not have the given mark and must have a\n         walkabout strength less than that of this constraint.\"\n        self subclassResponsibility\n    )\n\n    execute = (\n        \"Enforce this constraint. Assume that it is satisfied.\"\n        self subclassResponsibility\n    )\n\n    inputsDo: aBlock = (\n        \"Assume that I am satisfied. Evaluate the given block on all my current\n         input variables.\"\n        self subclassResponsibility\n    )\n\n    inputsKnown: mark = (\n        \"Assume that I am satisfied. Answer true if all my current inputs are\n         known. A variable is known if either a) it is 'stay' (i.e. it is a\n         constant at plan execution time), b) it has the given mark (indicating\n         that it has been computed by a constraint appearing earlier in the\n         plan), or c) it is not determined by any constraint.\"\n\n        self inputsDo:\n            [: v |\n             ((v mark = mark) or: [(v stay) or: [v determinedBy == nil]]) ifFalse:\n                [^false]].\n        ^true\n    )\n\n    markUnsatisfied = (\n        \"Record the fact that I am unsatisfied.\"\n        self subclassResponsibility\n    )\n\n    output = (\n        \"Answer my current output variable. Raise an error if I am not\n         currently satisfied.\"\n        self subclassResponsibility\n    )\n\n    recalculate = (\n        \"Calculate the walkabout strength, the stay flag, and, if it is 'stay',\n         the value for the current output of this constraint. Assume this\n         constraint is satisfied.\"\n        self subclassResponsibility\n    )\n\n    satisfy: mark = (\n        \"Attempt to find a way to enforce this (still unsatisfied) constraint.\n         If successful, record the solution, perhaps modifying the current\n         dataflow graph.  Answer the constraint that this constraint overrides,\n         if there is one, or nil, if there isn't.\"\n\n        | overridden |\n        self chooseMethod: mark.\n        (self isSatisfied)\n            ifTrue:         \"constraint can be satisfied\"\n                [\"mark inputs to allow cycle detection in addPropagate\"\n                 | out |\n                 self inputsDo: [: in | in mark: mark].\n                 out := self output.\n                 overridden := out determinedBy.\n                 (overridden == nil) ifFalse: [overridden markUnsatisfied].\n                 out determinedBy: self.\n                 (Planner current addPropagate: self mark: mark) ifFalse:\n                    [self notify:\n                        ('Cycle encountered adding:\\n   ',\n                         self printString,\n                         '\\nConstraint removed.') withCRs.\n                     ^nil].\n                 out mark: mark]\n            ifFalse:            \"constraint cannot be satisfied\"\n                [overridden := nil.\n                 (strength sameAs: (Strength required)) ifTrue:\n                    [self notify: 'Failed to satisfy a required constraint']].\n        ^overridden\n    )\n\n    \"printing\"\n    longPrintOn: aStream = (\n\n        | bindings |\n        aStream nextPut: '('.\n        self shortPrintOn: aStream.\n        aStream space.\n        aStream nextPutAll: strength printString.\n        (self isSatisfied)\n            ifTrue:\n                [aStream cr. aStream space. aStream space. aStream space.\n                 self inputsDo:\n                    [: in | aStream nextPutAll: 'v', in asOop printString, ' '].\n                aStream nextPutAll: '-> '.\n                aStream nextPutAll: 'v', self output asOop printString]\n            ifFalse:\n                [aStream space. aStream nextPutAll: 'UNSATISFIED'].\n        aStream nextPut: ')'.\n        aStream cr.\n    )\n\n    printOn: aStream = (\n        self shortPrintOn: aStream\n    )\n\n    shortPrintOn: aStream = (\n        aStream nextPutAll: self class name, '(', self asOop printString, ')'.\n    )\n    \n)", "OrderedCollection.som": "OrderedCollection = Vector (\n    add: elem = (\n        ^ self append: elem\n    )\n    \n    addLast: elem = (\n        ^ self append: elem\n    )\n    \n    remove: obj ifAbsent: aBlock = (\n        (self remove: obj) ifFalse: aBlock\n    )\n    \n    \" private \"\n    insert: anObject before: spot = (\n        \"spot is an index in the range firstIndex .. lastIndex,\n         such an index is not known from outside the collection. \n         Never use this method in your code, it is meant for private use by\n         OrderedCollection only.\n         The methods for use are:\n            #add:before:   to insert an object before another object\n            #add:beforeIndex:   to insert an object before a given position. \"\n        | delta spotIndex |\n        spotIndex := spot.\n        delta := spotIndex - first.\n        first = 1 ifTrue: [\n            self makeRoomAtFirst.\n            spotIndex := first + delta].\n        first := first - 1.\n        storage\n            replaceFrom: first\n            to: spotIndex - 2\n            with: storage\n            startingAt: first + 1.\n        storage at: spotIndex - 1 put: anObject.\n        ^ anObject\n    )\n    \n    makeRoomAtFirst = (\n        \"Make some empty slots at the front of the array.\n         If we have more than 50% free space, then just move the elements,\n         so that the first 50% of the slots are free, otherwise add new free\n         slots to the front by growing. Precondition: firstIndex = 1\"\n    \n        | tally newFirstIndex newLastIndex |\n        tally := self size.\n        tally * 2 >= storage length ifTrue: [ ^self growAtFirst ].\n        tally = 0 ifTrue: [ ^self resetTo: storage length + 1 ].\n        newFirstIndex := storage length // 2 + 1.\n        newLastIndex := newFirstIndex - first + last - 1.\n        0 to: tally - 1 do: [ :offset |\n            storage at: newLastIndex - offset put: (storage at: last - offset - 1) ].\n        storage from: first to: newFirstIndex - 1 put: nil.\n        first := newFirstIndex.\n        last := newLastIndex + 1\n    )\n    \n    resetTo: index = (\n        first := index.\n        last  := first\n    )\n    \n    sort: i to: j with: sortBlock = (\n        \"Sort elements i through j of self to be nondescending according to\n        sortBlock.\"\n    \n        | di dij dj tt ij k l n |\n        sortBlock ifNil: [^self defaultSort: i to: j].\n        \"The prefix d means the data at that index.\"\n        (n := j + 1  - i) <= 1 ifTrue: [^self]. \"Nothing to sort.\"\n         \"Sort di,dj.\"\n        di := storage at: i.\n        dj := storage at: j.\n        (sortBlock value: di with: dj) \"i.e., should di precede dj?\"\n            ifFalse:\n                [storage swap: i with: j.\n                 tt := di.\n                 di := dj.\n                 dj := tt].\n        n > 2\n            ifTrue:  \"More than two elements.\"\n                [ij := (i + j) / 2.  \"ij is the midpoint of i and j.\"\n                 dij := storage at: ij.  \"Sort di,dij,dj.  Make dij be their median.\"\n                 (sortBlock value: di with: dij) \"i.e. should di precede dij?\"\n                   ifTrue:\n                    [(sortBlock value: dij with: dj) \"i.e., should dij precede dj?\"\n                      ifFalse:\n                        [storage swap: j with: ij.\n                         dij := dj]]\n                   ifFalse:  \"i.e. di should come after dij\"\n                    [storage swap: i with: ij.\n                     dij := di].\n                n > 3\n                  ifTrue:  \"More than three elements.\"\n                    [\"Find k>i and l<j such that dk,dij,dl are in reverse order.\n                    Swap k and l.  Repeat this procedure until k and l pass each other.\"\n                     k := i.\n                     l := j.\n                     [[l := l - 1.  k <= l and: [sortBlock value: dij with: (storage at: l)]]\n                       whileTrue.  \"i.e. while dl succeeds dij\"\n                      [k := k + 1.  k <= l and: [sortBlock value: (storage at: k) with: dij]]\n                       whileTrue.  \"i.e. while dij succeeds dk\"\n                      k <= l]\n                       whileTrue:\n                        [storage swap: k with: l].\n        \"Now l<k (either 1 or 2 less), and di through dl are all less than or equal to dk\n        through dj.  Sort those two segments.\"\n                    self sort: i to: l with: sortBlock.\n                    self sort: k to: j with: sortBlock]] )\n\n    sort: aBlock = (\n        \"Make the argument, aBlock, be the criterion for ordering elements of the\n        receiver.\"\n    \n        \"sortBlocks with side effects may not work right\"\n        self size > 0 ifTrue: [\n          self sort: first\n                 to: last - 1\n               with: aBlock\n        ]\n    )\n    \n    \n    \n    ----\n    \n    with: anElement = (\n        | col |\n        col := self new: 10.\n        col append: anElement.\n        ^ col\n    )\n)", "Variable.som": "Variable = (\n    \"I represent a constrained variable. In addition to my value, I maintain the\n    structure of the constraint graph, the current dataflow graph, and various\n    parameters of interest to the DeltaBlue incremental constraint solver.\n\n    Instance variables:\n        value           my value; changed by constraints, read by client <Object>\n        constraints     normal constraints that reference me <Array of Constraint>\n        determinedBy    the constraint that currently determines\n                        my value (or nil if there isn't one) <Constraint>\n        walkStrength        my walkabout strength <Strength>\n        stay            true if I am a planning-time constant <Boolean>\n        mark            used by the planner to mark constraints <Number>\"\n    | value constraints determinedBy walkStrength stay mark |\n    \n    \"initialize-release\"\n\n    initialize = (\n        value := 0.\n        constraints  := OrderedCollection new: 2.\n        determinedBy := nil.\n        walkStrength := Strength absoluteWeakest.\n        stay := true.\n        mark := 0.\n    )\n\n    \"access\"\n    addConstraint: aConstraint = (\n        \"Add the given constraint to the set of all constraints that refer\n         to me.\"\n\n        constraints add: aConstraint.\n    )\n\n    constraints = (\n        \"Answer the set of constraints that refer to me.\"\n\n        ^constraints\n    )\n\n    determinedBy = (\n        \"Answer the constraint that determines my value in the current\n         dataflow.\"\n\n        ^determinedBy\n    )\n\n    determinedBy: aConstraint = (\n        \"Record that the given constraint determines my value in the current\n         data flow.\"\n\n        determinedBy := aConstraint.\n    )\n\n    mark = (\n        \"Answer my mark value.\"\n\n        ^mark\n    )\n\n    mark: markValue = (\n        \"Set my mark value.\"\n\n        mark := markValue.\n    )\n\n    removeConstraint: c = (\n        \"Remove all traces of c from this variable.\"\n\n        constraints remove: c ifAbsent: [].\n        (determinedBy == c) ifTrue: [determinedBy := nil].\n    )\n\n    stay = (\n        \"Answer my stay flag.\"\n\n        ^stay\n    )\n\n    stay: aBoolean = (\n        \"Set my stay flag.\"\n\n        stay := aBoolean\n    )\n\n    value = (\n        \"Answer my value.\"\n\n        ^value\n    )\n\n    value: anObject = (\n        \"Set my value.\"\n\n        value := anObject.\n    )\n\n    walkStrength = (\n        \"Answer my walkabout strength in the current dataflow.\"\n\n        ^walkStrength\n    )\n\n    walkStrength: aStrength = (\n        \"Set my walkabout strength in the current dataflow.\"\n\n        walkStrength := aStrength.\n    )\n\n    \"printing\"\n    longPrintOn: aStream  = (\n\n        self shortPrintOn: aStream.\n        aStream nextPutAll: '   Constraints: '.\n        (constraints isEmpty)\n            ifTrue: [aStream cr. aStream tab. aStream nextPutAll: 'none']\n            ifFalse:\n                [constraints do:\n                    [: c | aStream cr. aStream tab. c shortPrintOn: aStream]].\n        (determinedBy isNil) ifFalse:\n            [aStream cr. aStream nextPutAll: '   Determined by: '.\n             aStream cr. aStream tab. determinedBy shortPrintOn: aStream].\n        aStream cr.\n    )\n\n    printOn: aStream = (\n        self shortPrintOn: aStream\n    )\n\n    shortPrintOn: aStream = (\n\n        aStream nextPutAll: 'V(', self asOop printString, ', '.\n        aStream nextPutAll: walkStrength printString, ', '.\n        (stay isNil) ifFalse:\n            [aStream nextPutAll: (stay ifTrue: ['stay, '] ifFalse: ['changing, '])].\n        aStream nextPutAll: value printString.\n        aStream nextPutAll: ')'.\n        aStream cr.\n    )\n    \n    ----\n\n    \"instance creation\"\n\n    new = (\n        ^super new initialize\n    )\n\n    value: aValue = (\n        | o |\n        o := super new.\n        o initialize.\n        ^ o value: aValue\n    )\n)", "EqualityConstraint.som": "EqualityConstraint = BinaryConstraint (\n    \"I constrain two variables to have the same value: `v1 = v2`.\"\n    \n    \"execution\"\n\n    execute = (\n        \"Enforce this constraint. Assume that it is satisfied.\"\n\n        (direction == #forward)\n            ifTrue:  [v2 value: v1 value]\n            ifFalse: [v1 value: v2 value].\n    )\n    \n    ----\n\n    \"instance creation\"\n\n    var: variable1 var: variable2 strength: strengthSymbol = (\n        \"Install a constraint with the given strength equating the given\n         variables.\"\n\n        ^(self new) var: variable1 var: variable2 strength: strengthSymbol\n    )\n)", "DeltaBlue.som": "DeltaBlue = Benchmark (\n\n    oneTimeSetup = ( Strength initialize )\n\n    innerBenchmarkLoop: innerIterations = (\n        Planner chainTest: innerIterations.\n        Planner projectionTest: innerIterations.\n        ^ true\n    )\n)", "SortedCollection.som": "SortedCollection = OrderedCollection (\n\n    | sortBlock |\n\n    indexForInserting: newObject = (\n        | index low high |\n        low  := first.\n        high := last - 1.\n        \n        sortBlock isNil\n            ifTrue: [[index := high + low / 2.  low > high]\n                whileFalse:\n                    [((storage at: index) <= newObject)\n                        ifTrue: [low := index + 1]\n                        ifFalse: [high := index - 1]]]\n            ifFalse: [[index := high + low / 2.  low > high]\n                whileFalse:\n                    [(sortBlock value: (storage at: index) with: newObject)\n                        ifTrue: [low := index + 1]\n                        ifFalse: [high := index - 1]]].\n        ^low )\n\n    sort: i to: j = (\n        \"Sort elements i through j of self to be nondescending according to\n        sortBlock.\"\n    \n        | di dij dj tt ij k l n |\n        sortBlock ifNil: [^self defaultSort: i to: j].\n        \"The prefix d means the data at that index.\"\n        (n := j + 1  - i) <= 1 ifTrue: [^self]. \"Nothing to sort.\"\n         \"Sort di,dj.\"\n        di := storage at: i.\n        dj := storage at: j.\n        (sortBlock value: di with: dj) \"i.e., should di precede dj?\"\n            ifFalse:\n                [storage swap: i with: j.\n                 tt := di.\n                 di := dj.\n                 dj := tt].\n        n > 2\n            ifTrue:  \"More than two elements.\"\n                [ij := (i + j) / 2.  \"ij is the midpoint of i and j.\"\n                 dij := storage at: ij.  \"Sort di,dij,dj.  Make dij be their median.\"\n                 (sortBlock value: di with: dij) \"i.e. should di precede dij?\"\n                   ifTrue:\n                    [(sortBlock value: dij with: dj) \"i.e., should dij precede dj?\"\n                      ifFalse:\n                        [storage swap: j with: ij.\n                         dij := dj]]\n                   ifFalse:  \"i.e. di should come after dij\"\n                    [storage swap: i with: ij.\n                     dij := di].\n                n > 3\n                  ifTrue:  \"More than three elements.\"\n                    [\"Find k>i and l<j such that dk,dij,dl are in reverse order.\n                    Swap k and l.  Repeat this procedure until k and l pass each other.\"\n                     k := i.\n                     l := j.\n                     [[l := l - 1.  k <= l and: [sortBlock value: dij with: (storage at: l)]]\n                       whileTrue.  \"i.e. while dl succeeds dij\"\n                      [k := k + 1.  k <= l and: [sortBlock value: (storage at: k) with: dij]]\n                       whileTrue.  \"i.e. while dij succeeds dk\"\n                      k <= l]\n                       whileTrue:\n                        [storage swap: k with: l].\n        \"Now l<k (either 1 or 2 less), and di through dl are all less than or equal to dk\n        through dj.  Sort those two segments.\"\n                    self sort: i to: l.\n                    self sort: k to: j]] )\n\n    addAll: aCollection = (\n        aCollection size > (self size / 3)\n            ifTrue:\n                [aCollection do: [:each | self addLast: each].\n                self reSort]\n            ifFalse: [aCollection do: [:each | self add: each]].\n        ^ aCollection )\n\n    reSort = (\n        self sort: first\n               to: last - 1\n    )\n\n    sortBlock: aBlock = (\n        \"Make the argument, aBlock, be the criterion for ordering elements of the\n        receiver.\"\n    \n        sortBlock := aBlock.\n        \"sortBlocks with side effects may not work right\"\n        self size > 0 ifTrue: [self reSort] )\n\n    copyEmpty = (\n        \"Answer a copy of the receiver without any of the receiver's elements.\"\n    \n        ^self species sortBlock: sortBlock )\n\n    addFirst: newObject = (\n        self shouldNotImplement )\n\n    insert: anObject before: spot = (\n        self shouldNotImplement )\n\n    defaultSort: i to: j = (\n        \"Sort elements i through j of self to be nondescending according to\n        sortBlock.\" \"Assume the default sort block ([:x :y | x <= y]).\"\n    \n        | di dij dj tt ij k l n |\n        \"The prefix d means the data at that index.\"\n        (n := j + 1  - i) <= 1 ifTrue: [^self]. \"Nothing to sort.\"\n         \"Sort di,dj.\"\n        di := storage at: i.\n        dj := storage at: j.\n        (di <= dj) \"i.e., should di precede dj?\"\n            ifFalse:\n                [storage swap: i with: j.\n                 tt := di.\n                 di := dj.\n                 dj := tt].\n        n > 2\n            ifTrue:  \"More than two elements.\"\n                [ij := (i + j) / 2.  \"ij is the midpoint of i and j.\"\n                 dij := storage at: ij.  \"Sort di,dij,dj.  Make dij be their median.\"\n                 (di <= dij) \"i.e. should di precede dij?\"\n                   ifTrue:\n                    [(dij <= dj) \"i.e., should dij precede dj?\"\n                      ifFalse:\n                        [storage swap: j with: ij.\n                         dij := dj]]\n                   ifFalse:  \"i.e. di should come after dij\"\n                    [storage swap: i with: ij.\n                     dij := di].\n                n > 3\n                  ifTrue:  \"More than three elements.\"\n                    [\"Find k>i and l<j such that dk,dij,dl are in reverse order.\n                    Swap k and l.  Repeat this procedure until k and l pass each other.\"\n                     k := i.\n                     l := j.\n                     [[l := l - 1.  k <= l and: [dij <= (storage at: l)]]\n                       whileTrue.  \"i.e. while dl succeeds dij\"\n                      [k := k + 1.  k <= l and: [(storage at: k) <= dij]]\n                       whileTrue.  \"i.e. while dij succeeds dk\"\n                      k <= l]\n                       whileTrue:\n                        [storage swap: k with: l].\n        \"Now l<k (either 1 or 2 less), and di through dl are all less than or equal to dk\n        through dj.  Sort those two segments.\"\n                    self defaultSort: i to: l.\n                    self defaultSort: k to: j]] )\n\n    should: a precede: b = (\n        ^ sortBlock ifNil: [a <= b] ifNotNil: [sortBlock value: a with: b] )\n\n    median = (\n        \"Return the middle element, or as close as we can get.\"\n    \n        ^ self at: self size + 1 / 2 )\n\n    at: anInteger put: anObject = (\n        self shouldNotImplement )\n\n    add: newObject = (\n        ^ super insert: newObject before: (self indexForInserting: newObject) )\n\n    = aSortedCollection = (\n        \"Answer true if my and aSortedCollection's species are the same,\n        and if our blocks are the same, and if our elements are the same.\"\n    \n        self species = aSortedCollection species ifFalse: [^ false].\n        sortBlock = aSortedCollection sortBlock\n            ifTrue: [^ super = aSortedCollection]\n            ifFalse: [^ false] )\n\n    collect: aBlock = (\n        \"Evaluate aBlock with each of my elements as the argument. Collect the\n        resulting values into an OrderedCollection. Answer the new collection.\n        Override the superclass in order to produce an OrderedCollection instead\n        of a SortedCollection.\"\n    \n        | newCollection |\n        newCollection := OrderedCollection new: self size.\n        self do: [:each | newCollection addLast: (aBlock value: each)].\n        ^ newCollection )\n\n    sort: aSortBlock = (\n        \"Sort this storage using aSortBlock. The block should take two arguments\n        and return true if the first element should preceed the second one.\"\n    \n        super sort: aSortBlock.\n        sortBlock := aSortBlock )\n\n    join: aCollection = (\n        | result |\n        \"Curiously addAllLast: does not trigger a reSort, so we must do it here.\"\n        result := super join: aCollection.\n        result reSort.\n        ^ result\n    )\n\n    sortTopologically = (\n        \"Plenty of room for increased efficiency in this one.\"\n    \n        | remaining result pick |\n        remaining := self asOrderedCollection.\n        result := OrderedCollection new.\n        [remaining isEmpty] whileFalse: [\n            pick := remaining select: [:item |\n                remaining allSatisfy: [:anotherItem |\n                    item == anotherItem or: [self should: item precede: anotherItem]]].\n            pick isEmpty ifTrue: [self error: 'bad topological ordering'].\n            result addAll: pick.\n            remaining removeAll: pick].\n        ^self copySameFrom: result )\n\n    sortBlock = (\n        \"Answer the blockContext which is the criterion for sorting elements of\n        the receiver.\"\n    \n        ^sortBlock )\n\n    ----\n\n    sortBlock: aBlock = (\n        \"Answer an instance of me such that its elements are sorted according to\n        the criterion specified in aBlock.\"\n    \n        ^(super new: 10) sortBlock: aBlock )\n\n)\n", "Planner.som": "Planner = (\n    \"This benchmark is an implementation of the DeltaBlue Constraint Solver\n     described in `The DeltaBlue Algorithm: An Incremental Constraint\n     Hierarchy Solver'', by Bjorn N. Freeman-Benson and John Maloney,\n     Communications of the ACM, January 1990 (also as University of\n     Washington TR 89-08-06).\n\n     To run the benchmark, execute the expression `Planner standardBenchmark`.\"\n    | currentMark |\n    \n    \"initialize\"\n\n    initialize = (\n        \"Planner initialize\"\n\n        currentMark := 1\n    )\n\n    \"add/remove\"\n\n    incrementalAdd: c = (\n        \"Attempt to satisfy the given constraint and, if successful,\n         incrementally update the dataflow graph.\n\n         Details: If satifying the constraint is successful, it may override a\n         weaker constraint on its output. The algorithm attempts to resatisfy\n         that constraint using some other method. This process is repeated\n         until either a) it reaches a variable that was not previously\n         determined by any constraint or b) it reaches a constraint that\n         is too weak to be satisfied using any of its methods. The variables\n         of constraints that have been processed are marked with a unique mark\n         value so that we know where we've been. This allows the algorithm to\n         avoid getting into an infinite loop even if the constraint graph has\n         an inadvertent cycle.\"\n\n        | mark overridden |\n        mark := self newMark.\n        overridden := c satisfy: mark.\n        [overridden == nil] whileFalse:\n            [overridden := overridden satisfy: mark]\n    )\n\n    incrementalRemove: c = (\n        \"Entry point for retracting a constraint. Remove the given constraint,\n         which should be satisfied, and incrementally update the dataflow\n         graph.\n\n         Details: Retracting the given constraint may allow some currently\n         unsatisfiable downstream constraint be satisfied. We thus collect a\n         list of unsatisfied downstream constraints and attempt to satisfy\n         each one in turn. This list is sorted by constraint strength,\n         strongest first, as a heuristic for avoiding unnecessarily adding\n         and then overriding weak constraints.\"\n\n        | out unsatisfied |\n        out := c output.\n        c markUnsatisfied.\n        c removeFromGraph.\n        unsatisfied := self removePropagateFrom: out.\n        unsatisfied do: [: u | self incrementalAdd: u]\n    )\n\n    \"planning/value propagation\"\n\n    extractPlanFromConstraints: constraints = (\n        \"Extract a plan for resatisfaction starting from the outputs of the\n         given constraints, usually a set of input constraints.\"\n\n        | sources |\n        sources := OrderedCollection new.\n        constraints do:\n            [: c | ((c isInput) and: [c isSatisfied]) ifTrue: [sources add: c]].\n        ^self makePlan: sources\n    )\n\n    extractPlanFromVariables: variables = (\n        \"Extract a plan from the dataflow graph having the given variables. It\n         is assumed that the given set of variables is complete, or at least\n         that it contains all the input variables.\"\n\n        | sources |\n        sources := OrderedCollection new.\n        variables do:\n            [: v |\n             (v constraints) do:\n                [: c | ((c isInput) and: [c isSatisfied]) ifTrue: [sources add: c]]].\n        ^self makePlan: sources\n    )\n\n    makePlan: sources = (\n        \"Extract a plan for resatisfaction starting from the given satisfied\n         source constraints, usually a set of input constraints. This method\n         assumes that stay optimization is desired; the plan will contain only\n         constraints whose output variables are not stay. Constraints that do\n         no computation, such as stay and edit constraints, are not included\n         in the plan.\n\n         Details: The outputs of a constraint are marked when it is added to\n         the plan under construction. A constraint may be appended to the plan\n         when all its input variables are known. A variable is known if either\n         a) the variable is marked (indicating that has been computed by a\n         constraint appearing earlier in the plan), b) the variable is 'stay'\n         (i.e. it is a constant at plan execution time), or c) the variable\n         is not determined by any constraint. The last provision is for past\n         states of history variables, which are not stay but which are also\n         not computed by any constraint.\"\n\n        | mark plan todo c |\n        mark := self newMark.\n        plan := Plan new.\n        todo := sources.\n        [todo isEmpty] whileFalse:\n            [c := todo removeFirst.\n             ((c output mark ~= mark) and:      \"not in plan already and...\"\n              [c inputsKnown: mark]) ifTrue:    \"eligible for inclusion\"\n                [plan addLast: c.\n                 c output mark: mark.\n                 self addConstraintsConsuming: c output to: todo]].\n        ^plan\n    )\n\n    propagateFrom: v = (\n        \"The given variable has changed. Propagate new values downstream.\"\n\n        | todo c |\n        todo := OrderedCollection new.\n        self addConstraintsConsuming: v to: todo.\n        [todo isEmpty] whileFalse:\n            [c := todo removeFirst.\n             c execute.\n             self addConstraintsConsuming: c output to: todo].\n    )\n\n    \"private\"\n\n    addConstraintsConsuming: v to: aCollection = (\n        | determiningC |\n        determiningC := v determinedBy.\n        v constraints do:\n            [: c |\n             ((c == determiningC) or: [c isSatisfied not]) ifFalse:\n                [aCollection add: c]].\n    )\n\n    addPropagate: c mark: mark = (\n        \"Recompute the walkabout strengths and stay flags of all variables\n         downstream of the given constraint and recompute the actual values\n         of all variables whose stay flag is true. If a cycle is detected,\n         remove the given constraint and answer false. Otherwise, answer true.\n\n         Details: Cycles are detected when a marked variable is encountered\n         downstream of the given constraint. The sender is assumed to have\n         marked the inputs of the given constraint with the given mark. Thus,\n         encountering a marked node downstream of the output constraint means\n         that there is a path from the constraint's output to one of its\n         inputs.\"\n\n        | todo d |\n        todo := OrderedCollection with: c.\n        [todo isEmpty] whileFalse:\n            [d := todo removeFirst.\n             (d output mark = mark) ifTrue:\n                [self incrementalRemove: c.\n                 ^false].\n             d recalculate.\n             self addConstraintsConsuming: d output to: todo].\n        ^true\n    )\n\n    changeVar: aVariable newValue: newValue = (\n        | editConstraint plan |\n        editConstraint := EditConstraint var: aVariable strength: #preferred.\n        plan := self extractPlanFromConstraints: (Array with: editConstraint).\n        10 timesRepeat: [\n            aVariable value: newValue.\n            plan execute].\n        editConstraint destroyConstraint.\n    )\n\n    constraintsConsuming: v do: aBlock = (\n\n        | determiningC |\n        determiningC := v determinedBy.\n        v constraints do:\n            [: c |\n             ((c == determiningC) or: [c isSatisfied not]) ifFalse:\n                [aBlock value: c]].\n    )\n\n    newMark = (\n        \"Select a previously unused mark value.\n\n         Details: We just keep incrementing. If necessary, the counter will\n         turn into a LargePositiveInteger. In that case, it will be a bit\n         slower to compute the next mark but the algorithms will all behave\n         correctly. We reserve the value '0' to mean 'unmarked'. Thus, this\n         generator starts at '1' and will never produce '0' as a mark value.\"\n\n        ^currentMark := currentMark + 1\n    )\n\n    removePropagateFrom: out = (\n        \"Update the walkabout strengths and stay flags of all variables\n         downstream of the given constraint. Answer a collection of unsatisfied\n         constraints sorted in order of decreasing strength.\"\n\n        | unsatisfied todo v nextC  u2 |\n        unsatisfied := OrderedCollection new.\n            \n        out determinedBy: nil.\n        out walkStrength: Strength absoluteWeakest.\n        out stay: true.\n        todo := OrderedCollection with: out.\n        [todo isEmpty] whileFalse: [\n            v := todo removeFirst.\n             v constraints do: [:c |\n                 (c isSatisfied) ifFalse: [unsatisfied add: c]].\n             self constraintsConsuming: v do:\n                [:c |\n                 c recalculate.\n                 todo add: c output]].\n\n        unsatisfied sort: [:c1 :c2 | c1 strength stronger: c2 strength].\n        ^unsatisfied\n    )\n    \n    run = (\n        Planner standardBenchmark\n    )\n    \n    ----\n    \n    | currentPlanner |\n\n    \"instance creation\"\n    new = (\n        ^currentPlanner := super new initialize\n    )\n\n    \"benchmarks\"\n    chainTest: n = (\n        \"Do chain-of-equality-constraints performance tests.\"\n        | vars editConstraint plan planner |\n        \n        planner := Planner new.\n        vars := Array new: n+1 withAll: [ Variable new ].\n\n        \"thread a chain of equality constraints through the variables\"\n        1 to: n do:\n            [ :i | | v1 v2 |\n             v1 := vars at: i.\n             v2 := vars at: i + 1.\n             EqualityConstraint var: v1 var: v2 strength: #required].\n\n        StayConstraint var: vars last strength: #strongDefault.\n        editConstraint := EditConstraint var: (vars first) strength: #preferred.\n        plan := planner extractPlanFromConstraints: (Array with: editConstraint).\n        1 to: 100 do: [ :v | \n            vars first value: v.\n            plan execute.\n            vars last value ~= v ifTrue: [self error: 'Chain test failed!!']].\n        editConstraint destroyConstraint\n    )\n\n    projectionTest: n = (\n        \"This test constructs a two sets of variables related to each other by\n         a simple linear transformation (scale and offset).\"\n\n        | scale offset src dst planner dests |\n        planner := Planner new.\n        dests := OrderedCollection new.\n        scale := Variable value: 10.\n        offset := Variable value: 1000.\n        1 to: n do:\n            [ :i |\n            src := Variable value: i.\n            dst := Variable value: i.\n            dests add: dst.\n            StayConstraint var: src strength: #default.\n            ScaleConstraint var: src var: scale var: offset var: dst strength: #required].\n\n        planner changeVar: src newValue: 17.\n        dst value ~= 1170 ifTrue: [self error: 'Projection test 1 failed!!'].\n\n        planner changeVar: dst newValue: 1050.\n        src value ~= 5 ifTrue: [self error: 'Projection test 2 failed!!'].\n\n        planner changeVar: scale newValue: 5.\n        1 to: n - 1 do: [ :i |\n            (dests at: i) value ~= (i*5 + 1000)\n                ifTrue: [self error: 'Projection test 3 failed!!']].\n\n        planner changeVar: offset newValue: 2000.\n        1 to: n - 1 do: [ :i |\n            (dests at: i) value ~= (i*5 + 2000)\n                ifTrue: [self error: 'Projection test 4 failed!!']]\n    )\n\n    report: string times: count run: aBlock = (\n        \"Report the time required to execute the given block.\"\n\n        | startTime endTime |\n        startTime := system ticks.\n        count timesRepeat: aBlock.\n        endTime := system ticks.\n        \n        (string + ' ' + ((endTime - startTime) / count / 1000) asString + ' milliseconds') println.\n    )\n\n    standardBenchmark = (\n        \"This the combined benchmark.\"\n        \"Planner standardBenchmark\"\n        \n        Strength initialize.\n\n        self report: 'Chain and projection tests' times: 100 run: [\n            self chainTest: 100. \n            self projectionTest: 100\n        ]\n    )\n\n    \"accessing\"\n    current = (\n        ^currentPlanner\n    )\n)", "EditConstraint.som": "EditConstraint = UnaryConstraint (\n    \"I am a unary input constraint used to mark a variable that the client\n     wishes to change.\"\n     \n    \"queries\"\n\n    isInput = (\n        \"I indicate that a variable is to be changed by imperative code.\"\n\n        ^true\n    )\n\n    \"execution\"\n\n    execute = (\n        \"Edit constraints do nothing.\"\n    )\n    \n    ----\n\n    \"instance creation\"\n\n    var: aVariable strength: strengthSymbol = (\n        \"Install an edit constraint with the given strength on the given\n         variable.\"\n\n        ^(self new) var: aVariable strength: strengthSymbol\n    )\n)", "Plan.som": "Plan = OrderedCollection (\n    \"A Plan is an ordered list of constraints to be executed in sequence to\n    resatisfy all currently satisfiable constraints in the face of one or more\n    changing inputs.\"\n    \n    \"execution\"\n    execute = (\n        \"Execute my constraints in order.\"\n\n        self do: [: c | c execute]\n    )\n)", "Strength.som": "Strength = (\n    \"Strengths are used to measure the relative importance of constraints. The\n     hierarchy of available strengths is determined by the class variable\n     StrengthTable (see my class initialization method). Because Strengths are\n     invariant, references to Strength instances are shared (i.e. all references\n     to `Strength of: #required` point to a single, shared instance). New\n     strengths may be inserted in the strength hierarchy without disrupting\n     current constraints.\n\n     Instance variables:\n         symbolicValue      symbolic strength name (e.g. #required) <Symbol>\n         arithmeticValue    index of the constraint in the hierarchy, used for comparisons <Number>\"\n    | symbolicValue arithmeticValue |\n    \n    \"comparing\"\n\n    sameAs: aStrength = (\n        \"Answer true if I am the same strength as the given Strength.\"\n\n        ^arithmeticValue = aStrength arithmeticValue\n    )\n\n    stronger: aStrength = (\n        \"Answer true if I am stronger than the given Strength.\"\n        ^arithmeticValue < aStrength arithmeticValue\n    )\n\n    weaker: aStrength = (\n        \"Answer true if I am weaker than the given Strength.\"\n        ^arithmeticValue > aStrength arithmeticValue\n    )\n\n    \"max/min\"\n\n    strongest: aStrength = (\n        \"Answer the stronger of myself and aStrength.\"\n\n        (aStrength stronger: self)\n            ifTrue: [^aStrength]\n            ifFalse: [^self].\n    )\n\n    weakest: aStrength = (\n        \"Answer the weaker of myself and aStrength.\"\n\n        (aStrength weaker: self)\n            ifTrue: [^aStrength]\n            ifFalse: [^self].\n    )\n\n    \"printing\"\n\n    printOn: aStream = (\n        \"Append a string which represents my strength onto aStream.\"\n\n        aStream nextPutAll: '%', symbolicValue, '%'.\n    )\n\n    \"private\"\n\n    arithmeticValue = (\n        \"Answer my arithmetic value. Used for comparisons. Note that\n         STRONGER constraints have SMALLER arithmetic values.\"\n\n        ^arithmeticValue\n    )\n\n    initializeWith: symVal = (\n        \"Record my symbolic value and reset my arithmetic value.\"\n\n        symbolicValue := symVal.\n        arithmeticValue := Strength strengthTable at: symbolicValue.\n    )\n\n    ----\n    | AbsoluteStrongest AbsoluteWeakest Required StrengthConstants StrengthTable |\n\n    strengthTable = (\n        ^ StrengthTable\n    )\n\n    \"class initialization\"\n\n    initialize = (\n        \"Initialize the symbolic strength table. Fix the internally caches\n         values of all existing instances.\"\n        \"Strength initialize\"\n\n        StrengthTable := Dictionary new.\n        StrengthTable at: #absoluteStrongest put: -10000.\n        StrengthTable at: #required put: -800.\n        StrengthTable at: #strongPreferred put: -600.\n        StrengthTable at: #preferred put: -400.\n        StrengthTable at: #strongDefault put: -200.\n        StrengthTable at: #default put: 0.\n        StrengthTable at: #weakDefault put: 500.\n        StrengthTable at: #absoluteWeakest put: 10000.\n\n        StrengthConstants := Dictionary new.\n        StrengthTable keys do:\n            [: strengthSymbol |\n                StrengthConstants\n                    at: strengthSymbol\n                    put: ((super new) initializeWith: strengthSymbol)].\n\n        AbsoluteStrongest := Strength of: #absoluteStrongest.\n        AbsoluteWeakest := Strength of: #absoluteWeakest.\n        Required := Strength of: #required.\n    )\n\n    \"instance creation\"\n    of: aSymbol = (\n        \"Answer an instance with the specified strength.\"\n        ^StrengthConstants at: aSymbol\n    )\n\n    \"constants\"\n    absoluteStrongest = (\n        ^AbsoluteStrongest\n    )\n\n    absoluteWeakest = (\n        ^AbsoluteWeakest\n    )\n\n    required = (\n        ^Required\n    )\n)", "UnaryConstraint.som": "UnaryConstraint = AbstractConstraint (\n    \"I am an abstract superclass for constraints having a single possible output\n    variable.\n\n    Instance variables:\n        output      possible output variable <Variable>\n        satisfied       true if I am currently satisfied <Boolean>\"\n    | output satisfied |\n    \n    \"initialize-release\"\n\n    var: aVariable strength: strengthSymbol = (\n        \"Initialize myself with the given variable and strength.\"\n\n        strength := Strength of: strengthSymbol.\n        output := aVariable.\n        satisfied := false.\n        self addConstraint.\n    )\n\n    \"queries\"\n    isSatisfied = (\n        \"Answer true if this constraint is satisfied in the current solution.\"\n\n        ^satisfied\n    )\n\n    \"add/remove\"\n\n    addToGraph = (\n        \"Add myself to the constraint graph.\"\n\n        output addConstraint: self.\n        satisfied := false.\n    )\n\n    removeFromGraph = (\n        \"Remove myself from the constraint graph.\"\n\n        (output == nil) ifFalse: [output removeConstraint: self].\n        satisfied := false.\n    )\n\n    \"planning\"\n\n    chooseMethod: mark = (\n        \"Decide if I can be satisfied and record that decision.\"\n\n        satisfied :=\n            (output mark ~= mark) and:\n            [strength stronger: output walkStrength].\n    )\n\n    execute = (\n        \"Enforce this constraint. Assume that it is satisfied.\"\n        self subclassResponsibility\n    )\n\n    inputsDo: aBlock = (\n        \"I have no input variables.\"\n    )\n\n    markUnsatisfied = (\n        \"Record the fact that I am unsatisfied.\"\n        satisfied := false.\n    )\n\n    output = (\n        \"Answer my current output variable.\"\n        ^ output\n    )\n\n    recalculate = (\n        \"Calculate the walkabout strength, the stay flag, and, if it is 'stay',\n         the value for the current output of this constraint. Assume this\n         constraint is satisfied.\"\n\n        output walkStrength: strength.\n        output stay: (self isInput not).\n        (output stay) ifTrue: [self execute].   \"stay optimization\"\n    )\n)", "BinaryConstraint.som": "BinaryConstraint = AbstractConstraint (\n    \"I am an abstract superclass for constraints having two possible output\n    variables.\n\n    Instance variables:\n        v1, v2      possible output variables <Variable>\n        direction       one of:\n                        #forward (v2 is output)\n                        #backward ( v1 is output)\n                        nil (not satisfied)\"\n    | v1 v2 direction |\n        \n    \"initialize-release\"\n\n    var: variable1 var: variable2 strength: strengthSymbol = (\n        \"Initialize myself with the given variables and strength.\"\n\n        strength := Strength of: strengthSymbol.\n        v1 := variable1.\n        v2 := variable2.\n        direction := nil.\n        self addConstraint.\n    )\n\n    \"queries\"\n\n    isSatisfied = (\n        \"Answer true if this constraint is satisfied in the current solution.\"\n\n        ^direction notNil\n    )\n\n    \"add/remove\"\n\n    addToGraph = (\n        \"Add myself to the constraint graph.\"\n\n        v1 addConstraint: self.\n        v2 addConstraint: self.\n        direction := nil\n    )\n\n    removeFromGraph = (\n        \"Remove myself from the constraint graph.\"\n\n        (v1 == nil) ifFalse: [v1 removeConstraint: self].\n        (v2 == nil) ifFalse: [v2 removeConstraint: self].\n        direction := nil.\n    )\n\n    \"planning\"\n\n    chooseMethod: mark = (\n        \"Decide if I can be satisfied and which way I should flow based on\n         the relative strength of the variables I relate, and record that\n         decision.\"\n\n        (v1 mark == mark) ifTrue:       \"forward or nothing\"\n            [((v2 mark ~= mark) and: [strength stronger: v2 walkStrength])\n                ifTrue: [^direction := #forward]\n                ifFalse: [^direction := nil]].\n\n        (v2 mark == mark) ifTrue:       \"backward or nothing\"\n            [((v1 mark ~= mark) and: [strength stronger: v1 walkStrength])\n                ifTrue: [^direction := #backward]\n                ifFalse: [^direction := nil]].\n\n        \"if we get here, neither variable is marked, so we have choice\"\n        (v1 walkStrength weaker: v2 walkStrength)\n            ifTrue:\n                [(strength stronger: v1 walkStrength)\n                    ifTrue: [^direction := #backward]\n                    ifFalse: [^direction := nil]]\n            ifFalse:\n                [(strength stronger: v2 walkStrength)\n                    ifTrue: [^direction := #forward]\n                    ifFalse: [^direction := nil]].\n    )\n\n    execute = (\n        \"Enforce this constraint. Assume that it is satisfied.\"\n\n        self subclassResponsibility\n    )\n\n    inputsDo: aBlock = (\n        \"Evaluate the given block on my current input variable.\"\n\n        (direction == #forward)\n            ifTrue: [aBlock value: v1]\n            ifFalse: [aBlock value: v2].\n    )\n\n    markUnsatisfied = (\n        \"Record the fact that I am unsatisfied.\"\n\n        direction := nil.\n    )\n\n    output = (\n        \"Answer my current output variable.\"\n\n        (direction == #forward)\n            ifTrue: [^v2]\n            ifFalse: [^v1]\n    )\n\n    recalculate = (\n        \"Calculate the walkabout strength, the stay flag, and, if it is 'stay',\n             the value for the current output of this constraint. Assume this\n         constraint is satisfied.\"\n\n        | in out |\n        (direction == #forward)\n            ifTrue: [in := v1. out := v2]\n            ifFalse: [in := v2. out := v1].\n        out walkStrength: (strength weakest: in walkStrength).\n        out stay: (in stay).\n        (out stay) ifTrue: [self execute].      \"stay optimization\"\n    )\n)", "ScaleConstraint.som": "ScaleConstraint = BinaryConstraint (\n    \"I relate two variables by the linear scaling relationship:\n    `v2 = (v1 * scale) + offset`. Either v1 or v2 may be changed to maintain\n    this relationship but the scale factor and offset are considered read-only.\n\n    Instance variables:\n        scale       scale factor input variable <Variable>\n        offset      offset input variable <Variable>\"\n    | scale offset |\n    \n    \"initialize-release\"\n\n    src: srcVar scale: scaleVar offset: offsetVar dst: dstVar strength: strengthSymbol = (\n        \"Initialize myself with the given variables and strength.\"\n\n        strength := Strength of: strengthSymbol.\n        v1 := srcVar.\n        v2 := dstVar.\n        scale := scaleVar.\n        offset := offsetVar.\n        direction := nil.\n        self addConstraint.\n    )\n\n    \"add/remove\"\n\n    addToGraph = (\n        \"Add myself to the constraint graph.\"\n\n        v1 addConstraint: self.\n        v2 addConstraint: self.\n        scale addConstraint: self.\n        offset addConstraint: self.\n        direction := nil.\n    )\n\n    removeFromGraph = (\n        \"Remove myself from the constraint graph.\"\n\n        (v1 == nil) ifFalse: [v1 removeConstraint: self].\n        (v2 == nil) ifFalse: [v2 removeConstraint: self].\n        (scale == nil) ifFalse: [scale removeConstraint: self].\n        (offset == nil) ifFalse: [offset removeConstraint: self].\n        direction := nil.\n    )\n\n    \"planning\"\n\n    execute = (\n        \"Enforce this constraint. Assume that it is satisfied.\"\n\n        (direction == #forward)\n            ifTrue:  [v2 value: (v1 value * scale value) + offset value]\n            ifFalse: [v1 value: (v2 value - offset value) / scale value].\n    )\n\n    inputsDo: aBlock = (\n        \"Evaluate the given block on my current input variable.\"\n\n        (direction == #forward)\n            ifTrue: [aBlock value: v1.\n                     aBlock value: scale.\n                     aBlock value: offset]\n            ifFalse: [aBlock value: v2.\n                      aBlock value: scale.\n                      aBlock value: offset].\n    )\n\n    recalculate = (\n        \"Calculate the walkabout strength, the stay flag, and, if it is 'stay',\n         the value for the current output of this constraint. Assume this\n         constraint is satisfied.\"\n\n        | in out |\n        (direction == #forward)\n            ifTrue:  [in  := v1. out := v2]\n            ifFalse: [out := v1. in  := v2].\n        out walkStrength: (strength weakest: in walkStrength).\n        out stay: ((in stay) and: [(scale stay) and: [offset stay]]).\n        (out stay) ifTrue: [self execute].      \"stay optimization\"\n    )\n    \n    ----\n\n    \"instance creation\"\n\n    var: src var: scale var: offset var: dst strength: strengthSymbol = (\n        \"Install a scale constraint with the given strength on the given\n         variables.\"\n\n        ^(self new) src: src scale: scale offset: offset dst: dst strength: strengthSymbol\n    )\n)", "StayConstraint.som": "StayConstraint = UnaryConstraint (\n    \"I mark variables that should, with some level of preference, stay the same.\n     I have one method with zero inputs and one output, which does nothing.\n     Planners may exploit the fact that, if I am satisfied, my output will not\n     change during plan execution. This is called 'stay optimization.'\"\n     \n     \n    \"execution\"\n\n    execute = (\n        \"Stay constraints do nothing.\"\n    )\n    \n    ----\n\n    \"instance creation\"\n\n    var: aVariable strength: strengthSymbol = (\n        \"Install a stay constraint with the given strength on the given variable.\"\n\n        ^(self new) var: aVariable strength: strengthSymbol\n    )\n)"}, "GCBenchmark": {"Node.som": "Node = (\n    |left right|\n\n    left = (^left)\n    left: val = (\n        left := val.\n    )\n    right = (^right)\n    right: val = (\n        right := val.\n    )\n    ----\n    create = (\n        ^(Node create: nil with: nil).\n    )\n    create: l with: r = (\n        |n|\n        n := Node new.\n        n left: l.\n        n right: r.\n        ^n.\n    )\n)\n", "GCBench.som": "\" Ported GCBench from PyPy Project: https://bitbucket.org/pypy/pypy/src/02ea09544fc9/pypy/translator/goal/gcbench.py\n  Original comment was:\n\n# Ported from a Java benchmark whose history is :\n#  This is adapted from a benchmark written by John Ellis and Pete Kovac\n#  of Post Communications.\n#  It was modified by Hans Boehm of Silicon Graphics.\n# \n#       This is no substitute for real applications.  No actual application\n#       is likely to behave in exactly this way.  However, this benchmark was\n#       designed to be more representative of real applications than other\n#       Java GC benchmarks of which we are aware.\n#       It attempts to model those properties of allocation requests that\n#       are important to current GC techniques.\n#       It is designed to be used either to obtain a single overall performance\n#       number, or to give a more detailed estimate of how collector\n#       performance varies with object lifetimes.  It prints the time\n#       required to allocate and collect balanced binary trees of various\n#       sizes.  Smaller trees result in shorter object lifetimes.  Each cycle\n#       allocates roughly the same amount of memory.\n#       Two data structures are kept around during the entire process, so\n#       that the measured performance is representative of applications\n#       that maintain some live in-memory data.  One of these is a tree\n#       containing many pointers.  The other is a large array containing\n#       double precision floating point numbers.  Both should be of comparable\n#       size.\n#\n#       The results are only really meaningful together with a specification\n#       of how much memory was used.  It is possible to trade memory for\n#       better time performance.  This benchmark should be run in a 32 MB\n#       heap, though we don't currently know how to enforce that uniformly.\n#\n#       Unlike the original Ellis and Kovac benchmark, we do not attempt\n#       measure pause times.  This facility should eventually be added back\n#       in.  There are several reasons for omitting it for now.  The original\n#       implementation depended on assumptions about the thread scheduler\n#       that don't hold uniformly.  The results really measure both the\n#       scheduler and GC.  Pause time measurements tend to not fit well with\n#       current benchmark suites.  As far as we know, none of the current\n#       commercial Java implementations seriously attempt to minimize GC pause\n#       times.\n#\n#       Known deficiencies:\n#               - No way to check on memory use\n#               - No cyclic data structures\n#               - No attempt to measure variation with object size\n#               - Results are sensitive to locking cost, but we dont\n#                 check for proper locking\n\"\nGCBench = (\n    |kStretchTreeDepth kLongLivedTreeDepth kArraySize kMaxTreeDepth\n    kMinTreeDepth cur_depth|\n\n    run = (\n        |temp_tree long_lived_tree array depths cur_depth t_start t_finish|\n        kStretchTreeDepth := 18.\n        kLongLivedTreeDepth := 16.\n        kArraySize := 500000.\n        kMaxTreeDepth := 16.\n        kMinTreeDepth := 4.\n        'Garbage Collector Test' println.\n        ('Stretching memory with a binary tree of depth ' + kStretchTreeDepth) println.\n        t_start := system time.\n        temp_tree := self make_tree: kStretchTreeDepth.\n        temp_tree := nil.\n\n        ('Creating a long-lived binary tree of depth ' + kLongLivedTreeDepth) println.\n        long_lived_tree := Node create.\n        self populate: kLongLivedTreeDepth tree: long_lived_tree.\n\n        ('Creating a long-lived array of ' + kArraySize + ' doubles') println.\n        array := Array new: kArraySize withAll: [(0//1)].\n        1 to: (kArraySize/2) do: [:value | array at: value put: (1 // value)].\n        depths := Array new: ((kMaxTreeDepth - kMinTreeDepth)/ 2 + 1).\n        cur_depth := kMinTreeDepth.\n        depths doIndexes: [:value |\n            depths at: value put: cur_depth.\n            cur_depth := cur_depth + 2.\n            ].\n        self time_constructions: depths.\n\n        ((long_lived_tree == nil))\n            ifTrue: [\"test failed\" println.].\n        t_finish := system time.\n        ('Completed in ' + (t_finish - t_start) + ' ms.') println.\n    )\n\n    make_tree: depth = (\n        depth <= 0\n            ifTrue:\n                [^(Node create)]\n            ifFalse:\n                [^(Node create: (self make_tree: (depth - 1)) with: (self\n                make_tree: (depth - 1)))]\n    )\n\n    time_constructions: depths = (\n        depths do: [:value | self time_construction: value].\n    )\n\n    time_construction: depth = ( |niters t_start t_finish temp_tree|\n        niters := self num_iters: depth.\n        ('Creating ' + niters + ' trees of depth ' + depth) println.\n        t_start := system time.\n        0 to: (niters-1) do: [:i |\n            temp_tree := Node create.\n            self populate: depth tree: temp_tree.\n            temp_tree := nil.].\n        t_finish := system time.\n        ('    Top down constrution took ' + (t_finish - t_start) + ' ms.') println.\n        t_start := system time.\n        0 to: (niters-1) do: [:i |\n            temp_tree := self make_tree: depth.\n            temp_tree := nil.].\n        t_finish := system time.\n        ('    Bottom up constrution took ' + (t_finish - t_start) + ' ms.') println.\n\n    )\n\n    num_iters: i = (\n        ^(2 * (self tree_size: kStretchTreeDepth) / (self tree_size: i)).\n    )\n\n    populate: depth tree: node = (\n        depth <= 0\n            ifFalse: [\n                depth := depth - 1.\n                node left: Node create.\n                node right: Node create.\n                self populate: depth tree: (node left).\n                self populate: depth tree: (node right).\n                ]\n    )\n\n    tree_size: i = ( |val|\n        val := 2.\n        i timesRepeat: [val := val * 2].\n        ^(val - 1).\n    )\n)\n"}}, "Snake": {"Main.som": "\"\n\n$Id: Main.som 191 2008-04-10 18:15:47Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nMain = (\n  run = (\n    | board view chr snake dir continue |\n    Terminal init.\n    Terminal clear.\n    dir := Terminal KEY_UP.\n\n    board := Board newWithWidth: 10 height: 10 numberOfApples: 5.\n    view := BoardView new: board.\n    view drawBoarder.\n    \n    snake := Snake newWithX: 5 Y: 5 andBoard: board.\n    continue := true.\n    [ continue ] whileTrue: [\n      chr := Terminal get. \n      ((Terminal KEY_UP = chr)\n        || ((Terminal KEY_DOWN) = chr)\n        || ((Terminal KEY_LEFT) = chr)\n        || ((Terminal KEY_RIGHT) = chr)) ifTrue: [ dir := chr ].\n      Terminal sleepFor: 250.\n      \n      \"Terminal cursorToX: 15 Y: 15.\"\n      (Terminal KEY_UP = dir) ifTrue: [ continue := snake moveUp ].\n      (Terminal KEY_DOWN = dir) ifTrue: [ continue := snake moveDown ].\n      (Terminal KEY_LEFT = dir) ifTrue: [ continue := snake moveLeft ].\n      (Terminal KEY_RIGHT = dir) ifTrue: [ continue := snake moveRight ].\n      '' println.\n    ].\n    \n    'GAME OVER' println.\n    Terminal uninit.\n  )\n)\n\n\"\n\nwhile (true) {\n\t$i = 4;\n\twhile ($i > 0) {\n\t\t$key = Terminal::get(0);\n\t\tif (in_array($key, array(Terminal::KEY_UP, Terminal::KEY_DOWN, Terminal::KEY_LEFT, Terminal::KEY_RIGHT))) {\n\t\t\t$dir = $key;\n\t\t}\n\t\tusleep(100000);\n\t\t$i--;\n\t}\n\t\t\n\t\n\tif (!$result) {\n\t\tTerminal::cursorTo(5, 15);\n\t\tTerminal::put('GAME OVER');\n\t\tsleep(5);\n\t\treturn;\n\t}\n}\n\nTerminal::clear();\n\"\n", "BoardView.som": "\"\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nBoardView = (\n  | board width height |\n\t\n  board: value = ( board := value )\n  width: value = ( width := value )\n  height: value = ( height := value )\n\n  updateCompletely = (\n    board do: [ :y |\n      y isNil ifFalse: [\n        y do: [ :apple |\n          apple isNil ifFalse: [\n            Terminal cursorToX: (apple x + 1) Y: (apple y + 1).\n            Terminal put: 'o'\n          ]\n        ]\n      ]\n    ]\n  )\n\t\n  remove: snakeElement = (\n    Terminal cursorToX: snakeElement x + 1 Y: snakeElement y + 1.\n    Terminal put: ' '\n  )\n\t\n  add: snakeElement = (\n    Terminal cursorToX: snakeElement x + 1 Y: snakeElement y + 1.\n    Terminal put: '#'\n  )\n\t\n  addApple: apple = (\n    Terminal cursorToX: apple x + 1 Y: apple y + 1.\n    Terminal put: 'o'\n  )\n\t\n  drawBoarder = (\n    Terminal cursorToX: 1 Y: 1.\n    Terminal put: '/'.\n    width timesRepeat: [ Terminal put: '-' ].\n    Terminal put: '\\\\'.\n\n    1 to: height do: [ :i |\n      Terminal cursorToX: 1 Y: i + 1.\n      Terminal put: '|'.\n      Terminal cursorToX: (width + 2) Y: i + 1.\n      Terminal put: '|'\n    ].\n\n    Terminal cursorToX: 1 Y: height + 2.\n    Terminal put: '\\\\'.\n    width timesRepeat: [ Terminal put: '-' ].\n    Terminal put: '/'.\n  )\n\n  ----\n\n  new: board = (\n    | newBoardView |\n    newBoardView := BoardView new.\n    board view: newBoardView.\n    newBoardView width: board width.\n    newBoardView height: board height.\n    ^newBoardView\n  )\n)\n", "Element.som": "\"\n\n$Id: Element.som 191 2008-04-10 18:15:47Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nElement = (\n  | x y |\n\n  x = ( ^x )\n  x: val = ( x := val )\n\n  y = ( ^y )\n  y: val = ( y := val )\n\n  ----\n  newWithX: x Y: y = (\n    | newElement |\n    newElement := self new.\n    newElement x: x.\n    newElement y: y.\n    ^newElement.\n  )\n)\n", "SnakeElement.som": "\"\n\n$Id: SnakeElement.som 191 2008-04-10 18:15:47Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nSnakeElement = Element (\n  | next prev |\n  next = ( ^next )\n  next: val = ( next := val )\n\n  prev = ( ^prev )\n  prev: val = ( prev := val )\n)\n", "Terminal.som": "\"\n\n$Id: Terminal.som 191 2008-04-10 18:15:47Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nTerminal = (\n\n  ----\n  KEY_UP = (^#key_up)\n  KEY_DOWN = (^#key_down)\n  KEY_LEFT = (^#key_left)\n  KEY_RIGHT = (^#key_right)\n\t\n  init = primitive\n\n  uninit = primitive\n  \n  cursorToX: x Y: y = (\n    '\u001b[' print.\n    y print.\n    ';' print.\n    x print.\n    'H' print.\n  )\n\n  clear = (\n    '\u001b[2J' print.\n  )\n\n  put: str = (\n    str print\n  )\n\n  getChar = primitive\n  \n  get = (\n    | chr result |\n    result := ''.\n    chr := self getChar.\n    \n    [ chr = nil ] whileFalse: [\n      result := result + chr.\n      chr := self getChar\n    ].\n    \n    ^self recognizeKeys: result.\n  )\n  \n  recognizeKeys: chrs = (\n    (chrs = '\u001b[A') ifTrue: [\n      ^self KEY_UP.\n    ].\n    \n    (chrs = '\u001b[B') ifTrue: [\n      ^self KEY_DOWN.\n    ].\n    \n    (chrs = '\u001b[C') ifTrue: [\n      ^self KEY_RIGHT.\n    ].\n    \n    (chrs = '\u001b[D') ifTrue: [\n      ^self KEY_LEFT.\n    ].\n    \n    (chrs = '') ifTrue: [\n      ^nil.\n    ].\n    \n    ^chrs\n  )\n  \n  sleepFor: sec = primitive\n)\n", "Board.som": "\"\n\n$Id: Board.som 426 2008-05-22 08:22:07Z stefan.marr $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nBoard = (\n  | view width height board |\n\n  width = ( ^width )\n  width: val = ( width := val. )\n\n  height = ( ^height )\n  height: val = ( height := val )\n\n  board = ( ^board )\n  board: val = ( board := val )\n  \n  view = ( ^view )\n\n  addApple = (\n    | added x y newApple |\n    added := false.\n\n    [ added ] whileFalse: [\n      x := 1 atRandom % width. \"$x = rand(0, $this->width - 1);\"\n      y := 1 atRandom % height.\n      \n      x := x + 1.\n      y := y + 1. \n\n      (self board at: x) isNil ifTrue: [\n        self board at: x put: (Array new: height).\n      ].\n\n      ((self board at: x) at: y) isNil ifTrue: [\n        newApple := Apple newWithX: x Y: y.\n        (self board at: x) at: y put: newApple.\n        added := true.\n        view isNil ifFalse: [\n          view addApple: newApple.\n        ].\n      ]\n    ]\n  )\n\n  view: value = (\n    view := value.\n    value board: board.\n    value updateCompletely.\n  )\n\n  isAppleAtX: x Y: y = (\n    ((board at: x) isNil) ifFalse: [\n      ((board at: x) at: y) isNil ifFalse: [\n        ^((board at: x) at: y) class == Apple\n      ]\n    ].\n    ^false\n  )\n\t\n  isSnakeAtX: x Y: y = (\n    ((board at: x) isNil) ifFalse: [\n      ((board at: x) at: y) isNil ifFalse: [\n        ^((board at: x) at: y) class == SnakeElement\n      ]\n    ].\n    ^false\n  )\n\t\n  remove: element = (\n    (self board at: (element x)) at: (element y) put: nil.\n    self view remove: element\n  )\n\t\n  add: element = (\n    (self board at: element x) isNil ifTrue: [\n      self board at: (element x) put: (Array new: height).\n    ].\n    (self board at: (element x)) at: (element y) put: element.\n    view add: element\n  )\n\n  ----\n\t\t\n  newWithWidth: width height: height numberOfApples: numberOfApples = (\n    | newBoard |\n    newBoard := Board new.\n    newBoard board: (Array new: width).\n    newBoard width: width.\n    newBoard height: height.\n\t\t\n    [numberOfApples >= 0] whileTrue: [\n      newBoard addApple.\n      numberOfApples := numberOfApples - 1.\n    ].\n    ^newBoard\n  ) \n)\n", "Apple.som": "\"\n\n$Id: Apple.som 191 2008-04-10 18:15:47Z michael.haupt $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nApple = Element ()\n", "Snake.som": "\"\n\n$Id: Snake.som 426 2008-05-22 08:22:07Z stefan.marr $\n\nCopyright (c) 2001-2013 see AUTHORS file\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\"\n\nSnake = (\n  | head tail board |\n  \n  head: val = ( head := val )\n  tail: val = ( tail := val )\n  board: val = ( board := val )\n  \n  moveLeft = (\n    | newPos |\n    newPos := SnakeElement newWithX: head x Y: head y.\n    newPos x: (self overflow: (newPos x - 1) max: board width).\n    ^self move: newPos\n  )\n\n  moveRight = (\n    | newPos |\n    newPos := SnakeElement newWithX: head x Y: head y.\n    newPos x: (self overflow: (newPos x + 1) max: board width).\n    ^self move: newPos\n  )\n\n  moveUp = (\n    | newPos |\n    newPos := SnakeElement newWithX: head x Y: head y.\n    newPos y: (self overflow: (newPos y - 1) max: board height).\n    ^self move: newPos\n  )\n\n  moveDown = (\n    | newPos |\n    newPos := SnakeElement newWithX: head x Y: head y.\n    newPos y: (self overflow: (newPos y + 1) max: board height).\n    ^self move: newPos\n  )\n\n  move: newPos = (\n    newPos next: head.\n    head prev: newPos.\n    head := newPos.\n\n    (board isAppleAtX: (newPos x) Y: (newPos y)) ifTrue: [\n      board addApple\n    ] ifFalse: [\n\n      (board isSnakeAtX: newPos x Y: newPos y) ifTrue: [\n        ^false\n      ].\n      board remove: tail.\n      tail := tail prev.\n      tail next: nil.\n    ].\n    board add: newPos.\n\n    ^true\n  )\n\t\n  overflow: val max: max = (\n    (val < 1) ifTrue: [ val := max + val ].\n    (val > max) ifTrue: [ val := val - max ].\n    ^val\n  )\n\n  ----\n  newWithX: x Y: y andBoard: board = (\n    | newSnake head |\n    newSnake := Snake new.\n    head := SnakeElement newWithX: x Y: y.\n    \n    newSnake head: head.\n    newSnake tail: head.\n    newSnake board: board.\n    board add: head.\n    ^newSnake\n  )\n)\n"}}}}; };
